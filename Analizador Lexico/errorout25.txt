Call:   sintactico
  Call:   program
    Call:   declarationList
      Call:   declaration
        Call:   varDeclaration(LOOKING AHEAD...)
          Call:   typeSpecifier(LOOKING AHEAD...)
No. linea: 4 Declaracion int: int
            Visited token: <"int" at line 4 column 1>; Expected token: <"int">
          Return: typeSpecifier(LOOKAHEAD SUCCEEDED)
No. linea: 4 Identificador: x
          Visited token: <<ID>: "x" at line 4 column 5>; Expected token: <<ID>>
          Call:   varDeclarationPrime(LOOKING AHEAD...)
No. linea: 4 Corchete incial: [
            Visited token: <<SQUAREBRACKETOPEN>: "[" at line 4 column 6>; Expected token: <<SEMICOLON>>
            Visited token: <<SQUAREBRACKETOPEN>: "[" at line 4 column 6>; Expected token: <<SQUAREBRACKETOPEN>>
            Call:   varDeclaration
              Call:   typeSpecifier
                Consumed token: <"int" at line 4 column 1>
              Return: typeSpecifier
              Consumed token: <<ID>: "x" at line 4 column 5>
              Call:   varDeclarationPrime
                Visited token: <<SQUAREBRACKETOPEN>: "[" at line 4 column 6>; Expected token: <<SQUAREBRACKETOPEN>>
                Call:   var(LOOKING AHEAD...)
No. linea: 4 Numero entero: 10
                  Visited token: <<NUMENT>: "10" at line 4 column 7>; Expected token: <<ID>>
                Return: var(LOOKAHEAD FAILED)
                Visited token: <<SQUAREBRACKETOPEN>: "[" at line 4 column 6>; Expected token: <<SQUAREBRACKETOPEN>>
                Visited token: <<NUMENT>: "10" at line 4 column 7>; Expected token: <<NUMENT>>
                Consumed token: <<SQUAREBRACKETOPEN>: "[" at line 4 column 6>
                Consumed token: <<NUMENT>: "10" at line 4 column 7>
No. linea: 4 Corchete final: ]
                Consumed token: <<SQUAREBRACKETCLOSE>: "]" at line 4 column 9>
No. linea: 4 Punto y Coma: ;
                Consumed token: <<SEMICOLON>: ";" at line 4 column 10>
              Return: varDeclarationPrime
            Return: varDeclaration
          Return: declaration
          Call:   declarationListPrime
No. linea: 6 Declaracion int: int
            Call:   declaration
              Call:   varDeclaration(LOOKING AHEAD...)
                Call:   typeSpecifier(LOOKING AHEAD...)
                  Visited token: <"int" at line 6 column 1>; Expected token: <"int">
                Return: typeSpecifier(LOOKAHEAD SUCCEEDED)
No. linea: 6 Identificador: minloc
                Visited token: <<ID>: "minloc" at line 6 column 5>; Expected token: <<ID>>
                Call:   varDeclarationPrime(LOOKING AHEAD...)
No. linea: 6 Parentesis incial: (
                  Visited token: <<BRACKETOPEN>: "(" at line 6 column 11>; Expected token: <<SEMICOLON>>
                  Visited token: <<BRACKETOPEN>: "(" at line 6 column 11>; Expected token: <<SQUAREBRACKETOPEN>>
                  Visited token: <<BRACKETOPEN>: "(" at line 6 column 11>; Expected token: <<SQUAREBRACKETOPEN>>
                Return: varDeclarationPrime(LOOKAHEAD FAILED)
              Return: varDeclaration(LOOKAHEAD FAILED)
              Call:   funDeclaration(LOOKING AHEAD...)
                Call:   typeSpecifier(LOOKING AHEAD...)
                  Visited token: <"int" at line 6 column 1>; Expected token: <"int">
                Return: typeSpecifier(LOOKAHEAD SUCCEEDED)
                Visited token: <<ID>: "minloc" at line 6 column 5>; Expected token: <<ID>>
                Visited token: <<BRACKETOPEN>: "(" at line 6 column 11>; Expected token: <<BRACKETOPEN>>
                Call:   funDeclaration
                  Call:   typeSpecifier
                    Consumed token: <"int" at line 6 column 1>
                  Return: typeSpecifier
                  Consumed token: <<ID>: "minloc" at line 6 column 5>
                  Consumed token: <<BRACKETOPEN>: "(" at line 6 column 11>
                  Call:   params
                    Call:   paramList(LOOKING AHEAD...)
                      Call:   param(LOOKING AHEAD...)
                        Call:   typeSpecifier(LOOKING AHEAD...)
No. linea: 6 Declaracion int: int
                          Visited token: <"int" at line 6 column 12>; Expected token: <"int">
                        Return: typeSpecifier(LOOKAHEAD SUCCEEDED)
No. linea: 6 Identificador: a
                        Visited token: <<ID>: "a" at line 6 column 16>; Expected token: <<ID>>
                        Call:   paramList
                          Call:   param
                            Call:   typeSpecifier
                              Consumed token: <"int" at line 6 column 12>
                            Return: typeSpecifier
                            Consumed token: <<ID>: "a" at line 6 column 16>
                            Call:   paramPrime
No. linea: 6 Corchete incial: [
                              Consumed token: <<SQUAREBRACKETOPEN>: "[" at line 6 column 17>
No. linea: 6 Corchete final: ]
                              Consumed token: <<SQUAREBRACKETCLOSE>: "]" at line 6 column 18>
No. linea: 6 Coma: ,
                            Return: paramPrime
                          Return: param
                          Call:   paramListPrime
                            Consumed token: <<COMMA>: "," at line 6 column 19>
                            Call:   param
                              Call:   typeSpecifier
No. linea: 6 Declaracion int: int
                                Consumed token: <"int" at line 6 column 21>
                              Return: typeSpecifier
No. linea: 6 Identificador: low
                              Consumed token: <<ID>: "low" at line 6 column 25>
                              Call:   paramPrime
No. linea: 6 Coma: ,
                              Return: paramPrime
                            Return: param
                            Call:   paramListPrime
                              Consumed token: <<COMMA>: "," at line 6 column 28>
                              Call:   param
                                Call:   typeSpecifier
No. linea: 6 Declaracion int: int
                                  Consumed token: <"int" at line 6 column 30>
                                Return: typeSpecifier
No. linea: 6 Identificador: high
                                Consumed token: <<ID>: "high" at line 6 column 34>
                                Call:   paramPrime
No. linea: 6 Parentesis final: )
                                Return: paramPrime
                              Return: param
                              Call:   paramListPrime
                              Return: paramListPrime
                            Return: paramListPrime
                          Return: paramListPrime
                        Return: paramList
                      Return: params
                      Consumed token: <<BRACKETCLOSE>: ")" at line 6 column 38>
                      Call:   compoundStmt
No. linea: 7 Llave incial: {
                        Consumed token: <<CURLYBRACKETOPEN>: "{" at line 7 column 1>
                        Call:   localDeclarations
                          Call:   localDeclarationsPrime
No. linea: 8 Declaracion int: int
                            Call:   varDeclaration
                              Call:   typeSpecifier
                                Consumed token: <"int" at line 8 column 5>
                              Return: typeSpecifier
No. linea: 8 Identificador: i
                              Consumed token: <<ID>: "i" at line 8 column 9>
                              Call:   varDeclarationPrime
No. linea: 8 Punto y Coma: ;
                                Consumed token: <<SEMICOLON>: ";" at line 8 column 10>
                              Return: varDeclarationPrime
                            Return: varDeclaration
                            Call:   localDeclarationsPrime
No. linea: 8 Declaracion int: int
                              Call:   varDeclaration
                                Call:   typeSpecifier
                                  Consumed token: <"int" at line 8 column 12>
                                Return: typeSpecifier
No. linea: 8 Identificador: x
                                Consumed token: <<ID>: "x" at line 8 column 16>
                                Call:   varDeclarationPrime
No. linea: 8 Punto y Coma: ;
                                  Consumed token: <<SEMICOLON>: ";" at line 8 column 17>
                                Return: varDeclarationPrime
                              Return: varDeclaration
                              Call:   localDeclarationsPrime
No. linea: 8 Declaracion int: int
                                Call:   varDeclaration
                                  Call:   typeSpecifier
                                    Consumed token: <"int" at line 8 column 19>
                                  Return: typeSpecifier
No. linea: 8 Identificador: k
                                  Consumed token: <<ID>: "k" at line 8 column 23>
                                  Call:   varDeclarationPrime
No. linea: 8 Punto y Coma: ;
                                    Consumed token: <<SEMICOLON>: ";" at line 8 column 24>
                                  Return: varDeclarationPrime
                                Return: varDeclaration
                                Call:   localDeclarationsPrime
No. linea: 10 Identificador: k
                                Return: localDeclarationsPrime
                              Return: localDeclarationsPrime
                            Return: localDeclarationsPrime
                          Return: localDeclarationsPrime
                        Return: localDeclarations
                        Call:   statementList
                          Call:   statementListPrime
                            Call:   statement
                              Call:   expressionStmt
                                Call:   expression
                                  Call:   var(LOOKING AHEAD...)
                                    Visited token: <<ID>: "k" at line 10 column 5>; Expected token: <<ID>>
                                    Call:   varPrime(LOOKING AHEAD...)
No. linea: 10 Operador igual: =
                                      Visited token: <<EQUIVALENCE>: "=" at line 10 column 7>; Expected token: <<SQUAREBRACKETOPEN>>
                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                  Return: var(LOOKAHEAD SUCCEEDED)
                                  Visited token: <<EQUIVALENCE>: "=" at line 10 column 7>; Expected token: <<EQUIVALENCE>>
                                  Call:   expression(LOOKING AHEAD...)
                                    Call:   var(LOOKING AHEAD...)
No. linea: 10 Identificador: low
                                      Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <<ID>>
                                      Call:   varPrime(LOOKING AHEAD...)
No. linea: 10 Punto y Coma: ;
                                        Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                    Return: var(LOOKAHEAD SUCCEEDED)
                                    Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<EQUIVALENCE>>
                                    Call:   simpleExpression(LOOKING AHEAD...)
                                      Call:   additiveExpression(LOOKING AHEAD...)
                                        Call:   term(LOOKING AHEAD...)
                                          Call:   factor(LOOKING AHEAD...)
                                            Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <<BRACKETOPEN>>
                                            Call:   call(LOOKING AHEAD...)
                                              Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <<ID>>
                                              Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<BRACKETOPEN>>
                                              Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <"output">
                                            Return: call(LOOKAHEAD FAILED)
                                            Call:   var(LOOKING AHEAD...)
                                              Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <<ID>>
                                              Call:   varPrime(LOOKING AHEAD...)
                                                Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                            Return: var(LOOKAHEAD SUCCEEDED)
                                          Return: factor(LOOKAHEAD SUCCEEDED)
                                          Call:   termPrime(LOOKING AHEAD...)
                                            Call:   mulop(LOOKING AHEAD...)
                                              Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<MULT>>
                                              Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<DIV>>
                                              Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<MOD>>
                                            Return: mulop(LOOKAHEAD FAILED)
                                          Return: termPrime(LOOKAHEAD SUCCEEDED)
                                        Return: term(LOOKAHEAD SUCCEEDED)
                                        Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                          Call:   addop(LOOKING AHEAD...)
                                            Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<SUM>>
                                            Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<SUB>>
                                          Return: addop(LOOKAHEAD FAILED)
                                        Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                      Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                      Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                        Call:   relop(LOOKING AHEAD...)
                                          Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <"==">
                                          Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <"<=">
                                          Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <">=">
                                          Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<ANGLEBRACKETOPEN>>
                                          Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<ANGLEBRACKETCLOSE>>
                                          Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <"!=">
                                        Return: relop(LOOKAHEAD FAILED)
                                      Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                    Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                  Return: expression(LOOKAHEAD SUCCEEDED)
                                  Call:   var
                                    Consumed token: <<ID>: "k" at line 10 column 5>
                                    Call:   varPrime
                                    Return: varPrime
                                  Return: var
                                  Consumed token: <<EQUIVALENCE>: "=" at line 10 column 7>
                                  Call:   expression
                                    Call:   var(LOOKING AHEAD...)
                                      Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <<ID>>
                                      Call:   varPrime(LOOKING AHEAD...)
                                        Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                    Return: var(LOOKAHEAD SUCCEEDED)
                                    Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<EQUIVALENCE>>
                                    Call:   simpleExpression(LOOKING AHEAD...)
                                      Call:   additiveExpression(LOOKING AHEAD...)
                                        Call:   term(LOOKING AHEAD...)
                                          Call:   factor(LOOKING AHEAD...)
                                            Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <<BRACKETOPEN>>
                                            Call:   call(LOOKING AHEAD...)
                                              Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <<ID>>
                                              Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<BRACKETOPEN>>
                                              Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <"output">
                                            Return: call(LOOKAHEAD FAILED)
                                            Call:   var(LOOKING AHEAD...)
                                              Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <<ID>>
                                              Call:   varPrime(LOOKING AHEAD...)
                                                Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                            Return: var(LOOKAHEAD SUCCEEDED)
                                          Return: factor(LOOKAHEAD SUCCEEDED)
                                          Call:   termPrime(LOOKING AHEAD...)
                                            Call:   mulop(LOOKING AHEAD...)
                                              Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<MULT>>
                                              Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<DIV>>
                                              Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<MOD>>
                                            Return: mulop(LOOKAHEAD FAILED)
                                          Return: termPrime(LOOKAHEAD SUCCEEDED)
                                        Return: term(LOOKAHEAD SUCCEEDED)
                                        Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                          Call:   addop(LOOKING AHEAD...)
                                            Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<SUM>>
                                            Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<SUB>>
                                          Return: addop(LOOKAHEAD FAILED)
                                        Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                      Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                      Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                        Call:   relop(LOOKING AHEAD...)
                                          Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <"==">
                                          Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <"<=">
                                          Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <">=">
                                          Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<ANGLEBRACKETOPEN>>
                                          Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<ANGLEBRACKETCLOSE>>
                                          Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <"!=">
                                        Return: relop(LOOKAHEAD FAILED)
                                      Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                    Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                    Call:   simpleExpression
                                      Call:   additiveExpression
                                        Call:   term
                                          Call:   factor
                                            Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <<BRACKETOPEN>>
                                            Call:   call(LOOKING AHEAD...)
                                              Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <<ID>>
                                              Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<BRACKETOPEN>>
                                              Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <"output">
                                            Return: call(LOOKAHEAD FAILED)
                                            Call:   var(LOOKING AHEAD...)
                                              Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <<ID>>
                                              Call:   varPrime(LOOKING AHEAD...)
                                                Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                            Return: var(LOOKAHEAD SUCCEEDED)
                                            Call:   var
                                              Consumed token: <<ID>: "low" at line 10 column 9>
                                              Call:   varPrime
                                              Return: varPrime
                                            Return: var
                                          Return: factor
                                          Call:   termPrime
                                          Return: termPrime
                                        Return: term
                                        Call:   additiveExpressionPrime
                                        Return: additiveExpressionPrime
                                      Return: additiveExpression
                                      Call:   simpleExpressionPrime
                                      Return: simpleExpressionPrime
                                    Return: simpleExpression
                                  Return: expression
                                Return: expression
                                Consumed token: <<SEMICOLON>: ";" at line 10 column 12>
                              Return: expressionStmt
                            Return: statement
                            Call:   statementListPrime
No. linea: 11 Identificador: x
                              Call:   statement
                                Call:   expressionStmt
                                  Call:   expression
                                    Call:   var(LOOKING AHEAD...)
                                      Visited token: <<ID>: "x" at line 11 column 5>; Expected token: <<ID>>
                                      Call:   varPrime(LOOKING AHEAD...)
No. linea: 11 Operador igual: =
                                        Visited token: <<EQUIVALENCE>: "=" at line 11 column 7>; Expected token: <<SQUAREBRACKETOPEN>>
                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                    Return: var(LOOKAHEAD SUCCEEDED)
                                    Visited token: <<EQUIVALENCE>: "=" at line 11 column 7>; Expected token: <<EQUIVALENCE>>
                                    Call:   expression(LOOKING AHEAD...)
                                      Call:   var(LOOKING AHEAD...)
No. linea: 11 Identificador: a
                                        Visited token: <<ID>: "a" at line 11 column 9>; Expected token: <<ID>>
                                        Call:   varPrime(LOOKING AHEAD...)
No. linea: 11 Corchete incial: [
                                          Visited token: <<SQUAREBRACKETOPEN>: "[" at line 11 column 11>; Expected token: <<SQUAREBRACKETOPEN>>
                                          Call:   expression(LOOKING AHEAD...)
                                            Call:   var(LOOKING AHEAD...)
No. linea: 11 Identificador: low
                                              Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<ID>>
                                              Call:   var
                                                Consumed token: <<ID>: "x" at line 11 column 5>
                                                Call:   varPrime
                                                Return: varPrime
                                              Return: var
                                              Consumed token: <<EQUIVALENCE>: "=" at line 11 column 7>
                                              Call:   expression
                                                Call:   var(LOOKING AHEAD...)
                                                  Visited token: <<ID>: "a" at line 11 column 9>; Expected token: <<ID>>
                                                  Call:   varPrime(LOOKING AHEAD...)
                                                    Visited token: <<SQUAREBRACKETOPEN>: "[" at line 11 column 11>; Expected token: <<SQUAREBRACKETOPEN>>
                                                    Call:   expression(LOOKING AHEAD...)
                                                      Call:   var(LOOKING AHEAD...)
                                                        Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<ID>>
                                                        Call:   varPrime(LOOKING AHEAD...)
No. linea: 11 Corchete final: ]
                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<EQUIVALENCE>>
                                                      Call:   simpleExpression(LOOKING AHEAD...)
                                                        Call:   additiveExpression(LOOKING AHEAD...)
                                                          Call:   term(LOOKING AHEAD...)
                                                            Call:   factor(LOOKING AHEAD...)
                                                              Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<BRACKETOPEN>>
                                                              Call:   call(LOOKING AHEAD...)
                                                                Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<ID>>
                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<BRACKETOPEN>>
                                                                Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <"output">
                                                              Return: call(LOOKAHEAD FAILED)
                                                              Call:   var(LOOKING AHEAD...)
                                                                Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<ID>>
                                                                Call:   varPrime(LOOKING AHEAD...)
                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                            Return: factor(LOOKAHEAD SUCCEEDED)
                                                            Call:   termPrime(LOOKING AHEAD...)
                                                              Call:   mulop(LOOKING AHEAD...)
                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<MULT>>
                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<DIV>>
                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<MOD>>
                                                              Return: mulop(LOOKAHEAD FAILED)
                                                            Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                          Return: term(LOOKAHEAD SUCCEEDED)
                                                          Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                            Call:   addop(LOOKING AHEAD...)
                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SUM>>
                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SUB>>
                                                            Return: addop(LOOKAHEAD FAILED)
                                                          Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                        Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                        Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                          Call:   relop(LOOKING AHEAD...)
                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <"==">
                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <"<=">
                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <">=">
                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<ANGLEBRACKETOPEN>>
                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <"!=">
                                                          Return: relop(LOOKAHEAD FAILED)
                                                        Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                      Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                    Return: expression(LOOKAHEAD SUCCEEDED)
                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SQUAREBRACKETCLOSE>>
No. linea: 11 Punto y Coma: ;
                                                    Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <<EQUIVALENCE>>
                                                Call:   simpleExpression(LOOKING AHEAD...)
                                                  Call:   additiveExpression(LOOKING AHEAD...)
                                                    Call:   term(LOOKING AHEAD...)
                                                      Call:   factor(LOOKING AHEAD...)
                                                        Visited token: <<ID>: "a" at line 11 column 9>; Expected token: <<BRACKETOPEN>>
                                                        Call:   call(LOOKING AHEAD...)
                                                          Visited token: <<ID>: "a" at line 11 column 9>; Expected token: <<ID>>
                                                          Visited token: <<SQUAREBRACKETOPEN>: "[" at line 11 column 11>; Expected token: <<BRACKETOPEN>>
                                                          Visited token: <<ID>: "a" at line 11 column 9>; Expected token: <"output">
                                                        Return: call(LOOKAHEAD FAILED)
                                                        Call:   var(LOOKING AHEAD...)
                                                          Visited token: <<ID>: "a" at line 11 column 9>; Expected token: <<ID>>
                                                          Call:   varPrime(LOOKING AHEAD...)
                                                            Visited token: <<SQUAREBRACKETOPEN>: "[" at line 11 column 11>; Expected token: <<SQUAREBRACKETOPEN>>
                                                            Call:   expression(LOOKING AHEAD...)
                                                              Call:   var(LOOKING AHEAD...)
                                                                Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<ID>>
                                                                Call:   varPrime(LOOKING AHEAD...)
                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<EQUIVALENCE>>
                                                              Call:   simpleExpression(LOOKING AHEAD...)
                                                                Call:   additiveExpression(LOOKING AHEAD...)
                                                                  Call:   term(LOOKING AHEAD...)
                                                                    Call:   factor(LOOKING AHEAD...)
                                                                      Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<BRACKETOPEN>>
                                                                      Call:   call(LOOKING AHEAD...)
                                                                        Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<ID>>
                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<BRACKETOPEN>>
                                                                        Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <"output">
                                                                      Return: call(LOOKAHEAD FAILED)
                                                                      Call:   var(LOOKING AHEAD...)
                                                                        Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<ID>>
                                                                        Call:   varPrime(LOOKING AHEAD...)
                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                                    Return: factor(LOOKAHEAD SUCCEEDED)
                                                                    Call:   termPrime(LOOKING AHEAD...)
                                                                      Call:   mulop(LOOKING AHEAD...)
                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<MULT>>
                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<DIV>>
                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<MOD>>
                                                                      Return: mulop(LOOKAHEAD FAILED)
                                                                    Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                  Return: term(LOOKAHEAD SUCCEEDED)
                                                                  Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                    Call:   addop(LOOKING AHEAD...)
                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SUM>>
                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SUB>>
                                                                    Return: addop(LOOKAHEAD FAILED)
                                                                  Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                  Call:   relop(LOOKING AHEAD...)
                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <"==">
                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <"<=">
                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <">=">
                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <"!=">
                                                                  Return: relop(LOOKAHEAD FAILED)
                                                                Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                              Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                            Return: expression(LOOKAHEAD SUCCEEDED)
                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SQUAREBRACKETCLOSE>>
                                                            Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                          Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                        Return: var(LOOKAHEAD SUCCEEDED)
                                                      Return: factor(LOOKAHEAD SUCCEEDED)
                                                      Call:   termPrime(LOOKING AHEAD...)
                                                        Call:   mulop(LOOKING AHEAD...)
                                                          Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <<MULT>>
                                                          Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <<DIV>>
                                                          Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <<MOD>>
                                                        Return: mulop(LOOKAHEAD FAILED)
                                                      Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                    Return: term(LOOKAHEAD SUCCEEDED)
                                                    Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                      Call:   addop(LOOKING AHEAD...)
                                                        Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <<SUM>>
                                                        Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <<SUB>>
                                                      Return: addop(LOOKAHEAD FAILED)
                                                    Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                  Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                  Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                    Call:   relop(LOOKING AHEAD...)
                                                      Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <"==">
                                                      Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <"<=">
                                                      Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <">=">
                                                      Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <<ANGLEBRACKETOPEN>>
                                                      Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                      Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <"!=">
                                                    Return: relop(LOOKAHEAD FAILED)
                                                  Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                Call:   simpleExpression
                                                  Call:   additiveExpression
                                                    Call:   term
                                                      Call:   factor
                                                        Visited token: <<ID>: "a" at line 11 column 9>; Expected token: <<BRACKETOPEN>>
                                                        Call:   call(LOOKING AHEAD...)
                                                          Visited token: <<ID>: "a" at line 11 column 9>; Expected token: <<ID>>
                                                          Visited token: <<SQUAREBRACKETOPEN>: "[" at line 11 column 11>; Expected token: <<BRACKETOPEN>>
                                                          Visited token: <<ID>: "a" at line 11 column 9>; Expected token: <"output">
                                                        Return: call(LOOKAHEAD FAILED)
                                                        Call:   var(LOOKING AHEAD...)
                                                          Visited token: <<ID>: "a" at line 11 column 9>; Expected token: <<ID>>
                                                          Call:   varPrime(LOOKING AHEAD...)
                                                            Visited token: <<SQUAREBRACKETOPEN>: "[" at line 11 column 11>; Expected token: <<SQUAREBRACKETOPEN>>
                                                            Call:   var
                                                              Consumed token: <<ID>: "a" at line 11 column 9>
                                                              Call:   varPrime
                                                                Consumed token: <<SQUAREBRACKETOPEN>: "[" at line 11 column 11>
                                                                Call:   expression
                                                                  Call:   var(LOOKING AHEAD...)
                                                                    Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<ID>>
                                                                    Call:   varPrime(LOOKING AHEAD...)
                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<EQUIVALENCE>>
                                                                  Call:   simpleExpression(LOOKING AHEAD...)
                                                                    Call:   additiveExpression(LOOKING AHEAD...)
                                                                      Call:   term(LOOKING AHEAD...)
                                                                        Call:   factor(LOOKING AHEAD...)
                                                                          Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<BRACKETOPEN>>
                                                                          Call:   call(LOOKING AHEAD...)
                                                                            Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<ID>>
                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<BRACKETOPEN>>
                                                                            Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <"output">
                                                                          Return: call(LOOKAHEAD FAILED)
                                                                          Call:   var(LOOKING AHEAD...)
                                                                            Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<ID>>
                                                                            Call:   varPrime(LOOKING AHEAD...)
                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                        Return: factor(LOOKAHEAD SUCCEEDED)
                                                                        Call:   termPrime(LOOKING AHEAD...)
                                                                          Call:   mulop(LOOKING AHEAD...)
                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<MULT>>
                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<DIV>>
                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<MOD>>
                                                                          Return: mulop(LOOKAHEAD FAILED)
                                                                        Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                      Return: term(LOOKAHEAD SUCCEEDED)
                                                                      Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                        Call:   addop(LOOKING AHEAD...)
                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SUM>>
                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SUB>>
                                                                        Return: addop(LOOKAHEAD FAILED)
                                                                      Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                    Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                    Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                      Call:   relop(LOOKING AHEAD...)
                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <"==">
                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <"<=">
                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <">=">
                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <"!=">
                                                                      Return: relop(LOOKAHEAD FAILED)
                                                                    Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                  Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                  Call:   simpleExpression
                                                                    Call:   additiveExpression
                                                                      Call:   term
                                                                        Call:   factor
                                                                          Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<BRACKETOPEN>>
                                                                          Call:   call(LOOKING AHEAD...)
                                                                            Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<ID>>
                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<BRACKETOPEN>>
                                                                            Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <"output">
                                                                          Return: call(LOOKAHEAD FAILED)
                                                                          Call:   var(LOOKING AHEAD...)
                                                                            Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<ID>>
                                                                            Call:   varPrime(LOOKING AHEAD...)
                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                          Call:   var
                                                                            Consumed token: <<ID>: "low" at line 11 column 12>
                                                                            Call:   varPrime
                                                                            Return: varPrime
                                                                          Return: var
                                                                        Return: factor
                                                                        Call:   termPrime
                                                                        Return: termPrime
                                                                      Return: term
                                                                      Call:   additiveExpressionPrime
                                                                      Return: additiveExpressionPrime
                                                                    Return: additiveExpression
                                                                    Call:   simpleExpressionPrime
                                                                    Return: simpleExpressionPrime
                                                                  Return: simpleExpression
                                                                Return: expression
                                                                Consumed token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>
                                                              Return: varPrime
                                                            Return: var
                                                          Return: factor
                                                          Call:   termPrime
                                                          Return: termPrime
                                                        Return: term
                                                        Call:   additiveExpressionPrime
                                                        Return: additiveExpressionPrime
                                                      Return: additiveExpression
                                                      Call:   simpleExpressionPrime
                                                      Return: simpleExpressionPrime
                                                    Return: simpleExpression
                                                  Return: expression
                                                Return: expression
                                                Consumed token: <<SEMICOLON>: ";" at line 11 column 16>
                                              Return: expressionStmt
                                            Return: statement
                                            Call:   statementListPrime
No. linea: 12 Identificador: i
                                              Call:   statement
                                                Call:   expressionStmt
                                                  Call:   expression
                                                    Call:   var(LOOKING AHEAD...)
                                                      Visited token: <<ID>: "i" at line 12 column 5>; Expected token: <<ID>>
                                                      Call:   varPrime(LOOKING AHEAD...)
No. linea: 12 Operador igual: =
                                                        Visited token: <<EQUIVALENCE>: "=" at line 12 column 7>; Expected token: <<SQUAREBRACKETOPEN>>
                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                    Visited token: <<EQUIVALENCE>: "=" at line 12 column 7>; Expected token: <<EQUIVALENCE>>
                                                    Call:   expression(LOOKING AHEAD...)
                                                      Call:   var(LOOKING AHEAD...)
No. linea: 12 Identificador: low
                                                        Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <<ID>>
                                                        Call:   varPrime(LOOKING AHEAD...)
No. linea: 12 Operador suma: +
                                                          Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<SQUAREBRACKETOPEN>>
                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                      Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<EQUIVALENCE>>
                                                      Call:   simpleExpression(LOOKING AHEAD...)
                                                        Call:   additiveExpression(LOOKING AHEAD...)
                                                          Call:   term(LOOKING AHEAD...)
                                                            Call:   factor(LOOKING AHEAD...)
                                                              Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <<BRACKETOPEN>>
                                                              Call:   call(LOOKING AHEAD...)
                                                                Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <<ID>>
                                                                Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<BRACKETOPEN>>
                                                                Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <"output">
                                                              Return: call(LOOKAHEAD FAILED)
                                                              Call:   var(LOOKING AHEAD...)
                                                                Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <<ID>>
                                                                Call:   varPrime(LOOKING AHEAD...)
                                                                  Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                            Return: factor(LOOKAHEAD SUCCEEDED)
                                                            Call:   termPrime(LOOKING AHEAD...)
                                                              Call:   mulop(LOOKING AHEAD...)
                                                                Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<MULT>>
                                                                Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<DIV>>
                                                                Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<MOD>>
                                                              Return: mulop(LOOKAHEAD FAILED)
                                                            Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                          Return: term(LOOKAHEAD SUCCEEDED)
                                                          Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                            Call:   addop(LOOKING AHEAD...)
                                                              Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<SUM>>
                                                            Return: addop(LOOKAHEAD SUCCEEDED)
                                                            Call:   term(LOOKING AHEAD...)
                                                              Call:   factor(LOOKING AHEAD...)
No. linea: 12 Numero entero: 1
                                                                Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <<BRACKETOPEN>>
                                                                Call:   call(LOOKING AHEAD...)
                                                                  Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <<ID>>
                                                                  Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <"output">
                                                                Return: call(LOOKAHEAD FAILED)
                                                                Call:   var(LOOKING AHEAD...)
                                                                  Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <<ID>>
                                                                Return: var(LOOKAHEAD FAILED)
                                                                Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <<NUMENT>>
                                                                Call:   var
                                                                  Consumed token: <<ID>: "i" at line 12 column 5>
                                                                  Call:   varPrime
                                                                  Return: varPrime
                                                                Return: var
                                                                Consumed token: <<EQUIVALENCE>: "=" at line 12 column 7>
                                                                Call:   expression
                                                                  Call:   var(LOOKING AHEAD...)
                                                                    Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <<ID>>
                                                                    Call:   varPrime(LOOKING AHEAD...)
                                                                      Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                  Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<EQUIVALENCE>>
                                                                  Call:   simpleExpression(LOOKING AHEAD...)
                                                                    Call:   additiveExpression(LOOKING AHEAD...)
                                                                      Call:   term(LOOKING AHEAD...)
                                                                        Call:   factor(LOOKING AHEAD...)
                                                                          Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <<BRACKETOPEN>>
                                                                          Call:   call(LOOKING AHEAD...)
                                                                            Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <<ID>>
                                                                            Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<BRACKETOPEN>>
                                                                            Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <"output">
                                                                          Return: call(LOOKAHEAD FAILED)
                                                                          Call:   var(LOOKING AHEAD...)
                                                                            Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <<ID>>
                                                                            Call:   varPrime(LOOKING AHEAD...)
                                                                              Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                        Return: factor(LOOKAHEAD SUCCEEDED)
                                                                        Call:   termPrime(LOOKING AHEAD...)
                                                                          Call:   mulop(LOOKING AHEAD...)
                                                                            Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<MULT>>
                                                                            Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<DIV>>
                                                                            Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<MOD>>
                                                                          Return: mulop(LOOKAHEAD FAILED)
                                                                        Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                      Return: term(LOOKAHEAD SUCCEEDED)
                                                                      Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                        Call:   addop(LOOKING AHEAD...)
                                                                          Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<SUM>>
                                                                        Return: addop(LOOKAHEAD SUCCEEDED)
                                                                        Call:   term(LOOKING AHEAD...)
                                                                          Call:   factor(LOOKING AHEAD...)
                                                                            Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <<BRACKETOPEN>>
                                                                            Call:   call(LOOKING AHEAD...)
                                                                              Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <<ID>>
                                                                              Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <"output">
                                                                            Return: call(LOOKAHEAD FAILED)
                                                                            Call:   var(LOOKING AHEAD...)
                                                                              Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <<ID>>
                                                                            Return: var(LOOKAHEAD FAILED)
                                                                            Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <<NUMENT>>
                                                                          Return: factor(LOOKAHEAD SUCCEEDED)
                                                                          Call:   termPrime(LOOKING AHEAD...)
                                                                            Call:   mulop(LOOKING AHEAD...)
No. linea: 12 Punto y Coma: ;
                                                                              Visited token: <<SEMICOLON>: ";" at line 12 column 16>; Expected token: <<MULT>>
                                                                              Visited token: <<SEMICOLON>: ";" at line 12 column 16>; Expected token: <<DIV>>
                                                                              Visited token: <<SEMICOLON>: ";" at line 12 column 16>; Expected token: <<MOD>>
                                                                            Return: mulop(LOOKAHEAD FAILED)
                                                                          Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                        Return: term(LOOKAHEAD SUCCEEDED)
                                                                        Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                          Call:   addop(LOOKING AHEAD...)
                                                                            Visited token: <<SEMICOLON>: ";" at line 12 column 16>; Expected token: <<SUM>>
                                                                            Visited token: <<SEMICOLON>: ";" at line 12 column 16>; Expected token: <<SUB>>
                                                                          Return: addop(LOOKAHEAD FAILED)
                                                                        Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                      Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                    Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                    Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                      Call:   relop(LOOKING AHEAD...)
                                                                        Visited token: <<SEMICOLON>: ";" at line 12 column 16>; Expected token: <"==">
                                                                        Visited token: <<SEMICOLON>: ";" at line 12 column 16>; Expected token: <"<=">
                                                                        Visited token: <<SEMICOLON>: ";" at line 12 column 16>; Expected token: <">=">
                                                                        Visited token: <<SEMICOLON>: ";" at line 12 column 16>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                        Visited token: <<SEMICOLON>: ";" at line 12 column 16>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                        Visited token: <<SEMICOLON>: ";" at line 12 column 16>; Expected token: <"!=">
                                                                      Return: relop(LOOKAHEAD FAILED)
                                                                    Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                  Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                  Call:   simpleExpression
                                                                    Call:   additiveExpression
                                                                      Call:   term
                                                                        Call:   factor
                                                                          Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <<BRACKETOPEN>>
                                                                          Call:   call(LOOKING AHEAD...)
                                                                            Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <<ID>>
                                                                            Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<BRACKETOPEN>>
                                                                            Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <"output">
                                                                          Return: call(LOOKAHEAD FAILED)
                                                                          Call:   var(LOOKING AHEAD...)
                                                                            Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <<ID>>
                                                                            Call:   varPrime(LOOKING AHEAD...)
                                                                              Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                          Call:   var
                                                                            Consumed token: <<ID>: "low" at line 12 column 9>
                                                                            Call:   varPrime
                                                                            Return: varPrime
                                                                          Return: var
                                                                        Return: factor
                                                                        Call:   termPrime
                                                                        Return: termPrime
                                                                      Return: term
                                                                      Call:   additiveExpressionPrime
                                                                        Call:   addop
                                                                          Consumed token: <<SUM>: "+" at line 12 column 13>
                                                                        Return: addop
                                                                        Call:   term
                                                                          Call:   factor
                                                                            Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <<BRACKETOPEN>>
                                                                            Call:   call(LOOKING AHEAD...)
                                                                              Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <<ID>>
                                                                              Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <"output">
                                                                            Return: call(LOOKAHEAD FAILED)
                                                                            Call:   var(LOOKING AHEAD...)
                                                                              Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <<ID>>
                                                                            Return: var(LOOKAHEAD FAILED)
                                                                            Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <<NUMENT>>
                                                                            Consumed token: <<NUMENT>: "1" at line 12 column 15>
                                                                          Return: factor
                                                                          Call:   termPrime
                                                                          Return: termPrime
                                                                        Return: term
                                                                        Call:   additiveExpressionPrime
                                                                        Return: additiveExpressionPrime
                                                                      Return: additiveExpressionPrime
                                                                    Return: additiveExpression
                                                                    Call:   simpleExpressionPrime
                                                                    Return: simpleExpressionPrime
                                                                  Return: simpleExpression
                                                                Return: expression
                                                              Return: expression
                                                              Consumed token: <<SEMICOLON>: ";" at line 12 column 16>
                                                            Return: expressionStmt
                                                          Return: statement
                                                          Call:   statementListPrime
No. linea: 14 Declaracion while: while
                                                            Call:   statement
                                                              Call:   iterationStmt
                                                                Consumed token: <"while" at line 14 column 5>
No. linea: 14 Parentesis incial: (
                                                                Consumed token: <<BRACKETOPEN>: "(" at line 14 column 11>
                                                                Call:   expression
                                                                  Call:   var(LOOKING AHEAD...)
No. linea: 14 Identificador: i
                                                                    Visited token: <<ID>: "i" at line 14 column 12>; Expected token: <<ID>>
                                                                    Call:   varPrime(LOOKING AHEAD...)
No. linea: 14 Operador menor que: <
                                                                      Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                  Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <<EQUIVALENCE>>
                                                                  Call:   simpleExpression(LOOKING AHEAD...)
                                                                    Call:   additiveExpression(LOOKING AHEAD...)
                                                                      Call:   term(LOOKING AHEAD...)
                                                                        Call:   factor(LOOKING AHEAD...)
                                                                          Visited token: <<ID>: "i" at line 14 column 12>; Expected token: <<BRACKETOPEN>>
                                                                          Call:   call(LOOKING AHEAD...)
                                                                            Visited token: <<ID>: "i" at line 14 column 12>; Expected token: <<ID>>
                                                                            Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <<BRACKETOPEN>>
                                                                            Visited token: <<ID>: "i" at line 14 column 12>; Expected token: <"output">
                                                                          Return: call(LOOKAHEAD FAILED)
                                                                          Call:   var(LOOKING AHEAD...)
                                                                            Visited token: <<ID>: "i" at line 14 column 12>; Expected token: <<ID>>
                                                                            Call:   varPrime(LOOKING AHEAD...)
                                                                              Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                        Return: factor(LOOKAHEAD SUCCEEDED)
                                                                        Call:   termPrime(LOOKING AHEAD...)
                                                                          Call:   mulop(LOOKING AHEAD...)
                                                                            Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <<MULT>>
                                                                            Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <<DIV>>
                                                                            Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <<MOD>>
                                                                          Return: mulop(LOOKAHEAD FAILED)
                                                                        Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                      Return: term(LOOKAHEAD SUCCEEDED)
                                                                      Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                        Call:   addop(LOOKING AHEAD...)
                                                                          Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <<SUM>>
                                                                          Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <<SUB>>
                                                                        Return: addop(LOOKAHEAD FAILED)
                                                                      Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                    Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                    Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                      Call:   relop(LOOKING AHEAD...)
                                                                        Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <"==">
                                                                        Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <"<=">
                                                                        Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <">=">
                                                                        Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                      Return: relop(LOOKAHEAD SUCCEEDED)
                                                                      Call:   additiveExpression(LOOKING AHEAD...)
                                                                        Call:   term(LOOKING AHEAD...)
                                                                          Call:   factor(LOOKING AHEAD...)
No. linea: 14 Identificador: high
                                                                            Visited token: <<ID>: "high" at line 14 column 16>; Expected token: <<BRACKETOPEN>>
                                                                            Call:   call(LOOKING AHEAD...)
                                                                              Visited token: <<ID>: "high" at line 14 column 16>; Expected token: <<ID>>
No. linea: 14 Parentesis final: )
                                                                              Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <<BRACKETOPEN>>
                                                                              Visited token: <<ID>: "high" at line 14 column 16>; Expected token: <"output">
                                                                            Return: call(LOOKAHEAD FAILED)
                                                                            Call:   var(LOOKING AHEAD...)
                                                                              Visited token: <<ID>: "high" at line 14 column 16>; Expected token: <<ID>>
                                                                              Call:   varPrime(LOOKING AHEAD...)
                                                                                Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                          Return: factor(LOOKAHEAD SUCCEEDED)
                                                                          Call:   termPrime(LOOKING AHEAD...)
                                                                            Call:   mulop(LOOKING AHEAD...)
                                                                              Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <<MULT>>
                                                                              Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <<DIV>>
                                                                              Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <<MOD>>
                                                                            Return: mulop(LOOKAHEAD FAILED)
                                                                          Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                        Return: term(LOOKAHEAD SUCCEEDED)
                                                                        Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                          Call:   addop(LOOKING AHEAD...)
                                                                            Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <<SUM>>
                                                                            Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <<SUB>>
                                                                          Return: addop(LOOKAHEAD FAILED)
                                                                        Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                      Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                      Call:   relop(LOOKING AHEAD...)
                                                                        Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <"==">
                                                                        Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <"<=">
                                                                        Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <">=">
                                                                        Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                        Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                        Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <"!=">
                                                                      Return: relop(LOOKAHEAD FAILED)
                                                                    Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                  Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                  Call:   simpleExpression
                                                                    Call:   additiveExpression
                                                                      Call:   term
                                                                        Call:   factor
                                                                          Visited token: <<ID>: "i" at line 14 column 12>; Expected token: <<BRACKETOPEN>>
                                                                          Call:   call(LOOKING AHEAD...)
                                                                            Visited token: <<ID>: "i" at line 14 column 12>; Expected token: <<ID>>
                                                                            Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <<BRACKETOPEN>>
                                                                            Visited token: <<ID>: "i" at line 14 column 12>; Expected token: <"output">
                                                                          Return: call(LOOKAHEAD FAILED)
                                                                          Call:   var(LOOKING AHEAD...)
                                                                            Visited token: <<ID>: "i" at line 14 column 12>; Expected token: <<ID>>
                                                                            Call:   varPrime(LOOKING AHEAD...)
                                                                              Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                          Call:   var
                                                                            Consumed token: <<ID>: "i" at line 14 column 12>
                                                                            Call:   varPrime
                                                                            Return: varPrime
                                                                          Return: var
                                                                        Return: factor
                                                                        Call:   termPrime
                                                                        Return: termPrime
                                                                      Return: term
                                                                      Call:   additiveExpressionPrime
                                                                      Return: additiveExpressionPrime
                                                                    Return: additiveExpression
                                                                    Call:   simpleExpressionPrime
                                                                      Call:   relop
                                                                        Consumed token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>
                                                                      Return: relop
                                                                      Call:   additiveExpression
                                                                        Call:   term
                                                                          Call:   factor
                                                                            Visited token: <<ID>: "high" at line 14 column 16>; Expected token: <<BRACKETOPEN>>
                                                                            Call:   call(LOOKING AHEAD...)
                                                                              Visited token: <<ID>: "high" at line 14 column 16>; Expected token: <<ID>>
                                                                              Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <<BRACKETOPEN>>
                                                                              Visited token: <<ID>: "high" at line 14 column 16>; Expected token: <"output">
                                                                            Return: call(LOOKAHEAD FAILED)
                                                                            Call:   var(LOOKING AHEAD...)
                                                                              Visited token: <<ID>: "high" at line 14 column 16>; Expected token: <<ID>>
                                                                              Call:   varPrime(LOOKING AHEAD...)
                                                                                Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                            Call:   var
                                                                              Consumed token: <<ID>: "high" at line 14 column 16>
                                                                              Call:   varPrime
                                                                              Return: varPrime
                                                                            Return: var
                                                                          Return: factor
                                                                          Call:   termPrime
                                                                          Return: termPrime
                                                                        Return: term
                                                                        Call:   additiveExpressionPrime
                                                                        Return: additiveExpressionPrime
                                                                      Return: additiveExpression
                                                                    Return: simpleExpressionPrime
                                                                  Return: simpleExpression
                                                                Return: expression
                                                                Consumed token: <<BRACKETCLOSE>: ")" at line 14 column 20>
                                                                Call:   statement
No. linea: 15 Llave incial: {
                                                                  Call:   compoundStmt
                                                                    Consumed token: <<CURLYBRACKETOPEN>: "{" at line 15 column 5>
                                                                    Call:   localDeclarations
                                                                      Call:   localDeclarationsPrime
No. linea: 16 Declaracion if: if
                                                                      Return: localDeclarationsPrime
                                                                    Return: localDeclarations
                                                                    Call:   statementList
                                                                      Call:   statementListPrime
                                                                        Call:   statement
                                                                          Call:   selectionStmt
                                                                            Consumed token: <"if" at line 16 column 9>
No. linea: 16 Parentesis incial: (
                                                                            Consumed token: <<BRACKETOPEN>: "(" at line 16 column 12>
                                                                            Call:   expression
                                                                              Call:   var(LOOKING AHEAD...)
No. linea: 16 Identificador: a
                                                                                Visited token: <<ID>: "a" at line 16 column 13>; Expected token: <<ID>>
                                                                                Call:   varPrime(LOOKING AHEAD...)
No. linea: 16 Corchete incial: [
                                                                                  Visited token: <<SQUAREBRACKETOPEN>: "[" at line 16 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                  Call:   expression(LOOKING AHEAD...)
                                                                                    Call:   var(LOOKING AHEAD...)
No. linea: 16 Identificador: i
                                                                                      Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<ID>>
                                                                                      Call:   varPrime(LOOKING AHEAD...)
No. linea: 16 Corchete final: ]
                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<EQUIVALENCE>>
                                                                                    Call:   simpleExpression(LOOKING AHEAD...)
                                                                                      Call:   additiveExpression(LOOKING AHEAD...)
                                                                                        Call:   term(LOOKING AHEAD...)
                                                                                          Call:   factor(LOOKING AHEAD...)
                                                                                            Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                            Call:   call(LOOKING AHEAD...)
                                                                                              Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<ID>>
                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                              Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <"output">
                                                                                            Return: call(LOOKAHEAD FAILED)
                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                              Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<ID>>
                                                                                              Call:   varPrime(LOOKING AHEAD...)
                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                                          Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                          Call:   termPrime(LOOKING AHEAD...)
                                                                                            Call:   mulop(LOOKING AHEAD...)
                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<MULT>>
                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<DIV>>
                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<MOD>>
                                                                                            Return: mulop(LOOKAHEAD FAILED)
                                                                                          Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                        Return: term(LOOKAHEAD SUCCEEDED)
                                                                                        Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                          Call:   addop(LOOKING AHEAD...)
                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SUM>>
                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SUB>>
                                                                                          Return: addop(LOOKAHEAD FAILED)
                                                                                        Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                      Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                      Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                        Call:   relop(LOOKING AHEAD...)
                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <"==">
                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <"<=">
                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <">=">
                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <"!=">
                                                                                        Return: relop(LOOKAHEAD FAILED)
                                                                                      Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                    Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                  Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SQUAREBRACKETCLOSE>>
No. linea: 16 Operador menor que: <
                                                                                  Visited token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                                              Visited token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>; Expected token: <<EQUIVALENCE>>
                                                                              Call:   simpleExpression(LOOKING AHEAD...)
                                                                                Call:   additiveExpression(LOOKING AHEAD...)
                                                                                  Call:   term(LOOKING AHEAD...)
                                                                                    Call:   factor(LOOKING AHEAD...)
                                                                                      Visited token: <<ID>: "a" at line 16 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                      Call:   call(LOOKING AHEAD...)
                                                                                        Visited token: <<ID>: "a" at line 16 column 13>; Expected token: <<ID>>
                                                                                        Visited token: <<SQUAREBRACKETOPEN>: "[" at line 16 column 14>; Expected token: <<BRACKETOPEN>>
                                                                                        Visited token: <<ID>: "a" at line 16 column 13>; Expected token: <"output">
                                                                                      Return: call(LOOKAHEAD FAILED)
                                                                                      Call:   var(LOOKING AHEAD...)
                                                                                        Visited token: <<ID>: "a" at line 16 column 13>; Expected token: <<ID>>
                                                                                        Call:   varPrime(LOOKING AHEAD...)
                                                                                          Visited token: <<SQUAREBRACKETOPEN>: "[" at line 16 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                          Call:   expression(LOOKING AHEAD...)
                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                              Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<ID>>
                                                                                              Call:   varPrime(LOOKING AHEAD...)
                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<EQUIVALENCE>>
                                                                                            Call:   simpleExpression(LOOKING AHEAD...)
                                                                                              Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                Call:   term(LOOKING AHEAD...)
                                                                                                  Call:   factor(LOOKING AHEAD...)
                                                                                                    Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                    Call:   call(LOOKING AHEAD...)
                                                                                                      Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<ID>>
                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                      Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <"output">
                                                                                                    Return: call(LOOKAHEAD FAILED)
                                                                                                    Call:   var(LOOKING AHEAD...)
                                                                                                      Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<ID>>
                                                                                                      Call:   varPrime(LOOKING AHEAD...)
                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                  Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                  Call:   termPrime(LOOKING AHEAD...)
                                                                                                    Call:   mulop(LOOKING AHEAD...)
                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<MULT>>
                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<DIV>>
                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<MOD>>
                                                                                                    Return: mulop(LOOKAHEAD FAILED)
                                                                                                  Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                  Call:   addop(LOOKING AHEAD...)
                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SUM>>
                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SUB>>
                                                                                                  Return: addop(LOOKAHEAD FAILED)
                                                                                                Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                              Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                              Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                Call:   relop(LOOKING AHEAD...)
                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <"==">
                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <"<=">
                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <">=">
                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <"!=">
                                                                                                Return: relop(LOOKAHEAD FAILED)
                                                                                              Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                            Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                          Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SQUAREBRACKETCLOSE>>
                                                                                          Visited token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                                                    Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                    Call:   termPrime(LOOKING AHEAD...)
                                                                                      Call:   mulop(LOOKING AHEAD...)
                                                                                        Visited token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>; Expected token: <<MULT>>
                                                                                        Visited token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>; Expected token: <<DIV>>
                                                                                        Visited token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>; Expected token: <<MOD>>
                                                                                      Return: mulop(LOOKAHEAD FAILED)
                                                                                    Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                  Return: term(LOOKAHEAD SUCCEEDED)
                                                                                  Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                    Call:   addop(LOOKING AHEAD...)
                                                                                      Visited token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>; Expected token: <<SUM>>
                                                                                      Visited token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>; Expected token: <<SUB>>
                                                                                    Return: addop(LOOKAHEAD FAILED)
                                                                                  Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                  Call:   relop(LOOKING AHEAD...)
                                                                                    Visited token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>; Expected token: <"==">
                                                                                    Visited token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>; Expected token: <"<=">
                                                                                    Visited token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>; Expected token: <">=">
                                                                                    Visited token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                    Call:   simpleExpression
                                                                                      Call:   additiveExpression
                                                                                        Call:   term
                                                                                          Call:   factor
                                                                                            Visited token: <<ID>: "a" at line 16 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                            Call:   call(LOOKING AHEAD...)
                                                                                              Visited token: <<ID>: "a" at line 16 column 13>; Expected token: <<ID>>
                                                                                              Visited token: <<SQUAREBRACKETOPEN>: "[" at line 16 column 14>; Expected token: <<BRACKETOPEN>>
                                                                                              Visited token: <<ID>: "a" at line 16 column 13>; Expected token: <"output">
                                                                                            Return: call(LOOKAHEAD FAILED)
                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                              Visited token: <<ID>: "a" at line 16 column 13>; Expected token: <<ID>>
                                                                                              Call:   varPrime(LOOKING AHEAD...)
                                                                                                Visited token: <<SQUAREBRACKETOPEN>: "[" at line 16 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                Call:   var
                                                                                                  Consumed token: <<ID>: "a" at line 16 column 13>
                                                                                                  Call:   varPrime
                                                                                                    Consumed token: <<SQUAREBRACKETOPEN>: "[" at line 16 column 14>
                                                                                                    Call:   expression
                                                                                                      Call:   var(LOOKING AHEAD...)
                                                                                                        Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<ID>>
                                                                                                        Call:   varPrime(LOOKING AHEAD...)
                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<EQUIVALENCE>>
                                                                                                      Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                        Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                          Call:   term(LOOKING AHEAD...)
                                                                                                            Call:   factor(LOOKING AHEAD...)
                                                                                                              Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                              Call:   call(LOOKING AHEAD...)
                                                                                                                Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<ID>>
                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <"output">
                                                                                                              Return: call(LOOKAHEAD FAILED)
                                                                                                              Call:   var(LOOKING AHEAD...)
                                                                                                                Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<ID>>
                                                                                                                Call:   varPrime(LOOKING AHEAD...)
                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                            Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                            Call:   termPrime(LOOKING AHEAD...)
                                                                                                              Call:   mulop(LOOKING AHEAD...)
                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<MULT>>
                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<DIV>>
                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<MOD>>
                                                                                                              Return: mulop(LOOKAHEAD FAILED)
                                                                                                            Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                          Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                          Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                            Call:   addop(LOOKING AHEAD...)
                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SUM>>
                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SUB>>
                                                                                                            Return: addop(LOOKAHEAD FAILED)
                                                                                                          Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                        Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                        Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                          Call:   relop(LOOKING AHEAD...)
                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <"==">
                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <"<=">
                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <">=">
                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <"!=">
                                                                                                          Return: relop(LOOKAHEAD FAILED)
                                                                                                        Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                      Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                      Call:   simpleExpression
                                                                                                        Call:   additiveExpression
                                                                                                          Call:   term
                                                                                                            Call:   factor
                                                                                                              Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                              Call:   call(LOOKING AHEAD...)
                                                                                                                Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<ID>>
                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <"output">
                                                                                                              Return: call(LOOKAHEAD FAILED)
                                                                                                              Call:   var(LOOKING AHEAD...)
                                                                                                                Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<ID>>
                                                                                                                Call:   varPrime(LOOKING AHEAD...)
                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                              Call:   var
                                                                                                                Consumed token: <<ID>: "i" at line 16 column 15>
                                                                                                                Call:   varPrime
                                                                                                                Return: varPrime
                                                                                                              Return: var
                                                                                                            Return: factor
                                                                                                            Call:   termPrime
                                                                                                            Return: termPrime
                                                                                                          Return: term
                                                                                                          Call:   additiveExpressionPrime
                                                                                                          Return: additiveExpressionPrime
                                                                                                        Return: additiveExpression
                                                                                                        Call:   simpleExpressionPrime
                                                                                                        Return: simpleExpressionPrime
                                                                                                      Return: simpleExpression
                                                                                                    Return: expression
                                                                                                    Consumed token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>
                                                                                                  Return: varPrime
                                                                                                Return: var
                                                                                              Return: factor
                                                                                              Call:   termPrime
                                                                                              Return: termPrime
                                                                                            Return: term
                                                                                            Call:   additiveExpressionPrime
                                                                                            Return: additiveExpressionPrime
                                                                                          Return: additiveExpression
                                                                                          Call:   simpleExpressionPrime
                                                                                            Call:   relop
                                                                                              Consumed token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>
                                                                                            Return: relop
                                                                                            Call:   additiveExpression
                                                                                              Call:   term
                                                                                                Call:   factor
No. linea: 16 Identificador: x
                                                                                                  Visited token: <<ID>: "x" at line 16 column 20>; Expected token: <<BRACKETOPEN>>
                                                                                                  Call:   call(LOOKING AHEAD...)
                                                                                                    Visited token: <<ID>: "x" at line 16 column 20>; Expected token: <<ID>>
No. linea: 16 Parentesis final: )
                                                                                                    Visited token: <<BRACKETCLOSE>: ")" at line 16 column 21>; Expected token: <<BRACKETOPEN>>
                                                                                                    Visited token: <<ID>: "x" at line 16 column 20>; Expected token: <"output">
                                                                                                  Return: call(LOOKAHEAD FAILED)
                                                                                                  Call:   var(LOOKING AHEAD...)
                                                                                                    Visited token: <<ID>: "x" at line 16 column 20>; Expected token: <<ID>>
                                                                                                    Call:   varPrime(LOOKING AHEAD...)
                                                                                                      Visited token: <<BRACKETCLOSE>: ")" at line 16 column 21>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                  Call:   var
                                                                                                    Consumed token: <<ID>: "x" at line 16 column 20>
                                                                                                    Call:   varPrime
                                                                                                    Return: varPrime
                                                                                                  Return: var
                                                                                                Return: factor
                                                                                                Call:   termPrime
                                                                                                Return: termPrime
                                                                                              Return: term
                                                                                              Call:   additiveExpressionPrime
                                                                                              Return: additiveExpressionPrime
                                                                                            Return: additiveExpression
                                                                                          Return: simpleExpressionPrime
                                                                                        Return: simpleExpression
                                                                                      Return: expression
                                                                                      Consumed token: <<BRACKETCLOSE>: ")" at line 16 column 21>
                                                                                      Call:   statement
No. linea: 18 Identificador: x
                                                                                        Call:   expressionStmt
                                                                                          Call:   expression
                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                              Visited token: <<ID>: "x" at line 18 column 13>; Expected token: <<ID>>
                                                                                              Call:   varPrime(LOOKING AHEAD...)
No. linea: 18 Operador igual: =
                                                                                                Visited token: <<EQUIVALENCE>: "=" at line 18 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                                            Visited token: <<EQUIVALENCE>: "=" at line 18 column 14>; Expected token: <<EQUIVALENCE>>
                                                                                            Call:   expression(LOOKING AHEAD...)
                                                                                              Call:   var(LOOKING AHEAD...)
No. linea: 18 Identificador: a
                                                                                                Visited token: <<ID>: "a" at line 18 column 15>; Expected token: <<ID>>
                                                                                                Call:   varPrime(LOOKING AHEAD...)
No. linea: 18 Corchete incial: [
                                                                                                  Visited token: <<SQUAREBRACKETOPEN>: "[" at line 18 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                  Call:   expression(LOOKING AHEAD...)
                                                                                                    Call:   var(LOOKING AHEAD...)
No. linea: 18 Identificador: i
                                                                                                      Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<ID>>
                                                                                                      Call:   var
                                                                                                        Consumed token: <<ID>: "x" at line 18 column 13>
                                                                                                        Call:   varPrime
                                                                                                        Return: varPrime
                                                                                                      Return: var
                                                                                                      Consumed token: <<EQUIVALENCE>: "=" at line 18 column 14>
                                                                                                      Call:   expression
                                                                                                        Call:   var(LOOKING AHEAD...)
                                                                                                          Visited token: <<ID>: "a" at line 18 column 15>; Expected token: <<ID>>
                                                                                                          Call:   varPrime(LOOKING AHEAD...)
                                                                                                            Visited token: <<SQUAREBRACKETOPEN>: "[" at line 18 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                            Call:   expression(LOOKING AHEAD...)
                                                                                                              Call:   var(LOOKING AHEAD...)
                                                                                                                Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<ID>>
                                                                                                                Call:   varPrime(LOOKING AHEAD...)
No. linea: 18 Corchete final: ]
                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<EQUIVALENCE>>
                                                                                                              Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                  Call:   term(LOOKING AHEAD...)
                                                                                                                    Call:   factor(LOOKING AHEAD...)
                                                                                                                      Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                      Call:   call(LOOKING AHEAD...)
                                                                                                                        Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<ID>>
                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<BRACKETOPEN>>
                                                                                                                        Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <"output">
                                                                                                                      Return: call(LOOKAHEAD FAILED)
                                                                                                                      Call:   var(LOOKING AHEAD...)
                                                                                                                        Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<ID>>
                                                                                                                        Call:   varPrime(LOOKING AHEAD...)
                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                    Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                    Call:   termPrime(LOOKING AHEAD...)
                                                                                                                      Call:   mulop(LOOKING AHEAD...)
                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<MULT>>
                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<DIV>>
                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<MOD>>
                                                                                                                      Return: mulop(LOOKAHEAD FAILED)
                                                                                                                    Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                  Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                  Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                    Call:   addop(LOOKING AHEAD...)
                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SUM>>
                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SUB>>
                                                                                                                    Return: addop(LOOKAHEAD FAILED)
                                                                                                                  Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                  Call:   relop(LOOKING AHEAD...)
                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <"==">
                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <"<=">
                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <">=">
                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <"!=">
                                                                                                                  Return: relop(LOOKAHEAD FAILED)
                                                                                                                Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                              Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                            Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SQUAREBRACKETCLOSE>>
No. linea: 18 Punto y Coma: ;
                                                                                                            Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                          Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                        Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                        Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <<EQUIVALENCE>>
                                                                                                        Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                          Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                            Call:   term(LOOKING AHEAD...)
                                                                                                              Call:   factor(LOOKING AHEAD...)
                                                                                                                Visited token: <<ID>: "a" at line 18 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                Call:   call(LOOKING AHEAD...)
                                                                                                                  Visited token: <<ID>: "a" at line 18 column 15>; Expected token: <<ID>>
                                                                                                                  Visited token: <<SQUAREBRACKETOPEN>: "[" at line 18 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                  Visited token: <<ID>: "a" at line 18 column 15>; Expected token: <"output">
                                                                                                                Return: call(LOOKAHEAD FAILED)
                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                  Visited token: <<ID>: "a" at line 18 column 15>; Expected token: <<ID>>
                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
                                                                                                                    Visited token: <<SQUAREBRACKETOPEN>: "[" at line 18 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                    Call:   expression(LOOKING AHEAD...)
                                                                                                                      Call:   var(LOOKING AHEAD...)
                                                                                                                        Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<ID>>
                                                                                                                        Call:   varPrime(LOOKING AHEAD...)
                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<EQUIVALENCE>>
                                                                                                                      Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                        Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                          Call:   term(LOOKING AHEAD...)
                                                                                                                            Call:   factor(LOOKING AHEAD...)
                                                                                                                              Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                              Call:   call(LOOKING AHEAD...)
                                                                                                                                Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<ID>>
                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<BRACKETOPEN>>
                                                                                                                                Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <"output">
                                                                                                                              Return: call(LOOKAHEAD FAILED)
                                                                                                                              Call:   var(LOOKING AHEAD...)
                                                                                                                                Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<ID>>
                                                                                                                                Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                            Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                            Call:   termPrime(LOOKING AHEAD...)
                                                                                                                              Call:   mulop(LOOKING AHEAD...)
                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<MULT>>
                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<DIV>>
                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<MOD>>
                                                                                                                              Return: mulop(LOOKAHEAD FAILED)
                                                                                                                            Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                          Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                          Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                            Call:   addop(LOOKING AHEAD...)
                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SUM>>
                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SUB>>
                                                                                                                            Return: addop(LOOKAHEAD FAILED)
                                                                                                                          Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                        Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                        Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                          Call:   relop(LOOKING AHEAD...)
                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <"==">
                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <"<=">
                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <">=">
                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <"!=">
                                                                                                                          Return: relop(LOOKAHEAD FAILED)
                                                                                                                        Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                      Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                    Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SQUAREBRACKETCLOSE>>
                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                              Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                              Call:   termPrime(LOOKING AHEAD...)
                                                                                                                Call:   mulop(LOOKING AHEAD...)
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <<MULT>>
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <<DIV>>
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <<MOD>>
                                                                                                                Return: mulop(LOOKAHEAD FAILED)
                                                                                                              Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                            Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                            Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                              Call:   addop(LOOKING AHEAD...)
                                                                                                                Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <<SUM>>
                                                                                                                Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <<SUB>>
                                                                                                              Return: addop(LOOKAHEAD FAILED)
                                                                                                            Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                          Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                          Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                            Call:   relop(LOOKING AHEAD...)
                                                                                                              Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <"==">
                                                                                                              Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <"<=">
                                                                                                              Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <">=">
                                                                                                              Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                              Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                              Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <"!=">
                                                                                                            Return: relop(LOOKAHEAD FAILED)
                                                                                                          Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                        Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                        Call:   simpleExpression
                                                                                                          Call:   additiveExpression
                                                                                                            Call:   term
                                                                                                              Call:   factor
                                                                                                                Visited token: <<ID>: "a" at line 18 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                Call:   call(LOOKING AHEAD...)
                                                                                                                  Visited token: <<ID>: "a" at line 18 column 15>; Expected token: <<ID>>
                                                                                                                  Visited token: <<SQUAREBRACKETOPEN>: "[" at line 18 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                  Visited token: <<ID>: "a" at line 18 column 15>; Expected token: <"output">
                                                                                                                Return: call(LOOKAHEAD FAILED)
                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                  Visited token: <<ID>: "a" at line 18 column 15>; Expected token: <<ID>>
                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
                                                                                                                    Visited token: <<SQUAREBRACKETOPEN>: "[" at line 18 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                    Call:   var
                                                                                                                      Consumed token: <<ID>: "a" at line 18 column 15>
                                                                                                                      Call:   varPrime
                                                                                                                        Consumed token: <<SQUAREBRACKETOPEN>: "[" at line 18 column 16>
                                                                                                                        Call:   expression
                                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                                            Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<ID>>
                                                                                                                            Call:   varPrime(LOOKING AHEAD...)
                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<EQUIVALENCE>>
                                                                                                                          Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                            Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                              Call:   term(LOOKING AHEAD...)
                                                                                                                                Call:   factor(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                  Call:   call(LOOKING AHEAD...)
                                                                                                                                    Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<ID>>
                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<BRACKETOPEN>>
                                                                                                                                    Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <"output">
                                                                                                                                  Return: call(LOOKAHEAD FAILED)
                                                                                                                                  Call:   var(LOOKING AHEAD...)
                                                                                                                                    Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<ID>>
                                                                                                                                    Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                  Call:   mulop(LOOKING AHEAD...)
                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<MULT>>
                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<DIV>>
                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<MOD>>
                                                                                                                                  Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                              Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                              Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                Call:   addop(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SUM>>
                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SUB>>
                                                                                                                                Return: addop(LOOKAHEAD FAILED)
                                                                                                                              Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                            Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                            Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                              Call:   relop(LOOKING AHEAD...)
                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <"==">
                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <"<=">
                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <">=">
                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <"!=">
                                                                                                                              Return: relop(LOOKAHEAD FAILED)
                                                                                                                            Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                          Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                          Call:   simpleExpression
                                                                                                                            Call:   additiveExpression
                                                                                                                              Call:   term
                                                                                                                                Call:   factor
                                                                                                                                  Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                  Call:   call(LOOKING AHEAD...)
                                                                                                                                    Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<ID>>
                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<BRACKETOPEN>>
                                                                                                                                    Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <"output">
                                                                                                                                  Return: call(LOOKAHEAD FAILED)
                                                                                                                                  Call:   var(LOOKING AHEAD...)
                                                                                                                                    Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<ID>>
                                                                                                                                    Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                  Call:   var
                                                                                                                                    Consumed token: <<ID>: "i" at line 18 column 17>
                                                                                                                                    Call:   varPrime
                                                                                                                                    Return: varPrime
                                                                                                                                  Return: var
                                                                                                                                Return: factor
                                                                                                                                Call:   termPrime
                                                                                                                                Return: termPrime
                                                                                                                              Return: term
                                                                                                                              Call:   additiveExpressionPrime
                                                                                                                              Return: additiveExpressionPrime
                                                                                                                            Return: additiveExpression
                                                                                                                            Call:   simpleExpressionPrime
                                                                                                                            Return: simpleExpressionPrime
                                                                                                                          Return: simpleExpression
                                                                                                                        Return: expression
                                                                                                                        Consumed token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>
                                                                                                                      Return: varPrime
                                                                                                                    Return: var
                                                                                                                  Return: factor
                                                                                                                  Call:   termPrime
                                                                                                                  Return: termPrime
                                                                                                                Return: term
                                                                                                                Call:   additiveExpressionPrime
                                                                                                                Return: additiveExpressionPrime
                                                                                                              Return: additiveExpression
                                                                                                              Call:   simpleExpressionPrime
                                                                                                              Return: simpleExpressionPrime
                                                                                                            Return: simpleExpression
                                                                                                          Return: expression
                                                                                                        Return: expression
                                                                                                        Consumed token: <<SEMICOLON>: ";" at line 18 column 19>
                                                                                                      Return: expressionStmt
                                                                                                    Return: statement
                                                                                                    Call:   selectionStmtPrime
No. linea: 19 Identificador: k
                                                                                                    Return: selectionStmtPrime
                                                                                                  Return: selectionStmt
                                                                                                Return: statement
                                                                                                Call:   statementListPrime
                                                                                                  Call:   statement
                                                                                                    Call:   expressionStmt
                                                                                                      Call:   expression
                                                                                                        Call:   var(LOOKING AHEAD...)
                                                                                                          Visited token: <<ID>: "k" at line 19 column 13>; Expected token: <<ID>>
                                                                                                          Call:   varPrime(LOOKING AHEAD...)
No. linea: 19 Operador igual: =
                                                                                                            Visited token: <<EQUIVALENCE>: "=" at line 19 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                          Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                        Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                        Visited token: <<EQUIVALENCE>: "=" at line 19 column 15>; Expected token: <<EQUIVALENCE>>
                                                                                                        Call:   expression(LOOKING AHEAD...)
                                                                                                          Call:   var(LOOKING AHEAD...)
No. linea: 19 Identificador: i
                                                                                                            Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <<ID>>
                                                                                                            Call:   varPrime(LOOKING AHEAD...)
No. linea: 19 Punto y Coma: ;
                                                                                                              Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                          Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<EQUIVALENCE>>
                                                                                                          Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                            Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                              Call:   term(LOOKING AHEAD...)
                                                                                                                Call:   factor(LOOKING AHEAD...)
                                                                                                                  Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                  Call:   call(LOOKING AHEAD...)
                                                                                                                    Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <<ID>>
                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<BRACKETOPEN>>
                                                                                                                    Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <"output">
                                                                                                                  Return: call(LOOKAHEAD FAILED)
                                                                                                                  Call:   var(LOOKING AHEAD...)
                                                                                                                    Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <<ID>>
                                                                                                                    Call:   varPrime(LOOKING AHEAD...)
                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                Call:   termPrime(LOOKING AHEAD...)
                                                                                                                  Call:   mulop(LOOKING AHEAD...)
                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<MULT>>
                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<DIV>>
                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<MOD>>
                                                                                                                  Return: mulop(LOOKAHEAD FAILED)
                                                                                                                Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                              Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                              Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                Call:   addop(LOOKING AHEAD...)
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<SUM>>
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<SUB>>
                                                                                                                Return: addop(LOOKAHEAD FAILED)
                                                                                                              Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                            Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                            Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                              Call:   relop(LOOKING AHEAD...)
                                                                                                                Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <"==">
                                                                                                                Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <"<=">
                                                                                                                Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <">=">
                                                                                                                Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <"!=">
                                                                                                              Return: relop(LOOKAHEAD FAILED)
                                                                                                            Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                          Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                        Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                                        Call:   var
                                                                                                          Consumed token: <<ID>: "k" at line 19 column 13>
                                                                                                          Call:   varPrime
                                                                                                          Return: varPrime
                                                                                                        Return: var
                                                                                                        Consumed token: <<EQUIVALENCE>: "=" at line 19 column 15>
                                                                                                        Call:   expression
                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                            Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <<ID>>
                                                                                                            Call:   varPrime(LOOKING AHEAD...)
                                                                                                              Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                          Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<EQUIVALENCE>>
                                                                                                          Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                            Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                              Call:   term(LOOKING AHEAD...)
                                                                                                                Call:   factor(LOOKING AHEAD...)
                                                                                                                  Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                  Call:   call(LOOKING AHEAD...)
                                                                                                                    Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <<ID>>
                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<BRACKETOPEN>>
                                                                                                                    Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <"output">
                                                                                                                  Return: call(LOOKAHEAD FAILED)
                                                                                                                  Call:   var(LOOKING AHEAD...)
                                                                                                                    Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <<ID>>
                                                                                                                    Call:   varPrime(LOOKING AHEAD...)
                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                Call:   termPrime(LOOKING AHEAD...)
                                                                                                                  Call:   mulop(LOOKING AHEAD...)
                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<MULT>>
                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<DIV>>
                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<MOD>>
                                                                                                                  Return: mulop(LOOKAHEAD FAILED)
                                                                                                                Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                              Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                              Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                Call:   addop(LOOKING AHEAD...)
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<SUM>>
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<SUB>>
                                                                                                                Return: addop(LOOKAHEAD FAILED)
                                                                                                              Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                            Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                            Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                              Call:   relop(LOOKING AHEAD...)
                                                                                                                Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <"==">
                                                                                                                Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <"<=">
                                                                                                                Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <">=">
                                                                                                                Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <"!=">
                                                                                                              Return: relop(LOOKAHEAD FAILED)
                                                                                                            Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                          Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                          Call:   simpleExpression
                                                                                                            Call:   additiveExpression
                                                                                                              Call:   term
                                                                                                                Call:   factor
                                                                                                                  Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                  Call:   call(LOOKING AHEAD...)
                                                                                                                    Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <<ID>>
                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<BRACKETOPEN>>
                                                                                                                    Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <"output">
                                                                                                                  Return: call(LOOKAHEAD FAILED)
                                                                                                                  Call:   var(LOOKING AHEAD...)
                                                                                                                    Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <<ID>>
                                                                                                                    Call:   varPrime(LOOKING AHEAD...)
                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                  Call:   var
                                                                                                                    Consumed token: <<ID>: "i" at line 19 column 17>
                                                                                                                    Call:   varPrime
                                                                                                                    Return: varPrime
                                                                                                                  Return: var
                                                                                                                Return: factor
                                                                                                                Call:   termPrime
                                                                                                                Return: termPrime
                                                                                                              Return: term
                                                                                                              Call:   additiveExpressionPrime
                                                                                                              Return: additiveExpressionPrime
                                                                                                            Return: additiveExpression
                                                                                                            Call:   simpleExpressionPrime
                                                                                                            Return: simpleExpressionPrime
                                                                                                          Return: simpleExpression
                                                                                                        Return: expression
                                                                                                      Return: expression
                                                                                                      Consumed token: <<SEMICOLON>: ";" at line 19 column 18>
                                                                                                    Return: expressionStmt
                                                                                                  Return: statement
                                                                                                  Call:   statementListPrime
No. linea: 20 Llave final: }
                                                                                                  Return: statementListPrime
                                                                                                Return: statementListPrime
                                                                                              Return: statementListPrime
                                                                                            Return: statementList
                                                                                            Consumed token: <<CURLYBRACKETCLOSE>: "}" at line 20 column 9>
                                                                                          Return: compoundStmt
                                                                                        Return: statement
                                                                                      Return: iterationStmt
                                                                                    Return: statement
                                                                                    Call:   statementListPrime
No. linea: 22 Identificador: i
                                                                                      Call:   statement
                                                                                        Call:   expressionStmt
                                                                                          Call:   expression
                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                              Visited token: <<ID>: "i" at line 22 column 9>; Expected token: <<ID>>
                                                                                              Call:   varPrime(LOOKING AHEAD...)
No. linea: 22 Operador igual: =
                                                                                                Visited token: <<EQUIVALENCE>: "=" at line 22 column 11>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                                            Visited token: <<EQUIVALENCE>: "=" at line 22 column 11>; Expected token: <<EQUIVALENCE>>
                                                                                            Call:   expression(LOOKING AHEAD...)
                                                                                              Call:   var(LOOKING AHEAD...)
No. linea: 22 Identificador: i
                                                                                                Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <<ID>>
                                                                                                Call:   varPrime(LOOKING AHEAD...)
No. linea: 22 Operador suma: +
                                                                                                  Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                                                              Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<EQUIVALENCE>>
                                                                                              Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                  Call:   term(LOOKING AHEAD...)
                                                                                                    Call:   factor(LOOKING AHEAD...)
                                                                                                      Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                      Call:   call(LOOKING AHEAD...)
                                                                                                        Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <<ID>>
                                                                                                        Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                        Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <"output">
                                                                                                      Return: call(LOOKAHEAD FAILED)
                                                                                                      Call:   var(LOOKING AHEAD...)
                                                                                                        Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <<ID>>
                                                                                                        Call:   varPrime(LOOKING AHEAD...)
                                                                                                          Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                    Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                    Call:   termPrime(LOOKING AHEAD...)
                                                                                                      Call:   mulop(LOOKING AHEAD...)
                                                                                                        Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<MULT>>
                                                                                                        Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<DIV>>
                                                                                                        Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<MOD>>
                                                                                                      Return: mulop(LOOKAHEAD FAILED)
                                                                                                    Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                  Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                  Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                    Call:   addop(LOOKING AHEAD...)
                                                                                                      Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<SUM>>
                                                                                                    Return: addop(LOOKAHEAD SUCCEEDED)
                                                                                                    Call:   term(LOOKING AHEAD...)
                                                                                                      Call:   factor(LOOKING AHEAD...)
No. linea: 22 Numero entero: 1
                                                                                                        Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                        Call:   call(LOOKING AHEAD...)
                                                                                                          Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <<ID>>
                                                                                                          Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <"output">
                                                                                                        Return: call(LOOKAHEAD FAILED)
                                                                                                        Call:   var(LOOKING AHEAD...)
                                                                                                          Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <<ID>>
                                                                                                        Return: var(LOOKAHEAD FAILED)
                                                                                                        Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <<NUMENT>>
                                                                                                        Call:   var
                                                                                                          Consumed token: <<ID>: "i" at line 22 column 9>
                                                                                                          Call:   varPrime
                                                                                                          Return: varPrime
                                                                                                        Return: var
                                                                                                        Consumed token: <<EQUIVALENCE>: "=" at line 22 column 11>
                                                                                                        Call:   expression
                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                            Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <<ID>>
                                                                                                            Call:   varPrime(LOOKING AHEAD...)
                                                                                                              Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                          Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<EQUIVALENCE>>
                                                                                                          Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                            Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                              Call:   term(LOOKING AHEAD...)
                                                                                                                Call:   factor(LOOKING AHEAD...)
                                                                                                                  Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                                  Call:   call(LOOKING AHEAD...)
                                                                                                                    Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <<ID>>
                                                                                                                    Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                    Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <"output">
                                                                                                                  Return: call(LOOKAHEAD FAILED)
                                                                                                                  Call:   var(LOOKING AHEAD...)
                                                                                                                    Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <<ID>>
                                                                                                                    Call:   varPrime(LOOKING AHEAD...)
                                                                                                                      Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                Call:   termPrime(LOOKING AHEAD...)
                                                                                                                  Call:   mulop(LOOKING AHEAD...)
                                                                                                                    Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<MULT>>
                                                                                                                    Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<DIV>>
                                                                                                                    Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<MOD>>
                                                                                                                  Return: mulop(LOOKAHEAD FAILED)
                                                                                                                Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                              Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                              Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                Call:   addop(LOOKING AHEAD...)
                                                                                                                  Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<SUM>>
                                                                                                                Return: addop(LOOKAHEAD SUCCEEDED)
                                                                                                                Call:   term(LOOKING AHEAD...)
                                                                                                                  Call:   factor(LOOKING AHEAD...)
                                                                                                                    Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                    Call:   call(LOOKING AHEAD...)
                                                                                                                      Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <<ID>>
                                                                                                                      Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <"output">
                                                                                                                    Return: call(LOOKAHEAD FAILED)
                                                                                                                    Call:   var(LOOKING AHEAD...)
                                                                                                                      Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <<ID>>
                                                                                                                    Return: var(LOOKAHEAD FAILED)
                                                                                                                    Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <<NUMENT>>
                                                                                                                  Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                  Call:   termPrime(LOOKING AHEAD...)
                                                                                                                    Call:   mulop(LOOKING AHEAD...)
No. linea: 22 Punto y Coma: ;
                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 22 column 18>; Expected token: <<MULT>>
                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 22 column 18>; Expected token: <<DIV>>
                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 22 column 18>; Expected token: <<MOD>>
                                                                                                                    Return: mulop(LOOKAHEAD FAILED)
                                                                                                                  Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                  Call:   addop(LOOKING AHEAD...)
                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 22 column 18>; Expected token: <<SUM>>
                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 22 column 18>; Expected token: <<SUB>>
                                                                                                                  Return: addop(LOOKAHEAD FAILED)
                                                                                                                Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                              Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                            Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                            Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                              Call:   relop(LOOKING AHEAD...)
                                                                                                                Visited token: <<SEMICOLON>: ";" at line 22 column 18>; Expected token: <"==">
                                                                                                                Visited token: <<SEMICOLON>: ";" at line 22 column 18>; Expected token: <"<=">
                                                                                                                Visited token: <<SEMICOLON>: ";" at line 22 column 18>; Expected token: <">=">
                                                                                                                Visited token: <<SEMICOLON>: ";" at line 22 column 18>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                Visited token: <<SEMICOLON>: ";" at line 22 column 18>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                Visited token: <<SEMICOLON>: ";" at line 22 column 18>; Expected token: <"!=">
                                                                                                              Return: relop(LOOKAHEAD FAILED)
                                                                                                            Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                          Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                          Call:   simpleExpression
                                                                                                            Call:   additiveExpression
                                                                                                              Call:   term
                                                                                                                Call:   factor
                                                                                                                  Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                                  Call:   call(LOOKING AHEAD...)
                                                                                                                    Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <<ID>>
                                                                                                                    Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                    Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <"output">
                                                                                                                  Return: call(LOOKAHEAD FAILED)
                                                                                                                  Call:   var(LOOKING AHEAD...)
                                                                                                                    Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <<ID>>
                                                                                                                    Call:   varPrime(LOOKING AHEAD...)
                                                                                                                      Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                  Call:   var
                                                                                                                    Consumed token: <<ID>: "i" at line 22 column 13>
                                                                                                                    Call:   varPrime
                                                                                                                    Return: varPrime
                                                                                                                  Return: var
                                                                                                                Return: factor
                                                                                                                Call:   termPrime
                                                                                                                Return: termPrime
                                                                                                              Return: term
                                                                                                              Call:   additiveExpressionPrime
                                                                                                                Call:   addop
                                                                                                                  Consumed token: <<SUM>: "+" at line 22 column 15>
                                                                                                                Return: addop
                                                                                                                Call:   term
                                                                                                                  Call:   factor
                                                                                                                    Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                    Call:   call(LOOKING AHEAD...)
                                                                                                                      Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <<ID>>
                                                                                                                      Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <"output">
                                                                                                                    Return: call(LOOKAHEAD FAILED)
                                                                                                                    Call:   var(LOOKING AHEAD...)
                                                                                                                      Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <<ID>>
                                                                                                                    Return: var(LOOKAHEAD FAILED)
                                                                                                                    Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <<NUMENT>>
                                                                                                                    Consumed token: <<NUMENT>: "1" at line 22 column 17>
                                                                                                                  Return: factor
                                                                                                                  Call:   termPrime
                                                                                                                  Return: termPrime
                                                                                                                Return: term
                                                                                                                Call:   additiveExpressionPrime
                                                                                                                Return: additiveExpressionPrime
                                                                                                              Return: additiveExpressionPrime
                                                                                                            Return: additiveExpression
                                                                                                            Call:   simpleExpressionPrime
                                                                                                            Return: simpleExpressionPrime
                                                                                                          Return: simpleExpression
                                                                                                        Return: expression
                                                                                                      Return: expression
                                                                                                      Consumed token: <<SEMICOLON>: ";" at line 22 column 18>
                                                                                                    Return: expressionStmt
                                                                                                  Return: statement
                                                                                                  Call:   statementListPrime
No. linea: 23 Llave final: }
                                                                                                  Return: statementListPrime
                                                                                                Return: statementListPrime
                                                                                              Return: statementListPrime
                                                                                            Return: statementListPrime
                                                                                          Return: statementListPrime
                                                                                        Return: statementListPrime
                                                                                      Return: statementList
                                                                                      Consumed token: <<CURLYBRACKETCLOSE>: "}" at line 23 column 5>
                                                                                    Return: compoundStmt
                                                                                  Return: funDeclaration
                                                                                Return: declaration
                                                                                Call:   declarationListPrime
No. linea: 25 Declaracion return: return
                                                                                Return: declarationListPrime
                                                                              Return: declarationListPrime
                                                                            Return: declarationList
                                                                          Return: program
                                                                        Return: sintactico
