PARSER_BEGIN (Lexico)
	public class Lexico {
		public static void main (String[] args) throws ParseException {
			Lexico anLex = new Lexico(System.in);
			anLex.analzar();
			System.out.println("\nAnalisis Lexico terminado!");
		}
	}
	PARSER_END (Lexico)


// Keywords

TOKEN:
	{
		< INT : "int" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion int: " + image );}
		|
		< FLOAT : "float" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion float: " + image );}
		|
		< CHAR : "char" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion char: " + image );}
		|
		< RETURN : "return" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion return: " + image );}
		|
		< VOID : "void" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion void: " + image );}
		|
		< IF : "if" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion if: " + image );}
		|
		< ELSE : "else" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion else: " + image );}
		|
		< WHILE : "while" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion while: " + image );}
		|
		< INPUT : "input" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Sentencia input: " + image );}
		|
		< OUTPUT : "output" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Sentencia output: " + image );}
	}

// operators

TOKEN:
	{
	    <	SUM : ["+"] >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador suma: " + image );}
	    |
	    <	SUB : ["-"] >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador resta: " + image );}
	    |
	    <	MULT : ["*"] >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador multiplicacion: " + image );}
	    |
	    <	DIV : ["/"] >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador division: " + image );}
	    |
		<	MOD : ["%"] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador modulo: " + image );}
		|
		<	BRACKETOPEN : ["("] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Parentesis incial: " + image );}
		|
		<	BRACKETCLOSE : [")"] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Parentesis final: " + image );}
		|
		<	SQUAREBRACKETOPEN : ["["] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Corchete incial: " + image );}
		|
		<	SQUAREBRACKETCLOSE : ["]"] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Corchete final: " + image );}
		|
		<	CURLYBRACKETOPEN : ["{"] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Llave incial: " + image );}
		|
		<	CURLYBRACKETCLOSE : ["}"] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Llave final: " + image );}
		|
		<	LESSEQUAL : "<=" >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador menor o igual: " + image );}
		|
		<	MOREEQUAL : ">=" >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador mayor o igual: " + image );}
		|
		<	EQUALS : "==" >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador igual igual: " + image );}
		|
		<	ANGLEBRACKETOPEN : ["<"] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador menor que: " + image );}
		|
		<	ANGLEBRACKETCLOSE : [">"] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador mayor que: " + image );}
		|
		<	EQUIVALENCE : ["="] >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador igual: " + image );}
		|
		<	SEMICOLON : [";"] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Punto y Coma: " + image );}
		|
		<	COMMA : [","] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Coma: " + image );}
	}

// Regular Expresions

TOKEN:
	{
		<ID: ["a"-"z", "A"-"Z"] ( ["a"-"z", "A"-"Z"] | ["0"-"9"] | ["_"] )* >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Identificador: " + image );}
		|
		<NUMENT: ["0"-"9"](["0"-"9"])*>
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Numero entero: " + image );}
		|
		<NUMREAL: ["0"-"9"](["0"-"9"])*["."]["0"-"9"](["0"-"9"])*>
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Numero real: " + image );}
		|
		<SIMPLECHAR: ["\'"](~["\'"])["\'"]>
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Caracter tipo Char: " + image );}
	}

SKIP:
	{
		<"/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/">
		|
		<["/"]["/"](~["\n"])*>
		|
		" " | "\t" | "\n" | "\r"
	}

SPECIAL_TOKEN: {
	// Muchos puntos decimales en el float
	<["0"-"9"](["0"-"9"])*["."](["."])*["0"-"9"](["0"-"9"])*>
		{System.out.println("(Error) Demasiados puntos en numero decimal en la linea:" + matchedToken.beginLine );}
	|
	// Falta la parte entera en el float
	<["."]["0"-"9"](["0"-"9"])*>
		{System.out.println( "(Error) Error de escritura en numero decimal en la linea:" + matchedToken.beginLine );}
	|
	// Falta la parte decimal en el float
	<["0"-"9"](["0"-"9"])*["."]>
		{System.out.println("(Error) Error de escritura en numero decimal en la linea:" + matchedToken.beginLine );}
	|
	// Identificador invalido
	<(["0"-"9"] | ["."]) ( ["a"-"z", "A"-"Z"] | ["0"-"9"] | ["_"] )* >
		{System.out.println("(Error) Identificador invalido en la linea:" + matchedToken.beginLine );}
	|
	// Token invalido
	<~[]> {System.out.println( "(Error) Token desconocido en la linea:" + matchedToken.beginLine );}
}

void analzar() : {}
	{
		(<INT> | <FLOAT> | <CHAR> | <RETURN> | <VOID>
		| <IF> | <ELSE> | <WHILE> | <INPUT> | <OUTPUT> |
		<SUM> | <SUB> | <MULT> | <DIV> | <LESSEQUAL> | <MOREEQUAL>
		|<EQUALS> | <MOD> | <BRACKETOPEN> | <BRACKETCLOSE> |
		<SQUAREBRACKETOPEN> | <SQUAREBRACKETCLOSE> | <CURLYBRACKETOPEN> |
		<CURLYBRACKETCLOSE>| <ANGLEBRACKETOPEN> | <ANGLEBRACKETCLOSE> |
		<EQUIVALENCE> | <SEMICOLON> | <COMMA> | <ID> | <NUMENT> |
		<NUMREAL> | <SIMPLECHAR>) + <EOF>
	}