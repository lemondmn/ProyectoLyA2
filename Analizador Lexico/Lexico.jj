PARSER_BEGIN (Lexico)
	public class Lexico {
		public static void main (String[] args) throws ParseException {
			Lexico anLex = new Lexico(System.in);
			anLex.analizar();
			System.out.println("\nAnalisis Lexico terminado!");
		}
	}
	PARSER_END (Lexico)


// Keywords

TOKEN:
	{
		< INT : "int" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion int: " + image );}
		|
		< FLOAT : "float" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion float: " + image );}
		|
		< CHAR : "char" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion char: " + image );}
		|
		< RETURN : "return" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion return: " + image );}
		|
		< VOID : "void" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion void: " + image );}
		|
		< IF : "if" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion if: " + image );}
		|
		< ELSE : "else" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion else: " + image );}
		|
		< WHILE : "while" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion while: " + image );}
		|
		< INPUT : "input" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Sentencia input: " + image );}
		|
		< OUTPUT : "output" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Sentencia output: " + image );}
	}

// operators

TOKEN:
	{
	    <	SUM : ["+"] >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador suma: " + image );}
	    |
	    <	SUB : ["-"] >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador resta: " + image );}
	    |
	    <	MULT : ["*"] >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador multiplicacion: " + image );}
	    |
	    <	DIV : ["/"] >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador division: " + image );}
	    |
		<	MOD : ["%"] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador modulo: " + image );}
		|
		<	BRACKETOPEN : ["("] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Parentesis incial: " + image );}
		|
		<	BRACKETCLOSE : [")"] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Parentesis final: " + image );}
		|
		<	SQUAREBRACKETOPEN : ["["] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Corchete incial: " + image );}
		|
		<	SQUAREBRACKETCLOSE : ["]"] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Corchete final: " + image );}
		|
		<	CURLYBRACKETOPEN : ["{"] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Llave incial: " + image );}
		|
		<	CURLYBRACKETCLOSE : ["}"] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Llave final: " + image );}
		|
		<	LESSEQUAL : "<=" >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador menor o igual: " + image );}
		|
		<	MOREEQUAL : ">=" >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador mayor o igual: " + image );}
		|
		<	EQUALS : "==" >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador igual igual: " + image );}
		|
		<	NOTEQUALS : "!=" >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador desigualdad: " + image );}
		|
		<	ANGLEBRACKETOPEN : ["<"] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador menor que: " + image );}
		|
		<	ANGLEBRACKETCLOSE : [">"] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador mayor que: " + image );}
		|
		<	EQUIVALENCE : ["="] >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador igual: " + image );}
		|
		<	SEMICOLON : [";"] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Punto y Coma: " + image );}
		|
		<	COMMA : [","] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Coma: " + image );}
	}

TOKEN: 
{
	<NUMCONTRO : (["M"]|["C"])?(["0"-"9"]{2})(["120"]|["121"])(["0"-"9"]{3})>
	{System.out.println( "No. linea: " + matchedToken.beginLine + " Numero de Control: " + image );}
}

// Regular Expresions

TOKEN:
	{
		<ID: ["a"-"z", "A"-"Z"] ( ["a"-"z", "A"-"Z"] | ["0"-"9"] | ["_"] )* >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Identificador: " + image );}
		|
		<NUMENT: ["0"-"9"](["0"-"9"])*>
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Numero entero: " + image );}
		|
		<NUMREAL: ["0"-"9"](["0"-"9"])*["."]["0"-"9"](["0"-"9"])*>
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Numero real: " + image );}
		|
		<SIMPLECHAR: ["\'"](~["\'"])["\'"]>
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Caracter tipo Char: " + image );}
	}

SKIP:
	{
		<"/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/">
		|
		<["/"]["/"](~["\n"])*>
		|
		" " | "\t" | "\n" | "\r"
	}

SPECIAL_TOKEN: {
	// Muchos puntos decimales en el float
	<["0"-"9"](["0"-"9"])*["."](["."])*["0"-"9"](["0"-"9"])*>
		{System.out.println("(Error) Demasiados puntos en numero decimal en la linea:" + matchedToken.beginLine );}
	|
	// Falta la parte entera en el float
	<["."]["0"-"9"](["0"-"9"])*>
		{System.out.println( "(Error) Error de escritura en numero decimal en la linea:" + matchedToken.beginLine );}
	|
	// Falta la parte decimal en el float
	<["0"-"9"](["0"-"9"])*["."]>
		{System.out.println("(Error) Error de escritura en numero decimal en la linea:" + matchedToken.beginLine );}
	|
	// Identificador invalido
	<(["0"-"9"] | ["."]) ( ["a"-"z", "A"-"Z"] | ["0"-"9"] | ["_"] )* >
		{System.out.println("(Error) Identificador invalido en la linea:" + matchedToken.beginLine );}
	|
	// Token invalido
	<~[]> {System.out.println( "(Error) Token desconocido en la linea:" + matchedToken.beginLine );}
}

void analizar() : {}
	{
		)

		(<INT> | <FLOAT> | <CHAR> | <RETURN> | <VOID>
		| <IF> | <ELSE> | <WHILE> | <INPUT> | <OUTPUT> |
		<SUM> | <SUB> | <MULT> | <DIV> | <LESSEQUAL> | <MOREEQUAL>
		|<EQUALS> | <MOD> | <BRACKETOPEN> | <BRACKETCLOSE> |
		<SQUAREBRACKETOPEN> | <SQUAREBRACKETCLOSE> | <CURLYBRACKETOPEN> |
		<CURLYBRACKETCLOSE>| <ANGLEBRACKETOPEN> | <ANGLEBRACKETCLOSE> |
		<EQUIVALENCE> | <SEMICOLON> | <COMMA> | <ID> | <NUMENT> |
		<NUMREAL> | <SIMPLECHAR>) + <EOF>
	}

// Analizador sintactico

void sintactico() : {}
{
	(program()) + <EOF>
}

// 1

void program() : {} 
{
	declarationList()
}

// 2

declarationList() : {}
{
	declaration() declarationListPrime()
}

declarationListPrime() : {}
{
	declaration() declarationListPrime() | {}
}

// 3

declaration() : {}
{
	varDeclaration() | funDeclaration()
}

// 4

varDeclaration() : {}
{
	typeSpecifier() <ID> varDeclarationPrime()
}

varDeclarationPrime() : {}
{
	<SEMICOLON> | <NUMENT> <SEMICOLON>
}

// 5

typeSpecifier() : {}
{
	<INT> | <FLOAT> | <CHAR> | <VOID>
}

// 6

funDeclaration() : {}
{
	typeSpecifier() <ID> <BRACKETOPEN> params() <BRACKETCLOSE> compoundStmt()
}

// 7

params() : {}
{
	paramList() | <VOID>
}


// 8

paramList() : {}
{
	param() paramListPrime()
}

paramListPrime() : {}
{
	<COMMA> param() paramListPrime() | {}
}

// 9

param() : {}
{
	typeSpecifier() <ID> paramPrime()
}

paramPrime() : {}
{
	<SQUAREBRACKETOPEN> <SQUAREBRACKETCLOSE> | {}
}

// 10

compoundStmt() : {}
{
	<CURLYBRACKETOPEN> localDeclarations() statementList() <CURLYBRACKETCLOSE>
}

// 11

localDeclarations() : {}
{
	varDeclaration() localDeclarations() {}
}

localDeclarationsPrime() : {}
{
	varDeclaration() localDeclarationsPrime() | {}
}

// 12

statementList() : {}
{
	{} statementListPrime()
}

statementListPrime() : {}
{
	statement() statementListPrime() | {}
}

// 13

statement() : {}
{
	expressionStmt() | compoundStmt() | selectionStmt() | iterationStmt() | returnStmt()
}

// 14

expressionStmt() : {}
{
	expression() <SEMICOLON> | <SEMICOLON>
}

// 15

selectionStmt() : {}
{
	<IF> <BRACKETOPEN> expression() <BRACKETCLOSE> statement() selectionStmtPrime()
}

selectionStmtPrime() : {}
{
	<ELSE> statement() | {}
}

// 16

iterationStmt() : {}
{
	<WHILE> <BRACKETOPEN> expression() <BRACKETCLOSE> statement()
}

// 17

returnStmt() : {}
{
	<RETURN> returnStmtPrime()
}

returnStmtPrime() : {}
{
	<SEMICOLON> | expression() <SEMICOLON>
}

// 18

expression() : {}
{
	var() <EQUIVALENCE> expression() | simpleExpression()
}

// 19

var() : {}
{
	<ID> varPrime()
}

varPrime() : {}
{
	<SQUAREBRACKETOPEN> expression() <SQUAREBRACKETCLOSE> | {}
}

// 20

simpleExpression() : {}
{
	additiveExpression() simpleExpressionPrime()
}

simpleExpressionPrime() : {}
{
	relop() additiveExpression() | {}
}

// 21

relop() : {}
{
	<EQUALS> | <LESSEQUAL> | <MOREEQUAL> | <ANGLEBRACKETOPEN> | <ANGLEBRACKETCLOSE> | <NOTEQUALS>
}

// 22

additiveExpression() : {}
{
	term() additiveExpressionPrime()
}

additiveExpressionPrime() : {}
{
	addop() term() additiveExpressionPrime() | {}
}

// 23

addop() : {}
{
	<SUM> | <SUB>
}

// 24

term() : {}
{
	factor() termPrime()
}

termPrime() : {}
{
	mulop() factor() termPrime() | {}
}

// 25

mulop() : {}
{
	<MULT> | <DIV> | <MOD>
}

// 26

factor() : {}
{
	<BRACKETOPEN> expression() <BRACKETCLOSE> | var() | call() | <NUMENT> | <NUMREAL> | <SIMPLECHAR>
}

// 27

call() : {}
{
	<ID> <BRACKETOPEN> args() <BRACKETCLOSE>
}

// 28

args() : {}
{
	argList() | {}
}

// 29

argList() : {}
{
	expression() argListPrime()
}

argListPrime() : {}
{
	<COMMA> expression() argListPrime() | {}
}
