options {
	Ignore_Case = false;
	STATIC=false;
	DEBUG_PARSER=true;
	DEBUG_LOOKAHEAD=true;
}

PARSER_BEGIN (Lexico)

	import java.util.*;

	public class Lexico {

		class DataObject {

			// variables

			String lexema;
			String tipoDato;
			String categoria;
			int size;

			// constructor

			public DataObject (String lexema, String tipoDato, String categoria, int size) {
				this.lexema = lexema;
				this.tipoDato = tipoDato;
				this.categoria = categoria;
				this.size = size;
			}

			// getters y setters

			public String getLexema() {
				return lexema;
			}

			public void setLexema(String lexema) {
				this.lexema = lexema;
			}

			public String getTipoDato() {
				return tipoDato;
			}

			public void setTipoDato(String tipoDato) {
				this.tipoDato = tipoDato;
			}

			public String getCategoria() {
				return categoria;
			}

			public void setCategoria(String categoria) {
				this.categoria = categoria;
			}

			public int getSize() {
				return size;
			}

			public void setSize(int size) {
				this.size = size;
			}

		}

		static HashMap<String, DataObject> map = new HashMap<String, DataObject>();

		// HashMap Functions

		static void search(String key)
		{
			if(map.containsKey(key))
			{
				DataObject d = map.get(key);
				System.out.println("Lexema: " + d.getLexema() + " Tipo Dato: " + d.getTipoDato() + " Categoria: " + d.getCategoria() + " tamano: " + d.getSize());
			}
			else
			{
				System.out.println("No Encontrado");
			}
		}

		static void insert(String key, DataObject d)
		{
			if(map.containsKey(key))
			{
				System.out.println("Lexema ya existe");
			}
			else
			{
				map.put(key, d);
			}
		}

		static DataObject getObject(String key)
		{
			if (map.containsKey(key))
			{
				DataObject d = map.get(key);
				return d;
			}
			else
			{
				return null;
			}
		}

		static void delete(String key)
		{
			if(map.containsKey(key))
			{
				map.remove(key);
			}
			else
			{
				System.out.println("No Encontrado");
			}
		}


		public static void main (String[] args) throws ParseException {
			Lexico anLex = new Lexico(System.in);
			//anLex.analizar();
			anLex.sintactico();

			System.out.println("Tabla hash: ");
			
			System.out.println("Lexema \t Tipo de dato \t Categoria \t Tamano");
			
			for (String key : map.keySet()) {
				System.out.println(map.get(key).getLexema() + "\t" + map.get(key).getTipoDato() + "\t" + map.get(key).getCategoria() + "\t" + map.get(key).getSize());
			}

			System.out.println("\nAnalisis terminado!");
		}

	}

	PARSER_END (Lexico)

// Keywords

TOKEN:
	{
		< INT : "int" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion int: " + image );}
		|
		< FLOAT : "float" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion float: " + image );}
		|
		< CHAR : "char" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion char: " + image );}
		|
		< RETURN : "return" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion return: " + image );}
		|
		< VOID : "void" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion void: " + image );}
		|
		< IF : "if" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion if: " + image );}
		|
		< ELSE : "else" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion else: " + image );}
		|
		< WHILE : "while" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion while: " + image );}
		|
		< INPUT : "input" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Sentencia input: " + image );}
		|
		< OUTPUT : "output" >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Sentencia output: " + image );}
	}

// operators

TOKEN:
	{
	    <	SUM : ["+"] >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador suma: " + image );}
	    |
	    <	SUB : ["-"] >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador resta: " + image );}
	    |
	    <	MULT : ["*"] >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador multiplicacion: " + image );}
	    |
	    <	DIV : ["/"] >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador division: " + image );}
	    |
		<	MOD : ["%"] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador modulo: " + image );}
		|
		<	BRACKETOPEN : ["("] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Parentesis incial: " + image );}
		|
		<	BRACKETCLOSE : [")"] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Parentesis final: " + image );}
		|
		<	SQUAREBRACKETOPEN : ["["] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Corchete incial: " + image );}
		|
		<	SQUAREBRACKETCLOSE : ["]"] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Corchete final: " + image );}
		|
		<	CURLYBRACKETOPEN : ["{"] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Llave incial: " + image );}
		|
		<	CURLYBRACKETCLOSE : ["}"] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Llave final: " + image );}
		|
		<	LESSEQUAL : "<=" >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador menor o igual: " + image );}
		|
		<	MOREEQUAL : ">=" >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador mayor o igual: " + image );}
		|
		<	EQUALS : "==" >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador igual igual: " + image );}
		|
		<	NOTEQUALS : "!=" >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador desigualdad: " + image );}
		|
		<	ANGLEBRACKETOPEN : ["<"] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador menor que: " + image );}
		|
		<	ANGLEBRACKETCLOSE : [">"] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador mayor que: " + image );}
		|
		<	EQUIVALENCE : ["="] >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador igual: " + image );}
		|
		<	SEMICOLON : [";"] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Punto y Coma: " + image );}
		|
		<	COMMA : [","] >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Coma: " + image );}
	}

// Regular Expresions

TOKEN:
	{
		<ID: ["a"-"z", "A"-"Z"] ( ["a"-"z", "A"-"Z"] | ["0"-"9"] | ["_"] )* >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Identificador: " + image );}
		|
		<NUMENT: ["0"-"9"](["0"-"9"])*>
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Numero entero: " + image );}
		|
		<NUMREAL: ["0"-"9"](["0"-"9"])*["."]["0"-"9"](["0"-"9"])*>
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Numero real: " + image );}
		|
		<SIMPLECHAR: ["\'"](~["\'"])["\'"]>
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Caracter tipo Char: " + image );}
	}

SKIP:
	{
		<"/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/">
		|
		<["/"]["/"](~["\n"])*>
		|
		" " | "\t" | "\n" | "\r"
	}

SPECIAL_TOKEN: {
	// Muchos puntos decimales en el float
	<["0"-"9"](["0"-"9"])*["."](["."])*["0"-"9"](["0"-"9"])*>
		{System.out.println("(Error) Demasiados puntos en numero decimal en la linea:" + matchedToken.beginLine );}
	|
	// Falta la parte entera en el float
	<["."]["0"-"9"](["0"-"9"])*>
		{System.out.println( "(Error) Error de escritura en numero decimal en la linea:" + matchedToken.beginLine );}
	|
	// Falta la parte decimal en el float
	<["0"-"9"](["0"-"9"])*["."]>
		{System.out.println("(Error) Error de escritura en numero decimal en la linea:" + matchedToken.beginLine );}
	|
	// Identificador invalido
	<(["0"-"9"] | ["."]) ( ["a"-"z", "A"-"Z"] | ["0"-"9"] | ["_"] )* >
		{System.out.println("(Error) Identificador invalido en la linea:" + matchedToken.beginLine );}
	|
	// Token invalido
	<~[]> {System.out.println( "(Error) Token desconocido en la linea:" + matchedToken.beginLine );}
}

/* 

void analizar() : {}
	{
		(<INT> | <FLOAT> | <CHAR> | <RETURN> | <VOID>
		| <IF> | <ELSE> | <WHILE> | <INPUT> | <OUTPUT> |
		<SUM> | <SUB> | <MULT> | <DIV> | <LESSEQUAL> | <MOREEQUAL>
		|<EQUALS> | <MOD> | <BRACKETOPEN> | <BRACKETCLOSE> |
		<SQUAREBRACKETOPEN> | <SQUAREBRACKETCLOSE> | <CURLYBRACKETOPEN> |
		<CURLYBRACKETCLOSE>| <ANGLEBRACKETOPEN> | <ANGLEBRACKETCLOSE> |
		<EQUIVALENCE> | <SEMICOLON> | <COMMA> | <ID> | <NUMENT> |
		<NUMREAL> | <SIMPLECHAR>) + <EOF>
	}

*/

// Analizador sintactico

void sintactico() : {}
{
	(program()) + <EOF>
}

// 1

void program() : {} 
{
	declarationList()
}

// 2

void declarationList() : {}
{
	declaration() declarationListPrime()
}

void declarationListPrime() : {}
{
	declaration() declarationListPrime() | {}
}

// 3

void declaration() : {}
{
	(LOOKAHEAD(3) varDeclaration() | LOOKAHEAD(3) funDeclaration())
}

// 4

void varDeclaration() : {}
{
	typeSpecifier() 
	<ID> 
	{
		DataObject d = new DataObject(token.image, "null", "variable", 0);
		insert(token.image, d);
	}
	 varDeclarationPrime()
}

void varDeclarationPrime() : {}
{
	LOOKAHEAD(2) <SEMICOLON> | LOOKAHEAD(2) <SQUAREBRACKETOPEN> var() <SQUAREBRACKETCLOSE> <SEMICOLON> 
	| LOOKAHEAD(2) <SQUAREBRACKETOPEN> <NUMENT> <SQUAREBRACKETCLOSE> <SEMICOLON>
	| LOOKAHEAD(2) 
	  (<COMMA><ID>

	  {
		DataObject d = new DataObject(token.image, "null", "variable", 0);
		insert(token.image, d);
	  }

	  )* <SEMICOLON>
}

// 5

void typeSpecifier() : {}
{
	(
		<INT> | <FLOAT> | <CHAR> | <VOID>
	)
}

// 6

void funDeclaration() : {}
{
	typeSpecifier() 
	<ID> 
	{
		DataObject d = new DataObject(token.image, "null", "funcion", 0);
		insert(token.image, d);
	} 
	<BRACKETOPEN> params() <BRACKETCLOSE> compoundStmt()
}

// 7

void params() : {}
{
	(LOOKAHEAD(2) paramList() | LOOKAHEAD(2) <VOID>)
}

// 8

void paramList() : {}
{
	param() paramListPrime()
}

void paramListPrime() : {}
{
	<COMMA> param() paramListPrime() |{}
}

// 9

void param() : {}
{
	typeSpecifier() <ID> paramPrime()
}

void paramPrime() : {}
{
	(<SQUAREBRACKETOPEN> <SQUAREBRACKETCLOSE>)*
}

// 10

void compoundStmt() : {}
{
	<CURLYBRACKETOPEN> localDeclarations() statementList() <CURLYBRACKETCLOSE>
	
}

// 11

void localDeclarations() : {}
{
	localDeclarationsPrime()
}

void localDeclarationsPrime() : {}
{
	varDeclaration() localDeclarationsPrime() | {}
}

// 12

void statementList() : {}
{
	statementListPrime()
}

void statementListPrime() : {}
{
	statement() statementListPrime() | {}
}

// 13

void statement() : {}
{
	expressionStmt() | compoundStmt() | selectionStmt() | iterationStmt() | returnStmt()
}

// 14

void expressionStmt() : {}
{
	expression() <SEMICOLON> | <SEMICOLON>
}

// 15

void selectionStmt() : {}
{
	<IF> <BRACKETOPEN> expression() <BRACKETCLOSE> statement() selectionStmtPrime()
}

void selectionStmtPrime() : {}
{
	<ELSE> statement() | {}
}

// 16

void iterationStmt() : {}
{
	<WHILE> <BRACKETOPEN> expression() <BRACKETCLOSE> statement()
}

// 17

void returnStmt() : {}
{
	<RETURN> returnStmtPrime()
}

void returnStmtPrime() : {}
{
	<SEMICOLON> | expression() <SEMICOLON>
}

// 18

void expression() : {}
{
	(LOOKAHEAD(5) var() <EQUIVALENCE> expression()
	|
	LOOKAHEAD(5) simpleExpression() 
	|
	LOOKAHEAD(5) <INPUT> <BRACKETOPEN> <BRACKETCLOSE>)
}

// 19

void var() : {}
{
	<ID>
	
	{
		DataObject d = new DataObject(token.image, "null", "variable", 0);
		insert(token.image, d);
	}

	varPrime()
}

void varPrime() : {}
{
	(<SQUAREBRACKETOPEN> expression() <SQUAREBRACKETCLOSE>)*
}

// 20

void simpleExpression() : {}
{
	additiveExpression() simpleExpressionPrime()
}

void simpleExpressionPrime() : {}
{
	(relop() additiveExpression())*
}

// 21

void relop() : {}
{
	<EQUALS> | <LESSEQUAL> | <MOREEQUAL> | <ANGLEBRACKETOPEN> | <ANGLEBRACKETCLOSE> | <NOTEQUALS>
}

// 22

void additiveExpression() : {}
{
	term() additiveExpressionPrime()
}

void additiveExpressionPrime() : {}
{
	addop() term() additiveExpressionPrime() | {}
}

// 23

void addop() : {}
{
	<SUM> | <SUB>
}

// 24

void term() : {}
{
	factor() termPrime()
}

void termPrime() : {}
{
	mulop() factor() termPrime() | {}
}

// 25

void mulop() : {}
{
	<MULT> | <DIV> | <MOD>
}

// 26

void factor() : {}
{
	(LOOKAHEAD(2) <BRACKETOPEN> expression() <BRACKETCLOSE> | LOOKAHEAD(2) call() | LOOKAHEAD(2) var() |
	 LOOKAHEAD(2) <NUMENT> | LOOKAHEAD(2) <NUMREAL> | LOOKAHEAD(2) <SIMPLECHAR>)
}

// 27

void call() : {}
{
	<ID> <BRACKETOPEN> args() <BRACKETCLOSE> | <OUTPUT> <BRACKETOPEN> args() <BRACKETCLOSE>
}

// 28

void args() : {}
{
	(argList())*
}

// 29

void argList() : {}
{
	expression() argListPrime()
}

void argListPrime() : {}
{
	<COMMA> expression() argListPrime() | {}
}
