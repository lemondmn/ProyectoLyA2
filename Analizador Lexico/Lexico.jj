options {
	Ignore_Case = false;
	STATIC=false;
	//DEBUG_PARSER=true;
	//DEBUG_LOOKAHEAD=true;
}
PARSER_BEGIN (Lexico)

	import java.util.*;

	public class Lexico {

		class DataObject {

			// variables

			String lexema;
			String tipoDato;
			String categoria;
			int size;
			String valor;

			// constructor

			public DataObject (String lexema, String tipoDato, String categoria, int size, String valor) {
				this.lexema = lexema;
				this.tipoDato = tipoDato;
				this.categoria = categoria;
				this.size = size;
				this.valor = valor;
			}

			public DataObject (String lexema, String tipoDato, String categoria, int size) {
				this.lexema = lexema;
				this.tipoDato = tipoDato;
				this.categoria = categoria;
				this.size = size;
				valor = "null";
			}

			public DataObject (String lexema, String tipoDato, String categoria) {
				this.lexema = lexema;
				this.tipoDato = tipoDato;
				this.categoria = categoria;
				size = 0;
				valor = "null";

				if(categoria == "variable" || categoria == "parametro"){
					if(tipoDato == "float"){
					size = 8;
					}
					if(tipoDato == "int"){
						size = 4;
					}
				}

				if(categoria == "arreglo" || categoria == "funcion"){
					size = 0;
				}
			}

			public DataObject () {
				this.lexema = "null";
				this.tipoDato = "null";
				this.categoria = "null";
				size = 0;
				valor = "null";
			}

			// getters y setters

			public String getLexema () {
				return lexema;
			}

			public void setLexema (String lexema) {
				this.lexema = lexema;
			}

			public String getTipoDato () {
				return tipoDato;
			}

			public void setTipoDato (String tipoDato) {
				this.tipoDato = tipoDato;
			}

			public String getCategoria () {
				return categoria;
			}

			public void setCategoria (String categoria) {
				this.categoria = categoria;
			}

			public int getSize () {
				return size;
			}

			public void setSize (int size) {
				this.size = size;
			}

			public String getValor () {
				return valor;
			}

			public void setValor (String valor) {
				this.valor = valor;
			}

		}

		static HashMap<String, DataObject> map = new HashMap<String, DataObject>();

		// HashMap Functions

		static boolean search (String key)
		{
			if (map.containsKey(key))
			{
				DataObject d = map.get(key);
				System.out.println("Lexema: " + d.getLexema() + " Tipo Dato: " + d.getTipoDato() + " Categoria: " + d.getCategoria() + " tamano: " + d.getSize());
				return true;
			}
			else
			{
				System.out.println("No Encontrado");
			}
			return false;
		}

		static void insert(String key, DataObject d)
		{
			if (map.containsKey(key))
			{
				System.out.println("Lexema ya existe");
			}
			else
			{
				map.put(key, d);
			}
		}

		static DataObject getObject(String key)
		{
			if (map.containsKey(key))
			{
				DataObject d = map.get(key);
				return d;
			}
			else
			{
				return null;
			}
		}

		static void delete(String key)
		{
			if (map.containsKey(key))
			{
				map.remove(key);
			}
			else
			{
				System.out.println("No Encontrado");
			}
		}

		static void sizePlusOne(String key){
			if (map.containsKey(key))
			{
				DataObject d = map.get(key);
				d.setSize(d.getSize() + 1);
				map.remove(key);
				map.put(key, d);
			}
			else
			{
				System.out.println("No Encontrado");
			}	
		}

		static void overwriteValor(String key, String newVal){
			if (map.containsKey(key))
			{
				DataObject d = map.get(key);
				d.setValor(newVal);
				map.remove(key);
				map.put(key, d);
			}
			else
			{
				System.out.println("No Encontrado");
			}
		}

		static void errorNumParameters(String key, int numRecieved){
			if (search(key)) {
				int arraySize = getObject(key).getSize();
				if(arraySize == numRecieved){
					System.out.print("Cantidad de parametros para ");
					System.out.println(key + "() correcta");
				}
				else {
					System.out.println("\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
					System.out.println("ERROR SEMANTICO!");
					System.out.print("Cantidad de parametros para ");
					System.out.println(key + "() incorrecta");
					System.out.println("Cantidad esperada: " + arraySize);
					System.out.println("Cantidad recibida: " + numRecieved);
					System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");
				}
			}
			else {
				System.out.println("Comprobacion fallida");
			}
		}

		//Crea un burrito que acarrea los valores obtenidos en una expresion
		static void createBurrito(DataObject burrito, String tipoBurrito){
			if (!search("0")) {
				burrito.setLexema("0");
				burrito.setTipoDato(tipoBurrito);
				burrito.setCategoria("burrito");
				burrito.setSize(0);
				burrito.setValor("0");
				insert(burrito.getLexema(), burrito);
				System.out.println("Un burrito a nacido");
			}
			else {
				System.out.println("En este establo solo cabe 1 burrito");
			}
		}

		//Asesina a sangre fria al burrito
		static void killBurrito(){
			if (search("0")) {
				System.out.println("Valor burrito: " + getObject("0").getValor());
				delete("0");
				System.out.println("Un burrito a muerto");
			}
			else {
				System.out.println("Usted no tiene burritos");
			}	
		}

		//Realiza una operacion y actualiza el valor del burrito
		static void operacionBurrito(String operationVar, int operation, String typevar){
			if (search("0")) {
				int valuevar = Integer.parseInt(operationVar);
				int total = Integer.parseInt(getObject("0").getValor());
				if(operationVar == "null"){
					valuevar = 0;
				}
				switch(operation){
				case 1: //suma
					total = total + valuevar;
					break;
				case 2: //resta
					total = total - valuevar;
					break;
				default:
					break;
				}
				overwriteValor("0", "" + total);
			}
		}

		//Devuelve el valor de size del burrito a 0
		static void resetSizeBurrito(){
			if (map.containsKey("0"))
			{
				DataObject d = map.get("0");
				d.setSize(0);
				map.remove("0");
				map.put("0", d);
			}
			else
			{
				System.out.println("No Encontrado");
			}
		}

		//
		/*static void sizePlusOneBurrito(){
			if (!search("0")) { createBurrito(); }
			sizePlusOne("0");
		}*/

		//Recibe el tipo aceptado, el recibido y el dato
		//Devuelve error si no coinciden los tipos y son diferentes a cadena vacia
		static void errorAsignation(String typeAsignation, String typeReceived, String asignation){
			if(typeReceived != typeAsignation && typeReceived != ""){
				System.out.println("\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
				System.out.println("ERROR SEMANTICO!");
				if(typeReceived == "null"){
					System.out.println("Variable a asignar no delarada");
				}
				else {					
					System.out.println("Variable de tipo incorrecto: " + asignation);
					System.out.println("Tipo recibido: " + typeReceived);
					System.out.println("Tipo correcto: " + typeAsignation);
				}
				System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");
			}
		}

		//Si la variable es un arreglo devulve su tama単o, si no devuleve -1
		static int getArraySize(String key){
			if (map.containsKey(key))
			{
				System.out.println("Posible array existe...");
				DataObject d = getObject(key);
				System.out.println("d.getCategoria(): " + d.getCategoria());
				if (d.getCategoria() == "arreglo"){
					System.out.println("Array tama単o: " + d.getSize());
					int arraySize = d.getSize();
					return arraySize;
				}
			}
			else
			{
				System.out.println("No Encontrado");
			}
			return -1;
		}

		//Revisa si el valor que lleva el burrito cabe en el arreglo dado
		static boolean checzkOversizeBurrito(String key){
			if (map.containsKey(key))
			{
				int valorBurrito = Integer.parseInt(getObject("0").getValor());
				int arraySize = getArraySize(key);
				if(valorBurrito >= 0 && valorBurrito < arraySize){
					System.out.println("Posicion " + valorBurrito + " del arreglo valida");
					System.out.println("Tama単o Maximo del Arreglo: " + (arraySize-1));
					return true;
				}
				else {
					System.out.println("\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
					System.out.println("ERROR SEMANTICO!");
					System.out.println("Posicion " + valorBurrito + " del arreglo invalida");
					System.out.println("Tama単o Maximo del Arreglo: " + (arraySize-1));
					System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");
				}
			}
			else
			{
				System.out.println("No Encontrado");
			}
			return false;
		}


		public static void main (String[] args) throws ParseException {
			Lexico anLex = new Lexico(System.in);
			//anLex.analizar();
			anLex.sintactico();

			System.out.println("Tabla hash: ");
			
			System.out.println("Lexema\tTipo\tCategoria\tTamano\tValor");
			
			for (String key : map.keySet()) {
				String fixedSpacing = "\t";
				String categ = map.get(key).getCategoria();
				if(categ == "funcion" || categ == "arreglo" || categ == "burrito"){
					fixedSpacing = "\t\t";
				}
				System.out.println(map.get(key).getLexema() + "\t" + 
					map.get(key).getTipoDato() + "\t" + 
					categ + fixedSpacing + map.get(key).getSize() + "\t" +
					map.get(key).getValor());
			}

			System.out.println("\nAnalisis terminado!");
		}

	}

	PARSER_END (Lexico)

// Keywords

TOKEN:
	{
		<INT : "int">
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion int: " + image );}
		|
		<FLOAT : "float">
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion float: " + image );}
		|
		<CHAR : "char">
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion char: " + image );}
		|
		<RETURN : "return">
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion return: " + image );}
		|
		<VOID : "void">
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion void: " + image );}
		|
		<IF : "if">
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion if: " + image );}
		|
		<ELSE : "else">
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion else: " + image );}
		|
		<WHILE : "while">
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion while: " + image );}
		|
		<INPUT : "input">
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Sentencia input: " + image );}
		|
		<OUTPUT : "output">
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Sentencia output: " + image );}
	}

// operators

TOKEN:
	{
	    <SUM : ["+"]>
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador suma: " + image );}
	    |
	    <SUB : ["-"]>
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador resta: " + image );}
	    |
	    <MULT : ["*"]>
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador multiplicacion: " + image );}
	    |
	    <DIV : ["/"]>
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador division: " + image );}
	    |
		<MOD : ["%"]>
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador modulo: " + image );}
		|
		<BRACKETOPEN : ["("]>
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Parentesis incial: " + image );}
		|
		<BRACKETCLOSE : [")"]>
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Parentesis final: " + image );}
		|
		<SQUAREBRACKETOPEN : ["["]>
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Corchete incial: " + image );}
		|
		<SQUAREBRACKETCLOSE : ["]"]>
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Corchete final: " + image );}
		|
		<CURLYBRACKETOPEN : ["{"]>
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Llave incial: " + image );}
		|
		<CURLYBRACKETCLOSE : ["}"]>
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Llave final: " + image );}
		|
		<LESSEQUAL : "<=">
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador menor o igual: " + image );}
		|
		<MOREEQUAL : ">=">
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador mayor o igual: " + image );}
		|
		<EQUALS : "==">
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador igual igual: " + image );}
		|
		<NOTEQUALS : "!=">
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador desigualdad: " + image );}
		|
		<ANGLEBRACKETOPEN : ["<"]>
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador menor que: " + image );}
		|
		<ANGLEBRACKETCLOSE : [">"]>
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador mayor que: " + image );}
		|
		<EQUIVALENCE : ["="] >
	    	{System.out.println( "No. linea: " + matchedToken.beginLine + " Operador igual: " + image );}
		|
		<SEMICOLON : [";"]>
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Punto y Coma: " + image );}
		|
		<COMMA : [","]>
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Coma: " + image );}
	}

// Regular Expresions

TOKEN:
	{
		<ID: ["a"-"z", "A"-"Z"] ( ["a"-"z", "A"-"Z"] | ["0"-"9"] | ["_"] )* >
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Identificador: " + image );}
		|
		<NUMENT: ["0"-"9"](["0"-"9"])*>
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Numero entero: " + image );}
		|
		<NUMREAL: ["0"-"9"](["0"-"9"])*["."]["0"-"9"](["0"-"9"])*>
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Numero real: " + image );}
		|
		<SIMPLECHAR: ["\'"](~["\'"])["\'"]>
			{System.out.println( "No. linea: " + matchedToken.beginLine + " Caracter tipo Char: " + image );}
	}

SKIP:
	{
		<"/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/">
		|
		<["/"]["/"](~["\n"])*>
		|
		" " | "\t" | "\n" | "\r"
	}

SPECIAL_TOKEN: {
	// Muchos puntos decimales en el float
	<["0"-"9"](["0"-"9"])*["."](["."])*["0"-"9"](["0"-"9"])*>
		{System.out.println("(Error) Demasiados puntos en numero decimal en la linea:" + matchedToken.beginLine );}
	|
	// Falta la parte entera en el float
	<["."]["0"-"9"](["0"-"9"])*>
		{System.out.println( "(Error) Error de escritura en numero decimal en la linea:" + matchedToken.beginLine );}
	|
	// Falta la parte decimal en el float
	<["0"-"9"](["0"-"9"])*["."]>
		{System.out.println("(Error) Error de escritura en numero decimal en la linea:" + matchedToken.beginLine );}
	|
	// Identificador invalido
	<(["0"-"9"] | ["."]) ( ["a"-"z", "A"-"Z"] | ["0"-"9"] | ["_"] )* >
		{System.out.println("(Error) Identificador invalido en la linea:" + matchedToken.beginLine );}
	|
	// Token invalido
	<~[]> {System.out.println( "(Error) Token desconocido en la linea:" + matchedToken.beginLine );}
}

/* 

void analizar() : {}
	{
		(<INT> | <FLOAT> | <CHAR> | <RETURN> | <VOID>
		| <IF> | <ELSE> | <WHILE> | <INPUT> | <OUTPUT> |
		<SUM> | <SUB> | <MULT> | <DIV> | <LESSEQUAL> | <MOREEQUAL>
		|<EQUALS> | <MOD> | <BRACKETOPEN> | <BRACKETCLOSE> |
		<SQUAREBRACKETOPEN> | <SQUAREBRACKETCLOSE> | <CURLYBRACKETOPEN> |
		<CURLYBRACKETCLOSE>| <ANGLEBRACKETOPEN> | <ANGLEBRACKETCLOSE> |
		<EQUIVALENCE> | <SEMICOLON> | <COMMA> | <ID> | <NUMENT> |
		<NUMREAL> | <SIMPLECHAR>) + <EOF>
	}

*/

// Analizador sintactico

void sintactico() : {}
{
	(program()) + <EOF>
}

// 1

void program() : {} 
{
	declarationList()
}

// 2

void declarationList() : {}
{
	declaration() declarationListPrime()
}

void declarationListPrime() : {}
{
	declaration() declarationListPrime() | {}
}

// 3

void declaration() : {}
{
	(LOOKAHEAD(3) varDeclaration() | LOOKAHEAD(3) funDeclaration())
}

// 4

void varDeclaration() : {String typevar; String actualkey;}
{
	typeSpecifier(){
		typevar = token.image;
	} 
	<ID> 
	{
		actualkey = token.image;
	}
	varDeclarationPrime(typevar, actualkey)
}

void varDeclarationPrime(String typevar, String lastkey) : {int varsize;}
{
	LOOKAHEAD(2) <SEMICOLON>{
		DataObject d = new DataObject(lastkey, typevar, "variable");
		insert(lastkey, d);
	} 
	| LOOKAHEAD(2) <SQUAREBRACKETOPEN> 
	var() {
		//System.out.println("arreglo variable: " + token.image);
		if(!search(token.image)) {
			System.out.println("\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
			System.out.println("ERROR SEMANTICO!");
			System.out.println("Variable " + token.image + " no declarada");
			System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");
		}
	}
	<SQUAREBRACKETCLOSE> <SEMICOLON>{
		DataObject d = new DataObject(lastkey, typevar, "arreglo");
		insert(lastkey, d);
	} 
	| LOOKAHEAD(2) <SQUAREBRACKETOPEN> 
	<NUMENT> {varsize = Integer.parseInt(token.image);}
	<SQUAREBRACKETCLOSE> <SEMICOLON>{
		DataObject d = new DataObject(lastkey, typevar, "arreglo", varsize);
		insert(lastkey, d);
	}
	| LOOKAHEAD(2) 
	  (<COMMA><ID>

	  {
		DataObject d = new DataObject(token.image, typevar, "variable");
		insert(token.image, d);
	  }

	  )* <SEMICOLON>{
	  	DataObject d = new DataObject(lastkey, typevar, "variable");
		insert(lastkey, d);
	  }
}

// 5

void typeSpecifier() : {}
{
	(
		<INT>
		| <FLOAT>
		| <CHAR>
		| <VOID>
	)
}

// 6

void funDeclaration() : {String typevar; String actualkey;}
{
	typeSpecifier(){typevar = token.image;} 
	<ID> 
	{
		actualkey = token.image;
		DataObject d = new DataObject(token.image, typevar, "funcion", 0);
		insert(token.image, d);
	} 
	<BRACKETOPEN> params(actualkey) <BRACKETCLOSE> compoundStmt()
}

// 7

void params(String actualkey) : {}
{
	(LOOKAHEAD(2) paramList(actualkey) | LOOKAHEAD(2) <VOID>)
}

// 8

void paramList(String actualkey) : {}
{
	param(actualkey) paramListPrime(actualkey)
}

void paramListPrime(String actualkey) : {}
{
	<COMMA> param(actualkey) paramListPrime(actualkey) |{}
}

// 9

void param(String actualkey) : {String typevar;}
{
	typeSpecifier(){typevar = token.image;} 
	<ID> 
	{
		DataObject d = new DataObject(token.image, typevar, "parametro");
		insert(token.image, d);
		sizePlusOne(actualkey);
	}
	paramPrime()
}

void paramPrime() : {}
{
	(<SQUAREBRACKETOPEN> <SQUAREBRACKETCLOSE>)*
}

// 10

void compoundStmt() : {}
{
	<CURLYBRACKETOPEN> localDeclarations() statementList() <CURLYBRACKETCLOSE>
	
}

// 11

void localDeclarations() : {}
{
	localDeclarationsPrime()
}

void localDeclarationsPrime() : {}
{
	varDeclaration() localDeclarationsPrime() | {}
}

// 12

void statementList() : {}
{
	statementListPrime()
}

void statementListPrime() : {}
{
	statement() statementListPrime() | {}
}

// 13

void statement() : {}
{
	expressionStmt() | compoundStmt() | selectionStmt() | iterationStmt() | returnStmt()
}

// 14

void expressionStmt() : {}
{
	expression("")  <SEMICOLON> | <SEMICOLON>
}

// 15

void selectionStmt() : {}
{
	<IF> <BRACKETOPEN> expression("") <BRACKETCLOSE> statement() selectionStmtPrime()
}

void selectionStmtPrime() : {}
{
	<ELSE> statement() | {}
}

// 16

void iterationStmt() : {}
{
	<WHILE> <BRACKETOPEN> expression("") <BRACKETCLOSE> statement()
}

// 17

void returnStmt() : {}
{
	<RETURN> returnStmtPrime()
}

void returnStmtPrime() : {}
{
	<SEMICOLON> | expression("") <SEMICOLON>
}

// 18

void expression(String type) : {String varID; String typevar;}
{
	(LOOKAHEAD(5) varID = var() {
		System.out.println("expression -> varID: " + varID);
		if(!search(varID)) {
			typevar = "null";
			System.out.println("\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
			System.out.println("ERROR SEMANTICO!");
			System.out.println("Variable " + varID + " no declarada");
			System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");
		}
		else {
			typevar = getObject(varID).getTipoDato();
		}
		//System.out.println("tipo heredado: " + type);
		//System.out.println("tipo creado: " + typevar);
	} 
		<EQUIVALENCE> expression(typevar) //{System.out.println("...= : " + token.image);}
	|
	LOOKAHEAD(5) simpleExpression(type) //{System.out.println("tipo heredado: " + type);}
	|
	LOOKAHEAD(5) <INPUT> <BRACKETOPEN> <BRACKETCLOSE>)
}

// 19

String var() : {String varID;}
{
	<ID> {
		varID = token.image;
		createBurrito(new DataObject(), "int");
		//System.out.println("Array size: " + getArraySize(varID));
	}
	varPrime(varID) {
		return varID;
	}
}

void varPrime(String varID) : {}
{
	(<SQUAREBRACKETOPEN>
		expression("int") {
			//System.out.println("[this] " + token.image);
			checzkOversizeBurrito(varID);
			killBurrito();
		} 
		<SQUAREBRACKETCLOSE>)*
}

// 20

void simpleExpression(String type) : {}
{
	additiveExpression(type) simpleExpressionPrime(type)
}

void simpleExpressionPrime(String type) : {}
{
	(relop() additiveExpression(type))*
}

// 21

void relop() : {}
{
	<EQUALS> | <LESSEQUAL> | <MOREEQUAL> | <ANGLEBRACKETOPEN> | <ANGLEBRACKETCLOSE> | <NOTEQUALS>
}

// 22

void additiveExpression(String type) : {}
{
	term(type) additiveExpressionPrime(type)
}

void additiveExpressionPrime(String type) : {}
{
	addop() term(type) additiveExpressionPrime(type) | {}
}

// 23

void addop() : {}
{
	<SUM> | <SUB>
}

// 24

void term(String type) : {}
{
	factor(type) termPrime(type)
}

void termPrime(String type) : {}
{
	mulop() factor(type) termPrime(type) | {}
}

// 25

void mulop() : {}
{
	<MULT> | <DIV> | <MOD>
}

// 26

void factor(String type) : {String varID;}
{
	(LOOKAHEAD(2) <BRACKETOPEN> expression(type) <BRACKETCLOSE> 
		| LOOKAHEAD(2) call() 
		| LOOKAHEAD(2) varID = var() {
			if(!search(varID)) {
				System.out.println("\nERROR SEMANTICO!");
				System.out.println("Variable " + token.image + " no declarada\n");
			}
			else{
				errorAsignation(type, getObject(varID).getTipoDato(), varID);
			}
			System.out.println("factor: " + token.image);
		}  
		| LOOKAHEAD(2) <NUMENT> {
			operacionBurrito(token.image, 1, "int");
			errorAsignation("int", type, token.image);
			//System.out.println("factor: " + token.image);
		}
		| LOOKAHEAD(2) <NUMREAL> {
			errorAsignation("float", type, token.image);
			//System.out.println("factor: " + token.image);
		}
		| LOOKAHEAD(2) <SIMPLECHAR> {
			errorAsignation("char", type, token.image);
			//System.out.println("factor: " + token.image);
		})
}

// 27

void call() : {String varID;}
{
	<ID> {varID = token.image;System.out.println("\nInicio conteo ->");resetSizeBurrito();}
	<BRACKETOPEN> args() <BRACKETCLOSE> {
		errorNumParameters(varID, getObject("0").getSize());
		System.out.println("<- Fin conteo\n");
	}
	| <OUTPUT> <BRACKETOPEN> args() <BRACKETCLOSE>
}

// 28

void args() : {}
{
	(argList())*
}

// 29

void argList() : {}
{
	expression("") {
		//System.out.println("+ 1 parametro");
		sizePlusOne("0");
	}
	argListPrime()
}

void argListPrime() : {}
{
	<COMMA> expression("") argListPrime() {
		//System.out.println("+ 1 parametro");
		sizePlusOne("0");
	}
	| {}
}
