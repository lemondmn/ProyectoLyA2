PARSER_BEGIN (Lexico)
	public class Lexico {
		public static void main (String[] args) throws ParseException {
			Lexico anLex = new Lexico(System.in);
			anLex.unaExpresion();
			System.out.println("\nOfuscacion completada!");
		}
	}
	PARSER_END (Lexico)


// Keywords

TOKEN:
	{
		< INT : ["int"] >
		|
		< FLOAT : ["float"] >
		|
		< CHAR : ["char"] >
		|
		< RETURN : ["return"] >
		|
		< VOID : ["void"] >
		|
		< IF : ["if"] >
		|
		< ELSE : ["else"] >
		|
		< WHILE : ["while"] >
	}

// operators

TOKEN:
	{
	    <	SUM : ["+"] >
	    |
	    <	SUB : ["-"] >
	    |
	    <	MULT : ["*"] >
	    |
	    <	DIV : ["/"] >
	    |
	    <	EQUALS : ["="] >
		|
		<	MOD : ["%"] >
		|
		<	BRACKETOPEN : ["("] >
		|
		<	BRACKETCLOSE : [")"] >
		|
		<	SQUAREBRACKETOPEN : ["["] >
		|
		<	SQUAREBRACKETCLOSE : ["]"] >
		|
		<	CURLYBRACKETOPEN : ["{"] >
		|
		<	CURLYBRACKETCLOSE : ["}"] >
		|
		<	ANGLEBRACKETOPEN : ["<"] >
		|
		<	ANGLEBRACKETCLOSE : [">"] >
		|
		<	SEMICOLON : [";"] >
		|
		<	COMMA : [","] >
		|
		<	COMMENTOPEN : ["\*"] >
		|
		<	COMMENTCLOSE : ["*\"] >
	}

// Regular Expresions

TOKEN:
	{
		<ID: ["a"-"z", "A"-"Z"] ( ["a"-"z", "A"-"Z"] | ["0"-"9"] | ["_"] )* >
		|
		<NUMENT: ["0"-"9"](["0"-"9"])*>
		|
		<NUMREAL: ["0"-"9"](["0"-"9"])*["."]["0"-"9"](["0"-"9"])*>
	}

SKIP:
	{
		" " | "\t" | "\n" | "\r"
		|
		<~[]>
	}

void unaExpresion() : {}
	{
		
	}