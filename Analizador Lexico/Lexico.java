/* Generated By:JavaCC: Do not edit this line. Lexico.java */
        import java.util.*;

        public class Lexico implements LexicoConstants {

                class DataObject {

                        // variables

                        String lexema;
                        String tipoDato;
                        String categoria;
                        int size;
                        String valor;

                        // constructor

                        public DataObject (String lexema, String tipoDato, String categoria, int size, String valor) {
                                this.lexema = lexema;
                                this.tipoDato = tipoDato;
                                this.categoria = categoria;
                                this.size = size;
                                this.valor = valor;
                        }

                        public DataObject (String lexema, String tipoDato, String categoria, int size) {
                                this.lexema = lexema;
                                this.tipoDato = tipoDato;
                                this.categoria = categoria;
                                this.size = size;
                                valor = "null";
                        }

                        public DataObject (String lexema, String tipoDato, String categoria) {
                                this.lexema = lexema;
                                this.tipoDato = tipoDato;
                                this.categoria = categoria;
                                size = 0;
                                valor = "null";

                                if(categoria == "variable" || categoria == "parametro"){
                                        if(tipoDato == "float"){
                                        size = 8;
                                        }
                                        if(tipoDato == "int"){
                                                size = 4;
                                        }
                                }

                                if(categoria == "arreglo" || categoria == "funcion"){
                                        size = 0;
                                }
                        }

                        public DataObject () {
                                this.lexema = "null";
                                this.tipoDato = "null";
                                this.categoria = "null";
                                size = 0;
                                valor = "null";
                        }

                        // getters y setters

                        public String getLexema () {
                                return lexema;
                        }

                        public void setLexema (String lexema) {
                                this.lexema = lexema;
                        }

                        public String getTipoDato () {
                                return tipoDato;
                        }

                        public void setTipoDato (String tipoDato) {
                                this.tipoDato = tipoDato;
                        }

                        public String getCategoria () {
                                return categoria;
                        }

                        public void setCategoria (String categoria) {
                                this.categoria = categoria;
                        }

                        public int getSize () {
                                return size;
                        }

                        public void setSize (int size) {
                                this.size = size;
                        }

                        public String getValor () {
                                return valor;
                        }

                        public void setValor (String valor) {
                                this.valor = valor;
                        }

                }

                static HashMap<String, DataObject> map = new HashMap<String, DataObject>();

                // HashMap Functions

                static boolean search (String key)
                {
                        if (map.containsKey(key))
                        {
                                DataObject d = map.get(key);
                                System.out.println("Lexema: " + d.getLexema() + " Tipo Dato: " + d.getTipoDato() + " Categoria: " + d.getCategoria() + " tamano: " + d.getSize());
                                return true;
                        }
                        else
                        {
                                System.out.println("No Encontrado");
                        }
                        return false;
                }

                static void insert(String key, DataObject d)
                {
                        if (map.containsKey(key))
                        {
                                System.out.println("Lexema ya existe");
                        }
                        else
                        {
                                map.put(key, d);
                        }
                }

                static DataObject getObject(String key)
                {
                        if (map.containsKey(key))
                        {
                                DataObject d = map.get(key);
                                return d;
                        }
                        else
                        {
                                return null;
                        }
                }

                static void delete(String key)
                {
                        if (map.containsKey(key))
                        {
                                map.remove(key);
                        }
                        else
                        {
                                System.out.println("Variable A Eliminar No Encontrado");
                        }
                }

                static void sizePlusOne(String key){
                        if (map.containsKey(key))
                        {
                                DataObject d = map.get(key);
                                d.setSize(d.getSize() + 1);
                                map.remove(key);
                                map.put(key, d);
                        }
                        else
                        {
                                System.out.println("Variable A Crecer No Encontrada");
                        }
                }

                static void overwriteValor(String key, String newVal){
                        if (map.containsKey(key))
                        {
                                DataObject d = map.get(key);
                                d.setValor(newVal);
                                map.remove(key);
                                map.put(key, d);
                        }
                        else
                        {
                                System.out.println("Sobreescritura No Encontrado");
                        }
                }

                static void errorNumParameters(String key, int numRecieved){
                        if (search(key)) {
                                int arraySize = getObject(key).getSize();
                                if(arraySize == numRecieved){
                                        System.out.print("Cantidad de parametros para ");
                                        System.out.println(key + "() correcta");
                                }
                                else {
                                        System.out.println("\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
                                        System.out.println("ERROR SEMANTICO!");
                                        System.out.print("Cantidad de parametros para ");
                                        System.out.println(key + "() incorrecta");
                                        System.out.println("Cantidad esperada: " + arraySize);
                                        System.out.println("Cantidad recibida: " + numRecieved);
                                        System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");
                                }
                        }
                        else {
                                System.out.println("Comprobacion fallida");
                        }
                }

                //Crea un burrito que acarrea los valores obtenidos en una expresion
                static void createBurrito(DataObject burrito, String tipoBurrito){
                        if (!search("0")) {
                                burrito.setLexema("0");
                                burrito.setTipoDato(tipoBurrito);
                                burrito.setCategoria("burrito");
                                burrito.setSize(0);
                                burrito.setValor("0");
                                insert(burrito.getLexema(), burrito);
                                System.out.println("Un burrito a nacido");
                        }
                        else {
                                System.out.println("En este establo solo cabe 1 burrito");
                        }
                }

                //Asesina a sangre fria al burrito
                static void killBurrito(){
                        if (search("0")) {
                                System.out.println("Valor burrito: " + getObject("0").getValor());
                                delete("0");
                                System.out.println("Un burrito a muerto");
                        }
                        else {
                                System.out.println("Usted no tiene burritos");
                        }
                }

                //Realiza una operacion y actualiza el valor del burrito
                static void operacionBurrito(String operationVar, int operation, String typevar){
                        if (search("0")) {
                                int valuevar = Integer.parseInt(operationVar);
                                int total = Integer.parseInt(getObject("0").getValor());
                                if(operationVar == "null"){
                                        valuevar = 0;
                                }
                                switch(operation){
                                case 1: //suma
                                        total = total + valuevar;
                                        break;
                                case 2: //resta
                                        total = total - valuevar;
                                        break;
                                default:
                                        break;
                                }
                                overwriteValor("0", "" + total);
                        }
                }

                //Devuelve el valor de size del burrito a 0
                static boolean resetSizeBurrito(){
                        if (map.containsKey("0"))
                        {
                                DataObject d = map.get("0");
                                d.setSize(0);
                                map.remove("0");
                                map.put("0", d);
                                return true;
                        }
                        else
                        {
                                System.out.println("No hay burrito para resetear");
                        }
                        return false;
                }

                //
                /*static void sizePlusOneBurrito(){
			if (!search("0")) { createBurrito(); }
			sizePlusOne("0");
		}*/

                //Recibe el tipo aceptado, el recibido y el dato
                //Devuelve error si no coinciden los tipos y son diferentes a cadena vacia
                static void errorAsignation(String typeAsignation, String typeReceived, String asignation){
                        if(typeReceived != typeAsignation && typeReceived != ""){
                                System.out.println("\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
                                System.out.println("ERROR SEMANTICO!");
                                if(typeReceived == "null"){
                                        System.out.println("Variable a asignar no delarada");
                                }
                                else {
                                        System.out.println("Variable de tipo incorrecto: " + asignation);
                                        System.out.println("Tipo recibido: " + typeReceived);
                                        System.out.println("Tipo correcto: " + typeAsignation);
                                }
                                System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");
                        }
                }

                //Si la variable es un arreglo devulve su tamaño, si no devuleve -1
                static int getArraySize(String key){
                        if (map.containsKey(key))
                        {
                                DataObject d = getObject(key);
                                System.out.println("d.getCategoria(): " + d.getCategoria());
                                if (d.getCategoria() == "arreglo"){
                                        System.out.println("Array tama\u00c3\u00b1o: " + d.getSize());
                                        int arraySize = d.getSize();
                                        return arraySize;
                                }
                        }
                        else
                        {
                                System.out.println("No Encontrado");
                        }
                        return -1;
                }

                //Revisa si el valor que lleva el burrito cabe en el arreglo dado
                static boolean checzkOversizeBurrito(String key){
                        if (map.containsKey(key))
                        {
                                int valorBurrito = Integer.parseInt(getObject("0").getValor());
                                int arraySize = getArraySize(key);
                                if(valorBurrito >= 0 && valorBurrito < arraySize){
                                        System.out.println("Posicion " + valorBurrito + " del arreglo valida");
                                        System.out.println("Tama\u00c3\u00b1o Maximo del Arreglo: " + (arraySize-1));
                                        return true;
                                }
                                else {
                                        System.out.println("\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
                                        System.out.println("ERROR SEMANTICO!");
                                        System.out.println("Posicion " + valorBurrito + " del arreglo invalida");
                                        System.out.println("Tama\u00c3\u00b1o Maximo del Arreglo: " + (arraySize-1));
                                        System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");
                                }
                        }
                        else
                        {
                                System.out.println("No Encontrado");
                        }
                        return false;
                }

                static void printHashTable(){
                        System.out.println("Tabla hash: ");

                        System.out.println("Lexema\tTipo\tCategoria\tTamano\tValor");

                        for (String key : map.keySet()) {
                                String fixedSpacing = "\t";
                                String categ = map.get(key).getCategoria();
                                if(categ == "funcion" || categ == "arreglo" || categ == "burrito"){
                                        fixedSpacing = "\t\t";
                                }
                                System.out.println(map.get(key).getLexema() + "\t" +
                                        map.get(key).getTipoDato() + "\t" +
                                        categ + fixedSpacing + map.get(key).getSize() + "\t" +
                                        map.get(key).getValor());
                        }
                }


                public static void main (String[] args) throws ParseException {
                        Lexico anLex = new Lexico(System.in);
                        //anLex.analizar();
                        anLex.sintactico();

                        printHashTable();

                        System.out.println("\nAnalisis terminado!");
                }

/* 

void analizar() : {}
	{
		(<INT> | <FLOAT> | <CHAR> | <RETURN> | <VOID>
		| <IF> | <ELSE> | <WHILE> | <INPUT> | <OUTPUT> |
		<SUM> | <SUB> | <MULT> | <DIV> | <LESSEQUAL> | <MOREEQUAL>
		|<EQUALS> | <MOD> | <BRACKETOPEN> | <BRACKETCLOSE> |
		<SQUAREBRACKETOPEN> | <SQUAREBRACKETCLOSE> | <CURLYBRACKETOPEN> |
		<CURLYBRACKETCLOSE>| <ANGLEBRACKETOPEN> | <ANGLEBRACKETCLOSE> |
		<EQUIVALENCE> | <SEMICOLON> | <COMMA> | <ID> | <NUMENT> |
		<NUMREAL> | <SIMPLECHAR>) + <EOF>
	}

*/

// Analizador sintactico
  final public void sintactico() throws ParseException {
    label_1:
    while (true) {
      program();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
      case CHAR:
      case VOID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

// 1
  final public void program() throws ParseException {
    declarationList();
  }

// 2
  final public void declarationList() throws ParseException {
    declaration();
    declarationListPrime();
  }

  final public void declarationListPrime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case FLOAT:
    case CHAR:
    case VOID:
      declaration();
      declarationListPrime();
      break;
    default:
      jj_la1[1] = jj_gen;

    }
  }

// 3
  final public void declaration() throws ParseException {
    if (jj_2_1(3)) {
      varDeclaration();
    } else if (jj_2_2(3)) {
      funDeclaration();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// 4
  final public void varDeclaration() throws ParseException {
                         String typevar; String actualkey;
    typeSpecifier();
                typevar = token.image;
    jj_consume_token(ID);
                actualkey = token.image;
    varDeclarationPrime(typevar, actualkey);
  }

  final public void varDeclarationPrime(String typevar, String lastkey) throws ParseException {
                                                            int varsize;
    if (jj_2_3(2)) {
      jj_consume_token(SEMICOLON);
                DataObject d = new DataObject(lastkey, typevar, "variable");
                insert(lastkey, d);
    } else if (jj_2_4(2)) {
      jj_consume_token(SQUAREBRACKETOPEN);
      var();
                //System.out.println("arreglo variable: " + token.image);
                if(!search(token.image)) {
                        System.out.println("\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
                        System.out.println("ERROR SEMANTICO!");
                        System.out.println("Variable " + token.image + " no declarada");
                        System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");
                }
      jj_consume_token(SQUAREBRACKETCLOSE);
      jj_consume_token(SEMICOLON);
                DataObject d = new DataObject(lastkey, typevar, "arreglo");
                insert(lastkey, d);
    } else if (jj_2_5(2)) {
      jj_consume_token(SQUAREBRACKETOPEN);
      jj_consume_token(NUMENT);
                  varsize = Integer.parseInt(token.image);
      jj_consume_token(SQUAREBRACKETCLOSE);
      jj_consume_token(SEMICOLON);
                DataObject d = new DataObject(lastkey, typevar, "arreglo", varsize);
                insert(lastkey, d);
    } else if (jj_2_6(2)) {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        jj_consume_token(ID);
                DataObject d = new DataObject(token.image, typevar, "variable");
                insert(token.image, d);
      }
      jj_consume_token(SEMICOLON);
                DataObject d = new DataObject(lastkey, typevar, "variable");
                insert(lastkey, d);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// 5
  final public void typeSpecifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// 6
  final public void funDeclaration() throws ParseException {
                         String typevar; String actualkey;
    typeSpecifier();
                        typevar = token.image;
    jj_consume_token(ID);
                actualkey = token.image;
                DataObject d = new DataObject(token.image, typevar, "funcion", 0);
                insert(token.image, d);
    jj_consume_token(BRACKETOPEN);
    params(actualkey);
    jj_consume_token(BRACKETCLOSE);
                         killBurrito();
    compoundStmt();
  }

// 7
  final public void params(String actualkey) throws ParseException {
    if (jj_2_7(2)) {
      paramList(actualkey);
    } else if (jj_2_8(2)) {
      jj_consume_token(VOID);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// 8
  final public void paramList(String actualkey) throws ParseException {
    param(actualkey);
    paramListPrime(actualkey);
  }

  final public void paramListPrime(String actualkey) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      param(actualkey);
      paramListPrime(actualkey);
      break;
    default:
      jj_la1[4] = jj_gen;

    }
  }

// 9
  final public void param(String actualkey) throws ParseException {
                                String typevar;
    typeSpecifier();
                        typevar = token.image;
    jj_consume_token(ID);
                DataObject d = new DataObject(token.image, typevar, "parametro");
                insert(token.image, d);
                sizePlusOne(actualkey);
    paramPrime();
  }

  final public void paramPrime() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SQUAREBRACKETOPEN:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      jj_consume_token(SQUAREBRACKETOPEN);
      jj_consume_token(SQUAREBRACKETCLOSE);
    }
  }

// 10
  final public void compoundStmt() throws ParseException {
    jj_consume_token(CURLYBRACKETOPEN);
    localDeclarations();
    statementList();
    jj_consume_token(CURLYBRACKETCLOSE);
  }

// 11
  final public void localDeclarations() throws ParseException {
    localDeclarationsPrime();
  }

  final public void localDeclarationsPrime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case FLOAT:
    case CHAR:
    case VOID:
      varDeclaration();
      localDeclarationsPrime();
      break;
    default:
      jj_la1[6] = jj_gen;

    }
  }

// 12
  final public void statementList() throws ParseException {
    statementListPrime();
  }

  final public void statementListPrime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RETURN:
    case IF:
    case WHILE:
    case INPUT:
    case OUTPUT:
    case BRACKETOPEN:
    case CURLYBRACKETOPEN:
    case SEMICOLON:
    case ID:
    case NUMENT:
    case NUMREAL:
    case SIMPLECHAR:
      statement();
      statementListPrime();
      break;
    default:
      jj_la1[7] = jj_gen;

    }
  }

// 13
  final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INPUT:
    case OUTPUT:
    case BRACKETOPEN:
    case SEMICOLON:
    case ID:
    case NUMENT:
    case NUMREAL:
    case SIMPLECHAR:
      expressionStmt();
                           killBurrito();
      break;
    case CURLYBRACKETOPEN:
      compoundStmt();
      break;
    case IF:
      selectionStmt();
      break;
    case WHILE:
      iterationStmt();
      break;
    case RETURN:
      returnStmt();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// 14
  final public void expressionStmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INPUT:
    case OUTPUT:
    case BRACKETOPEN:
    case ID:
    case NUMENT:
    case NUMREAL:
    case SIMPLECHAR:
      expression("");
      jj_consume_token(SEMICOLON);
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// 15
  final public void selectionStmt() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(BRACKETOPEN);
    expression("");
    jj_consume_token(BRACKETCLOSE);
    statement();
    selectionStmtPrime();
  }

  final public void selectionStmtPrime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      statement();
      break;
    default:
      jj_la1[10] = jj_gen;

    }
  }

// 16
  final public void iterationStmt() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(BRACKETOPEN);
    expression("");
    jj_consume_token(BRACKETCLOSE);
    statement();
  }

// 17
  final public void returnStmt() throws ParseException {
    jj_consume_token(RETURN);
    returnStmtPrime();
  }

  final public void returnStmtPrime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case INPUT:
    case OUTPUT:
    case BRACKETOPEN:
    case ID:
    case NUMENT:
    case NUMREAL:
    case SIMPLECHAR:
      expression("");
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// 18
  final public void expression(String type) throws ParseException {
                                String varID; String typevar;
    if (jj_2_9(5)) {
      varID = var();
                System.out.println("expression -> varID: " + varID);
                if(!search(varID)) {
                        typevar = "null";
                        System.out.println("\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
                        System.out.println("ERROR SEMANTICO!");
                        System.out.println("Variable " + varID + " no declarada");
                        System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n");
                }
                else {
                        typevar = getObject(varID).getTipoDato();
                }
                //System.out.println("tipo heredado: " + type);
                //System.out.println("tipo creado: " + typevar);

      jj_consume_token(EQUIVALENCE);
      expression(typevar);

    } else if (jj_2_10(5)) {
      simpleExpression(type);
    } else if (jj_2_11(5)) {
      jj_consume_token(INPUT);
      jj_consume_token(BRACKETOPEN);
      jj_consume_token(BRACKETCLOSE);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// 19
  final public String var() throws ParseException {
                String varID;
    jj_consume_token(ID);
                varID = token.image;
                //System.out.println("\nAAAAAAAAAAAAAAAAAAAAAAAAAAA");
                createBurrito(new DataObject(), "int");
    varPrime(varID);
                {if (true) return varID;}
    throw new Error("Missing return statement in function");
  }

  final public void varPrime(String varID) throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SQUAREBRACKETOPEN:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      jj_consume_token(SQUAREBRACKETOPEN);
      expression("int");
                        //System.out.println("[this] " + token.image);
                        checzkOversizeBurrito(varID);
                        killBurrito();
      jj_consume_token(SQUAREBRACKETCLOSE);
    }
  }

// 20
  final public void simpleExpression(String type) throws ParseException {
    additiveExpression(type);
    simpleExpressionPrime(type);
  }

  final public void simpleExpressionPrime(String type) throws ParseException {
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESSEQUAL:
      case MOREEQUAL:
      case EQUALS:
      case NOTEQUALS:
      case ANGLEBRACKETOPEN:
      case ANGLEBRACKETCLOSE:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      relop();
      additiveExpression(type);
    }
  }

// 21
  final public void relop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
      break;
    case LESSEQUAL:
      jj_consume_token(LESSEQUAL);
      break;
    case MOREEQUAL:
      jj_consume_token(MOREEQUAL);
      break;
    case ANGLEBRACKETOPEN:
      jj_consume_token(ANGLEBRACKETOPEN);
      break;
    case ANGLEBRACKETCLOSE:
      jj_consume_token(ANGLEBRACKETCLOSE);
      break;
    case NOTEQUALS:
      jj_consume_token(NOTEQUALS);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// 22
  final public void additiveExpression(String type) throws ParseException {
    term(type);
    additiveExpressionPrime(type);
  }

  final public void additiveExpressionPrime(String type) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUM:
    case SUB:
      addop();
      term(type);
      additiveExpressionPrime(type);
      break;
    default:
      jj_la1[15] = jj_gen;

    }
  }

// 23
  final public void addop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUM:
      jj_consume_token(SUM);
      break;
    case SUB:
      jj_consume_token(SUB);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// 24
  final public void term(String type) throws ParseException {
    factor(type);
    termPrime(type);
  }

  final public void termPrime(String type) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT:
    case DIV:
    case MOD:
      mulop();
      factor(type);
      termPrime(type);
      break;
    default:
      jj_la1[17] = jj_gen;

    }
  }

// 25
  final public void mulop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT:
      jj_consume_token(MULT);
      break;
    case DIV:
      jj_consume_token(DIV);
      break;
    case MOD:
      jj_consume_token(MOD);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// 26
  final public void factor(String type) throws ParseException {
                            String varID;
    if (jj_2_12(2)) {
      jj_consume_token(BRACKETOPEN);
      expression(type);
      jj_consume_token(BRACKETCLOSE);
    } else if (jj_2_13(2)) {
      varID = call();
                        //System.out.println("factor -> call()");
                        if(!search(varID)) {
                                System.out.println("\nERROR SEMANTICO!");
                                System.out.println("Funcion " + token.image + " no declarada\n");
                        }
                        else{
                                errorAsignation(type, getObject(varID).getTipoDato(), varID);
                        }
    } else if (jj_2_14(2)) {
      varID = var();
                        if(!search(varID)) {
                                System.out.println("\nERROR SEMANTICO!");
                                System.out.println("Variable " + token.image + " no declarada\n");
                        }
                        else{
                                errorAsignation(type, getObject(varID).getTipoDato(), varID);
                        }
                        System.out.println("factor: " + token.image);
    } else if (jj_2_15(2)) {
      jj_consume_token(NUMENT);
                        operacionBurrito(token.image, 1, "int");
                        errorAsignation("int", type, token.image);
                        //System.out.println("factor: " + token.image);

    } else if (jj_2_16(2)) {
      jj_consume_token(NUMREAL);
                        errorAsignation("float", type, token.image);
                        //System.out.println("factor: " + token.image);

    } else if (jj_2_17(2)) {
      jj_consume_token(SIMPLECHAR);
                        errorAsignation("char", type, token.image);
                        //System.out.println("factor: " + token.image);

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// 27
  final public String call() throws ParseException {
                 String varID;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
                varID = token.image;
                System.out.println("\nInicio conteo ->");
                if(!resetSizeBurrito()){
                        createBurrito(new DataObject(), "int");
                }
      jj_consume_token(BRACKETOPEN);
      args();
      jj_consume_token(BRACKETCLOSE);
                System.out.println("args(): " + varID);
                errorNumParameters(varID, getObject("0").getSize());
                System.out.println("<- Fin conteo\n");
                {if (true) return varID;}
      break;
    case OUTPUT:
      jj_consume_token(OUTPUT);
      jj_consume_token(BRACKETOPEN);
      args();
      jj_consume_token(BRACKETCLOSE);
                                                         {if (true) return null;}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// 28
  final public void args() throws ParseException {
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INPUT:
      case OUTPUT:
      case BRACKETOPEN:
      case ID:
      case NUMENT:
      case NUMREAL:
      case SIMPLECHAR:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_6;
      }
      argList();
    }
  }

// 29
  final public void argList() throws ParseException {
    expression("");
                //System.out.println("+ 1 parametro");
                sizePlusOne("0");
    argListPrime();
  }

  final public void argListPrime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      expression("");
      argListPrime();
                //System.out.println("++ 1 parametro");
                sizePlusOne("0");
      break;
    default:
      jj_la1[21] = jj_gen;

    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_3R_8() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(BRACKETOPEN)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_19()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(NUMREAL)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(NUMENT)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(1)) {
    jj_scanpos = xsp;
    if (jj_scan_token(2)) {
    jj_scanpos = xsp;
    if (jj_scan_token(3)) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(SQUAREBRACKETOPEN)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(SQUAREBRACKETCLOSE)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_6() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_10()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(INPUT)) return true;
    if (jj_scan_token(BRACKETOPEN)) return true;
    if (jj_scan_token(BRACKETCLOSE)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(SQUAREBRACKETOPEN)) return true;
    if (jj_scan_token(NUMENT)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(BRACKETOPEN)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(BRACKETCLOSE)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(SQUAREBRACKETOPEN)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_35()) return true;
    if (jj_3R_27()) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_9()) return true;
    if (jj_scan_token(EQUIVALENCE)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_27()) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    }
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_12()) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_34()) return true;
    if (jj_3R_24()) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_24()) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(OUTPUT)) return true;
    if (jj_scan_token(BRACKETOPEN)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(BRACKETCLOSE)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_31()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(SIMPLECHAR)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(BRACKETOPEN)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(BRACKETCLOSE)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public LexicoTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2e,0x2e,0x40000000,0x2e,0x40000000,0x40000,0x2e,0xa0110750,0xa0110750,0xa0010600,0x80,0xa0010600,0x40000,0xfc00000,0xfc00000,0x1800,0x1800,0xe000,0xe000,0x80000400,0x80010600,0x40000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x7,0x7,0x0,0x7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[17];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Lexico(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lexico(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Lexico(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Lexico(LexicoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LexicoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 17; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

        }
