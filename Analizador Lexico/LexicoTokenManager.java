/* Generated By:JavaCC: Do not edit this line. LexicoTokenManager.java */

/** Token Manager. */
public class LexicoTokenManager implements LexicoConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 26;
            return -1;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 27;
            return -1;
         }
         if ((active0 & 0x7feL) != 0L)
         {
            jjmatchedKind = 31;
            return 16;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 28;
            return -1;
         }
         return -1;
      case 1:
         if ((active0 & 0x400000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 26;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x40L) != 0L)
            return 16;
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 27;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 28;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x7beL) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 1;
            return 16;
         }
         return -1;
      case 2:
         if ((active0 & 0x7bcL) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
            return 16;
         }
         if ((active0 & 0x2L) != 0L)
            return 16;
         return -1;
      case 3:
         if ((active0 & 0xa8L) != 0L)
            return 16;
         if ((active0 & 0x714L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 3;
            return 16;
         }
         return -1;
      case 4:
         if ((active0 & 0x304L) != 0L)
            return 16;
         if ((active0 & 0x410L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 4;
            return 16;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 62:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x8L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x4L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x242L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x100L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10L);
      case 102:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 6, 16);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x108L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x84L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x202L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x120L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 116:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 1, 16);
         return jjMoveStringLiteralDfa3_0(active0, 0x410L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4L);
      case 100:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 5, 16);
         break;
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 16);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 114:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 3, 16);
         break;
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x210L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 16);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x10L);
      case 116:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 2, 16);
         else if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 16);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 4, 16);
         break;
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 44;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff400000000000L & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(30);
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 14)
                        kind = 14;
                     jjstateSet[jjnewStateCnt++] = 32;
                  }
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 44)
                  {
                     if (kind > 30)
                        kind = 30;
                  }
                  else if (curChar == 59)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  else if (curChar == 41)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 16)
                        kind = 16;
                  }
                  else if (curChar == 37)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  else if (curChar == 43)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddStates(0, 6);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(28);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 1:
                  if (curChar == 45 && kind > 12)
                     kind = 12;
                  break;
               case 2:
                  if (curChar == 42 && kind > 13)
                     kind = 13;
                  break;
               case 3:
                  if (curChar == 37 && kind > 15)
                     kind = 15;
                  break;
               case 4:
                  if (curChar == 40 && kind > 16)
                     kind = 16;
                  break;
               case 5:
                  if (curChar == 41 && kind > 17)
                     kind = 17;
                  break;
               case 10:
                  if (curChar == 60 && kind > 26)
                     kind = 26;
                  break;
               case 11:
                  if (curChar == 62 && kind > 27)
                     kind = 27;
                  break;
               case 12:
                  if (curChar == 61 && kind > 28)
                     kind = 28;
                  break;
               case 13:
                  if (curChar == 59 && kind > 29)
                     kind = 29;
                  break;
               case 14:
                  if (curChar == 44 && kind > 30)
                     kind = 30;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 17:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if (curChar == 39 && kind > 34)
                     kind = 34;
                  break;
               case 20:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 21:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if (curChar == 42)
                     jjCheckNAddStates(7, 9);
                  break;
               case 23:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 22);
                  break;
               case 24:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(24, 22);
                  break;
               case 25:
                  if (curChar == 47 && kind > 35)
                     kind = 35;
                  break;
               case 26:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 27:
                  if (curChar == 46)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(28);
                  break;
               case 29:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if (curChar != 47)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if (curChar != 47)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(33);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddStates(0, 6);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(35);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 37:
                  if (curChar == 46)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(38);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 40:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if (curChar == 46 && kind > 43)
                     kind = 43;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(16);
                  }
                  else if (curChar == 125)
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  else if (curChar == 123)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  else if (curChar == 93)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 91)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  break;
               case 6:
                  if (curChar == 91 && kind > 18)
                     kind = 18;
                  break;
               case 7:
                  if (curChar == 93 && kind > 19)
                     kind = 19;
                  break;
               case 8:
                  if (curChar == 123 && kind > 20)
                     kind = 20;
                  break;
               case 9:
                  if (curChar == 125 && kind > 21)
                     kind = 21;
                  break;
               case 15:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(16);
                  break;
               case 18:
                  jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 23:
               case 24:
                  jjCheckNAddTwoStates(24, 22);
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 33:
                  if (kind > 36)
                     kind = 36;
                  jjstateSet[jjnewStateCnt++] = 33;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 23:
               case 24:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(24, 22);
                  break;
               case 33:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjstateSet[jjnewStateCnt++] = 33;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 44 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   35, 36, 37, 39, 40, 42, 43, 23, 22, 25, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\151\156\164", "\146\154\157\141\164", "\143\150\141\162", 
"\162\145\164\165\162\156", "\166\157\151\144", "\151\146", "\145\154\163\145", "\167\150\151\154\145", 
"\151\156\160\165\164", "\157\165\164\160\165\164", null, null, null, null, null, null, null, null, 
null, null, null, "\74\75", "\76\75", "\75\75", "\41\75", null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x7ffffffffL, 
};
static final long[] jjtoSkip = {
   0x3ff800000000L, 
};
static final long[] jjtoSpecial = {
   0x3e0000000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[44];
private final int[] jjstateSet = new int[88];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
/** Constructor. */
public LexicoTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public LexicoTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 44; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   tokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 45)
   {
      jjmatchedKind = 45;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
            SkipLexicalActions(matchedToken);
         }
         else 
            SkipLexicalActions(null);
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 41 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                 System.out.println("(Error) Demasiados puntos en numero decimal en la linea:" + matchedToken.beginLine );
         break;
      case 42 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                 System.out.println( "(Error) Error de escritura en numero decimal en la linea:" + matchedToken.beginLine );
         break;
      case 43 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                 System.out.println("(Error) Error de escritura en numero decimal en la linea:" + matchedToken.beginLine );
         break;
      case 44 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                 System.out.println("(Error) Identificador invalido en la linea:" + matchedToken.beginLine );
         break;
      case 45 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
               System.out.println( "(Error) Token desconocido en la linea:" + matchedToken.beginLine );
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[1]);
        lengthOfMatch = jjstrLiteralImages[1].length();
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion int: " + image );
         break;
      case 2 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[2]);
        lengthOfMatch = jjstrLiteralImages[2].length();
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion float: " + image );
         break;
      case 3 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[3]);
        lengthOfMatch = jjstrLiteralImages[3].length();
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion char: " + image );
         break;
      case 4 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[4]);
        lengthOfMatch = jjstrLiteralImages[4].length();
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion return: " + image );
         break;
      case 5 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[5]);
        lengthOfMatch = jjstrLiteralImages[5].length();
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion void: " + image );
         break;
      case 6 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[6]);
        lengthOfMatch = jjstrLiteralImages[6].length();
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion if: " + image );
         break;
      case 7 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion else: " + image );
         break;
      case 8 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Declaracion while: " + image );
         break;
      case 9 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Sentencia input: " + image );
         break;
      case 10 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Sentencia output: " + image );
         break;
      case 11 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                 System.out.println( "No. linea: " + matchedToken.beginLine + " Operador suma: " + image );
         break;
      case 12 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                 System.out.println( "No. linea: " + matchedToken.beginLine + " Operador resta: " + image );
         break;
      case 13 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                 System.out.println( "No. linea: " + matchedToken.beginLine + " Operador multiplicacion: " + image );
         break;
      case 14 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                 System.out.println( "No. linea: " + matchedToken.beginLine + " Operador division: " + image );
         break;
      case 15 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Operador modulo: " + image );
         break;
      case 16 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Parentesis incial: " + image );
         break;
      case 17 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Parentesis final: " + image );
         break;
      case 18 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Corchete incial: " + image );
         break;
      case 19 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Corchete final: " + image );
         break;
      case 20 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Llave incial: " + image );
         break;
      case 21 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Llave final: " + image );
         break;
      case 22 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
                 System.out.println( "No. linea: " + matchedToken.beginLine + " Operador menor o igual: " + image );
         break;
      case 23 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
                 System.out.println( "No. linea: " + matchedToken.beginLine + " Operador mayor o igual: " + image );
         break;
      case 24 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
                 System.out.println( "No. linea: " + matchedToken.beginLine + " Operador igual igual: " + image );
         break;
      case 25 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
                 System.out.println( "No. linea: " + matchedToken.beginLine + " Operador desigualdad: " + image );
         break;
      case 26 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Operador menor que: " + image );
         break;
      case 27 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Operador mayor que: " + image );
         break;
      case 28 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                 System.out.println( "No. linea: " + matchedToken.beginLine + " Operador igual: " + image );
         break;
      case 29 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Punto y Coma: " + image );
         break;
      case 30 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Coma: " + image );
         break;
      case 31 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Identificador: " + image );
         break;
      case 32 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Numero entero: " + image );
         break;
      case 33 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Numero real: " + image );
         break;
      case 34 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println( "No. linea: " + matchedToken.beginLine + " Caracter tipo Char: " + image );
         break;
      default : 
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
