PARSER_BEGIN (Lexico)

	import java.util.*;

	public class Lexico {
		public static void main (String[] args) throws ParseException {
			Lexico anLex = new Lexico(System.in);
			//anLex.analizar();
			anLex.sintactico();

			System.out.println("\nAnalisis terminado!");
		}
	}

PARSER_END (Lexico)

TOKEN:
{
    <SUM : ["+"]>
    |
    <SUB : ["-"]>
    |
    <MULT : ["*"]>
    |
    <PAREOP : ["("]>
    |
    <PARECL : [")"]>
    |
    <NUMENT: ["0"-"9"](["0"-"9"])*>
    |
    <EPSILON: "">
}

SKIP:
	{
		<"/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/">
		|
		<["/"]["/"](~["\n"])*>
		|
		" " | "\t" | "\n" | "\r"
	}

void sintactico() : {Integer valor;}
{
    (valor = exp()) + <EOF>
    {System.out.println("Valor :" + valor);}
}

Integer exp() :
{
    Integer expVal, termVal, exprimeVal;
}

{
    termVal = term()
    exprimeVal = exprime()

    {if (exprimeVal == null){
        expVal = termVal;
        return expVal;
    } else {
        return (termVal + exprimeVal);
    }
    }
}

Integer exprime() : {Integer termVal, exprimeVal;}
{
    LOOKAHEAD(2) (<SUM> termVal = term() exprimeVal = exprime())
    {if (exprimeVal == null){
        exprimeVal = termVal;
        return exprimeVal;
    } else {
        return (termVal + exprimeVal);
    }}
    | 
    LOOKAHEAD(2) (<SUB> termVal = term() exprimeVal = exprime())
    {if (exprimeVal == null){
        exprimeVal = termVal;
        return exprimeVal;
    } else {
        return (-1*(termVal + exprimeVal));
    }}
    |
    LOOKAHEAD(2) (<EPSILON>)
}

Integer term() : {Integer factorVal, termprimeVal, termVal;}
{
    factorVal = factor() termprimeVal = termprime()
    {if (termprimeVal == null){
        termVal = factorVal;
        return termVal;
    } else {
        return (factorVal * termprimeVal);
    }}
}

Integer termprime() :
{
    Integer factorVal = null;
    Integer termprime2Val = null;
}
{
    (LOOKAHEAD(2) <MULT> factorVal = factor() termprime2Val = termprime())*
    {
        if(termprime2Val == null) 
        {
            return factorVal;
        }
        else {
            return factorVal * termprime2Val; 
        }
    }
}

Integer factor() :
{
    Integer factorVal = 0;
}
{
    <PAREOP> factorVal = exp() <PARECL>
    {return factorVal;}
    |
    <NUMENT>
    {factorVal = Integer.parseInt(token.image); return factorVal;}
}