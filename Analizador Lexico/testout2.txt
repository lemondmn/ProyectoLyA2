Call:   sintactico
  Call:   program
    Call:   declarationList
      Call:   declaration
        Call:   varDeclaration(LOOKING AHEAD...)
          Call:   typeSpecifier(LOOKING AHEAD...)
No. linea: 4 Declaracion int: int
            Visited token: <"int" at line 4 column 1>; Expected token: <"int">
          Return: typeSpecifier(LOOKAHEAD SUCCEEDED)
No. linea: 4 Identificador: x
          Visited token: <<ID>: "x" at line 4 column 5>; Expected token: <<ID>>
          Call:   varDeclarationPrime(LOOKING AHEAD...)
No. linea: 4 Corchete incial: [
            Visited token: <<SQUAREBRACKETOPEN>: "[" at line 4 column 6>; Expected token: <<SEMICOLON>>
            Visited token: <<SQUAREBRACKETOPEN>: "[" at line 4 column 6>; Expected token: <<SQUAREBRACKETOPEN>>
            Call:   varDeclaration
              Call:   typeSpecifier
                Consumed token: <"int" at line 4 column 1>
              Return: typeSpecifier
              Consumed token: <<ID>: "x" at line 4 column 5>
              Call:   varDeclarationPrime
                Visited token: <<SQUAREBRACKETOPEN>: "[" at line 4 column 6>; Expected token: <<SQUAREBRACKETOPEN>>
                Call:   var(LOOKING AHEAD...)
No. linea: 4 Identificador: low
                  Visited token: <<ID>: "low" at line 4 column 7>; Expected token: <<ID>>
                  Consumed token: <<SQUAREBRACKETOPEN>: "[" at line 4 column 6>
                  Call:   var
                    Consumed token: <<ID>: "low" at line 4 column 7>
                    Call:   varPrime
No. linea: 4 Corchete final: ]
                    Return: varPrime
                  Return: var
                  Consumed token: <<SQUAREBRACKETCLOSE>: "]" at line 4 column 10>
No. linea: 4 Punto y Coma: ;
                  Consumed token: <<SEMICOLON>: ";" at line 4 column 11>
                Return: varDeclarationPrime
              Return: varDeclaration
            Return: declaration
            Call:   declarationListPrime
No. linea: 6 Declaracion int: int
              Call:   declaration
                Call:   varDeclaration(LOOKING AHEAD...)
                  Call:   typeSpecifier(LOOKING AHEAD...)
                    Visited token: <"int" at line 6 column 1>; Expected token: <"int">
                  Return: typeSpecifier(LOOKAHEAD SUCCEEDED)
No. linea: 6 Identificador: minloc
                  Visited token: <<ID>: "minloc" at line 6 column 5>; Expected token: <<ID>>
                  Call:   varDeclarationPrime(LOOKING AHEAD...)
No. linea: 6 Parentesis incial: (
                    Visited token: <<BRACKETOPEN>: "(" at line 6 column 11>; Expected token: <<SEMICOLON>>
                    Visited token: <<BRACKETOPEN>: "(" at line 6 column 11>; Expected token: <<SQUAREBRACKETOPEN>>
                    Visited token: <<BRACKETOPEN>: "(" at line 6 column 11>; Expected token: <<SQUAREBRACKETOPEN>>
                  Return: varDeclarationPrime(LOOKAHEAD FAILED)
                Return: varDeclaration(LOOKAHEAD FAILED)
                Call:   funDeclaration(LOOKING AHEAD...)
                  Call:   typeSpecifier(LOOKING AHEAD...)
                    Visited token: <"int" at line 6 column 1>; Expected token: <"int">
                  Return: typeSpecifier(LOOKAHEAD SUCCEEDED)
                  Visited token: <<ID>: "minloc" at line 6 column 5>; Expected token: <<ID>>
                  Visited token: <<BRACKETOPEN>: "(" at line 6 column 11>; Expected token: <<BRACKETOPEN>>
                  Call:   funDeclaration
                    Call:   typeSpecifier
                      Consumed token: <"int" at line 6 column 1>
                    Return: typeSpecifier
                    Consumed token: <<ID>: "minloc" at line 6 column 5>
                    Consumed token: <<BRACKETOPEN>: "(" at line 6 column 11>
                    Call:   params
                      Call:   paramList(LOOKING AHEAD...)
                        Call:   param(LOOKING AHEAD...)
                          Call:   typeSpecifier(LOOKING AHEAD...)
No. linea: 6 Declaracion int: int
                            Visited token: <"int" at line 6 column 12>; Expected token: <"int">
                          Return: typeSpecifier(LOOKAHEAD SUCCEEDED)
No. linea: 6 Identificador: a
                          Visited token: <<ID>: "a" at line 6 column 16>; Expected token: <<ID>>
                          Call:   paramList
                            Call:   param
                              Call:   typeSpecifier
                                Consumed token: <"int" at line 6 column 12>
                              Return: typeSpecifier
                              Consumed token: <<ID>: "a" at line 6 column 16>
                              Call:   paramPrime
No. linea: 6 Corchete incial: [
                                Consumed token: <<SQUAREBRACKETOPEN>: "[" at line 6 column 17>
No. linea: 6 Corchete final: ]
                                Consumed token: <<SQUAREBRACKETCLOSE>: "]" at line 6 column 18>
No. linea: 6 Coma: ,
                              Return: paramPrime
                            Return: param
                            Call:   paramListPrime
                              Consumed token: <<COMMA>: "," at line 6 column 19>
                              Call:   param
                                Call:   typeSpecifier
No. linea: 6 Declaracion int: int
                                  Consumed token: <"int" at line 6 column 21>
                                Return: typeSpecifier
No. linea: 6 Identificador: low
                                Consumed token: <<ID>: "low" at line 6 column 25>
                                Call:   paramPrime
No. linea: 6 Coma: ,
                                Return: paramPrime
                              Return: param
                              Call:   paramListPrime
                                Consumed token: <<COMMA>: "," at line 6 column 28>
                                Call:   param
                                  Call:   typeSpecifier
No. linea: 6 Declaracion int: int
                                    Consumed token: <"int" at line 6 column 30>
                                  Return: typeSpecifier
No. linea: 6 Identificador: high
                                  Consumed token: <<ID>: "high" at line 6 column 34>
                                  Call:   paramPrime
No. linea: 6 Parentesis final: )
                                  Return: paramPrime
                                Return: param
                                Call:   paramListPrime
                                Return: paramListPrime
                              Return: paramListPrime
                            Return: paramListPrime
                          Return: paramList
                        Return: params
                        Consumed token: <<BRACKETCLOSE>: ")" at line 6 column 38>
                        Call:   compoundStmt
No. linea: 7 Llave incial: {
                          Consumed token: <<CURLYBRACKETOPEN>: "{" at line 7 column 1>
                          Call:   localDeclarations
                            Call:   localDeclarationsPrime
No. linea: 8 Declaracion int: int
                              Call:   varDeclaration
                                Call:   typeSpecifier
                                  Consumed token: <"int" at line 8 column 5>
                                Return: typeSpecifier
No. linea: 8 Identificador: i
                                Consumed token: <<ID>: "i" at line 8 column 9>
                                Call:   varDeclarationPrime
No. linea: 8 Punto y Coma: ;
                                  Consumed token: <<SEMICOLON>: ";" at line 8 column 10>
                                Return: varDeclarationPrime
                              Return: varDeclaration
                              Call:   localDeclarationsPrime
No. linea: 8 Declaracion int: int
                                Call:   varDeclaration
                                  Call:   typeSpecifier
                                    Consumed token: <"int" at line 8 column 12>
                                  Return: typeSpecifier
No. linea: 8 Identificador: x
                                  Consumed token: <<ID>: "x" at line 8 column 16>
                                  Call:   varDeclarationPrime
No. linea: 8 Punto y Coma: ;
                                    Consumed token: <<SEMICOLON>: ";" at line 8 column 17>
                                  Return: varDeclarationPrime
                                Return: varDeclaration
                                Call:   localDeclarationsPrime
No. linea: 8 Declaracion int: int
                                  Call:   varDeclaration
                                    Call:   typeSpecifier
                                      Consumed token: <"int" at line 8 column 19>
                                    Return: typeSpecifier
No. linea: 8 Identificador: k
                                    Consumed token: <<ID>: "k" at line 8 column 23>
                                    Call:   varDeclarationPrime
No. linea: 8 Punto y Coma: ;
                                      Consumed token: <<SEMICOLON>: ";" at line 8 column 24>
                                    Return: varDeclarationPrime
                                  Return: varDeclaration
                                  Call:   localDeclarationsPrime
No. linea: 10 Identificador: k
                                  Return: localDeclarationsPrime
                                Return: localDeclarationsPrime
                              Return: localDeclarationsPrime
                            Return: localDeclarationsPrime
                          Return: localDeclarations
                          Call:   statementList
                            Call:   statementListPrime
                              Call:   statement
                                Call:   expressionStmt
                                  Call:   expression
                                    Call:   var(LOOKING AHEAD...)
                                      Visited token: <<ID>: "k" at line 10 column 5>; Expected token: <<ID>>
                                      Call:   varPrime(LOOKING AHEAD...)
No. linea: 10 Operador igual: =
                                        Visited token: <<EQUIVALENCE>: "=" at line 10 column 7>; Expected token: <<SQUAREBRACKETOPEN>>
                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                    Return: var(LOOKAHEAD SUCCEEDED)
                                    Visited token: <<EQUIVALENCE>: "=" at line 10 column 7>; Expected token: <<EQUIVALENCE>>
                                    Call:   expression(LOOKING AHEAD...)
                                      Call:   var(LOOKING AHEAD...)
No. linea: 10 Identificador: low
                                        Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <<ID>>
                                        Call:   varPrime(LOOKING AHEAD...)
No. linea: 10 Punto y Coma: ;
                                          Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                      Return: var(LOOKAHEAD SUCCEEDED)
                                      Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<EQUIVALENCE>>
                                      Call:   simpleExpression(LOOKING AHEAD...)
                                        Call:   additiveExpression(LOOKING AHEAD...)
                                          Call:   term(LOOKING AHEAD...)
                                            Call:   factor(LOOKING AHEAD...)
                                              Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <<BRACKETOPEN>>
                                              Call:   call(LOOKING AHEAD...)
                                                Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <<ID>>
                                                Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<BRACKETOPEN>>
                                                Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <"output">
                                              Return: call(LOOKAHEAD FAILED)
                                              Call:   var(LOOKING AHEAD...)
                                                Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <<ID>>
                                                Call:   varPrime(LOOKING AHEAD...)
                                                  Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                              Return: var(LOOKAHEAD SUCCEEDED)
                                            Return: factor(LOOKAHEAD SUCCEEDED)
                                            Call:   termPrime(LOOKING AHEAD...)
                                              Call:   mulop(LOOKING AHEAD...)
                                                Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<MULT>>
                                                Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<DIV>>
                                                Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<MOD>>
                                              Return: mulop(LOOKAHEAD FAILED)
                                            Return: termPrime(LOOKAHEAD SUCCEEDED)
                                          Return: term(LOOKAHEAD SUCCEEDED)
                                          Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                            Call:   addop(LOOKING AHEAD...)
                                              Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<SUM>>
                                              Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<SUB>>
                                            Return: addop(LOOKAHEAD FAILED)
                                          Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                        Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                        Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                          Call:   relop(LOOKING AHEAD...)
                                            Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <"==">
                                            Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <"<=">
                                            Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <">=">
                                            Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<ANGLEBRACKETOPEN>>
                                            Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<ANGLEBRACKETCLOSE>>
                                            Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <"!=">
                                          Return: relop(LOOKAHEAD FAILED)
                                        Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                      Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                    Return: expression(LOOKAHEAD SUCCEEDED)
                                    Call:   var
                                      Consumed token: <<ID>: "k" at line 10 column 5>
                                      Call:   varPrime
                                      Return: varPrime
                                    Return: var
                                    Consumed token: <<EQUIVALENCE>: "=" at line 10 column 7>
                                    Call:   expression
                                      Call:   var(LOOKING AHEAD...)
                                        Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <<ID>>
                                        Call:   varPrime(LOOKING AHEAD...)
                                          Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                      Return: var(LOOKAHEAD SUCCEEDED)
                                      Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<EQUIVALENCE>>
                                      Call:   simpleExpression(LOOKING AHEAD...)
                                        Call:   additiveExpression(LOOKING AHEAD...)
                                          Call:   term(LOOKING AHEAD...)
                                            Call:   factor(LOOKING AHEAD...)
                                              Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <<BRACKETOPEN>>
                                              Call:   call(LOOKING AHEAD...)
                                                Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <<ID>>
                                                Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<BRACKETOPEN>>
                                                Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <"output">
                                              Return: call(LOOKAHEAD FAILED)
                                              Call:   var(LOOKING AHEAD...)
                                                Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <<ID>>
                                                Call:   varPrime(LOOKING AHEAD...)
                                                  Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                              Return: var(LOOKAHEAD SUCCEEDED)
                                            Return: factor(LOOKAHEAD SUCCEEDED)
                                            Call:   termPrime(LOOKING AHEAD...)
                                              Call:   mulop(LOOKING AHEAD...)
                                                Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<MULT>>
                                                Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<DIV>>
                                                Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<MOD>>
                                              Return: mulop(LOOKAHEAD FAILED)
                                            Return: termPrime(LOOKAHEAD SUCCEEDED)
                                          Return: term(LOOKAHEAD SUCCEEDED)
                                          Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                            Call:   addop(LOOKING AHEAD...)
                                              Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<SUM>>
                                              Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<SUB>>
                                            Return: addop(LOOKAHEAD FAILED)
                                          Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                        Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                        Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                          Call:   relop(LOOKING AHEAD...)
                                            Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <"==">
                                            Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <"<=">
                                            Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <">=">
                                            Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<ANGLEBRACKETOPEN>>
                                            Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<ANGLEBRACKETCLOSE>>
                                            Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <"!=">
                                          Return: relop(LOOKAHEAD FAILED)
                                        Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                      Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                      Call:   simpleExpression
                                        Call:   additiveExpression
                                          Call:   term
                                            Call:   factor
                                              Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <<BRACKETOPEN>>
                                              Call:   call(LOOKING AHEAD...)
                                                Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <<ID>>
                                                Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<BRACKETOPEN>>
                                                Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <"output">
                                              Return: call(LOOKAHEAD FAILED)
                                              Call:   var(LOOKING AHEAD...)
                                                Visited token: <<ID>: "low" at line 10 column 9>; Expected token: <<ID>>
                                                Call:   varPrime(LOOKING AHEAD...)
                                                  Visited token: <<SEMICOLON>: ";" at line 10 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                              Return: var(LOOKAHEAD SUCCEEDED)
                                              Call:   var
                                                Consumed token: <<ID>: "low" at line 10 column 9>
                                                Call:   varPrime
                                                Return: varPrime
                                              Return: var
                                            Return: factor
                                            Call:   termPrime
                                            Return: termPrime
                                          Return: term
                                          Call:   additiveExpressionPrime
                                          Return: additiveExpressionPrime
                                        Return: additiveExpression
                                        Call:   simpleExpressionPrime
                                        Return: simpleExpressionPrime
                                      Return: simpleExpression
                                    Return: expression
                                  Return: expression
                                  Consumed token: <<SEMICOLON>: ";" at line 10 column 12>
                                Return: expressionStmt
                              Return: statement
                              Call:   statementListPrime
No. linea: 11 Identificador: x
                                Call:   statement
                                  Call:   expressionStmt
                                    Call:   expression
                                      Call:   var(LOOKING AHEAD...)
                                        Visited token: <<ID>: "x" at line 11 column 5>; Expected token: <<ID>>
                                        Call:   varPrime(LOOKING AHEAD...)
No. linea: 11 Operador igual: =
                                          Visited token: <<EQUIVALENCE>: "=" at line 11 column 7>; Expected token: <<SQUAREBRACKETOPEN>>
                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                      Return: var(LOOKAHEAD SUCCEEDED)
                                      Visited token: <<EQUIVALENCE>: "=" at line 11 column 7>; Expected token: <<EQUIVALENCE>>
                                      Call:   expression(LOOKING AHEAD...)
                                        Call:   var(LOOKING AHEAD...)
No. linea: 11 Identificador: a
                                          Visited token: <<ID>: "a" at line 11 column 9>; Expected token: <<ID>>
                                          Call:   varPrime(LOOKING AHEAD...)
No. linea: 11 Corchete incial: [
                                            Visited token: <<SQUAREBRACKETOPEN>: "[" at line 11 column 11>; Expected token: <<SQUAREBRACKETOPEN>>
                                            Call:   expression(LOOKING AHEAD...)
                                              Call:   var(LOOKING AHEAD...)
No. linea: 11 Identificador: low
                                                Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<ID>>
                                                Call:   var
                                                  Consumed token: <<ID>: "x" at line 11 column 5>
                                                  Call:   varPrime
                                                  Return: varPrime
                                                Return: var
                                                Consumed token: <<EQUIVALENCE>: "=" at line 11 column 7>
                                                Call:   expression
                                                  Call:   var(LOOKING AHEAD...)
                                                    Visited token: <<ID>: "a" at line 11 column 9>; Expected token: <<ID>>
                                                    Call:   varPrime(LOOKING AHEAD...)
                                                      Visited token: <<SQUAREBRACKETOPEN>: "[" at line 11 column 11>; Expected token: <<SQUAREBRACKETOPEN>>
                                                      Call:   expression(LOOKING AHEAD...)
                                                        Call:   var(LOOKING AHEAD...)
                                                          Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<ID>>
                                                          Call:   varPrime(LOOKING AHEAD...)
No. linea: 11 Corchete final: ]
                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                          Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                        Return: var(LOOKAHEAD SUCCEEDED)
                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<EQUIVALENCE>>
                                                        Call:   simpleExpression(LOOKING AHEAD...)
                                                          Call:   additiveExpression(LOOKING AHEAD...)
                                                            Call:   term(LOOKING AHEAD...)
                                                              Call:   factor(LOOKING AHEAD...)
                                                                Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<BRACKETOPEN>>
                                                                Call:   call(LOOKING AHEAD...)
                                                                  Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<ID>>
                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<BRACKETOPEN>>
                                                                  Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <"output">
                                                                Return: call(LOOKAHEAD FAILED)
                                                                Call:   var(LOOKING AHEAD...)
                                                                  Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<ID>>
                                                                  Call:   varPrime(LOOKING AHEAD...)
                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                              Return: factor(LOOKAHEAD SUCCEEDED)
                                                              Call:   termPrime(LOOKING AHEAD...)
                                                                Call:   mulop(LOOKING AHEAD...)
                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<MULT>>
                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<DIV>>
                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<MOD>>
                                                                Return: mulop(LOOKAHEAD FAILED)
                                                              Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                            Return: term(LOOKAHEAD SUCCEEDED)
                                                            Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                              Call:   addop(LOOKING AHEAD...)
                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SUM>>
                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SUB>>
                                                              Return: addop(LOOKAHEAD FAILED)
                                                            Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                          Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                          Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                            Call:   relop(LOOKING AHEAD...)
                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <"==">
                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <"<=">
                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <">=">
                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<ANGLEBRACKETOPEN>>
                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <"!=">
                                                            Return: relop(LOOKAHEAD FAILED)
                                                          Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                        Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                      Return: expression(LOOKAHEAD SUCCEEDED)
                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SQUAREBRACKETCLOSE>>
No. linea: 11 Punto y Coma: ;
                                                      Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                  Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <<EQUIVALENCE>>
                                                  Call:   simpleExpression(LOOKING AHEAD...)
                                                    Call:   additiveExpression(LOOKING AHEAD...)
                                                      Call:   term(LOOKING AHEAD...)
                                                        Call:   factor(LOOKING AHEAD...)
                                                          Visited token: <<ID>: "a" at line 11 column 9>; Expected token: <<BRACKETOPEN>>
                                                          Call:   call(LOOKING AHEAD...)
                                                            Visited token: <<ID>: "a" at line 11 column 9>; Expected token: <<ID>>
                                                            Visited token: <<SQUAREBRACKETOPEN>: "[" at line 11 column 11>; Expected token: <<BRACKETOPEN>>
                                                            Visited token: <<ID>: "a" at line 11 column 9>; Expected token: <"output">
                                                          Return: call(LOOKAHEAD FAILED)
                                                          Call:   var(LOOKING AHEAD...)
                                                            Visited token: <<ID>: "a" at line 11 column 9>; Expected token: <<ID>>
                                                            Call:   varPrime(LOOKING AHEAD...)
                                                              Visited token: <<SQUAREBRACKETOPEN>: "[" at line 11 column 11>; Expected token: <<SQUAREBRACKETOPEN>>
                                                              Call:   expression(LOOKING AHEAD...)
                                                                Call:   var(LOOKING AHEAD...)
                                                                  Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<ID>>
                                                                  Call:   varPrime(LOOKING AHEAD...)
                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<EQUIVALENCE>>
                                                                Call:   simpleExpression(LOOKING AHEAD...)
                                                                  Call:   additiveExpression(LOOKING AHEAD...)
                                                                    Call:   term(LOOKING AHEAD...)
                                                                      Call:   factor(LOOKING AHEAD...)
                                                                        Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<BRACKETOPEN>>
                                                                        Call:   call(LOOKING AHEAD...)
                                                                          Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<ID>>
                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<BRACKETOPEN>>
                                                                          Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <"output">
                                                                        Return: call(LOOKAHEAD FAILED)
                                                                        Call:   var(LOOKING AHEAD...)
                                                                          Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<ID>>
                                                                          Call:   varPrime(LOOKING AHEAD...)
                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                          Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                        Return: var(LOOKAHEAD SUCCEEDED)
                                                                      Return: factor(LOOKAHEAD SUCCEEDED)
                                                                      Call:   termPrime(LOOKING AHEAD...)
                                                                        Call:   mulop(LOOKING AHEAD...)
                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<MULT>>
                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<DIV>>
                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<MOD>>
                                                                        Return: mulop(LOOKAHEAD FAILED)
                                                                      Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                    Return: term(LOOKAHEAD SUCCEEDED)
                                                                    Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                      Call:   addop(LOOKING AHEAD...)
                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SUM>>
                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SUB>>
                                                                      Return: addop(LOOKAHEAD FAILED)
                                                                    Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                  Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                  Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                    Call:   relop(LOOKING AHEAD...)
                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <"==">
                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <"<=">
                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <">=">
                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <"!=">
                                                                    Return: relop(LOOKAHEAD FAILED)
                                                                  Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                              Return: expression(LOOKAHEAD SUCCEEDED)
                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SQUAREBRACKETCLOSE>>
                                                              Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                        Return: factor(LOOKAHEAD SUCCEEDED)
                                                        Call:   termPrime(LOOKING AHEAD...)
                                                          Call:   mulop(LOOKING AHEAD...)
                                                            Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <<MULT>>
                                                            Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <<DIV>>
                                                            Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <<MOD>>
                                                          Return: mulop(LOOKAHEAD FAILED)
                                                        Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                      Return: term(LOOKAHEAD SUCCEEDED)
                                                      Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                        Call:   addop(LOOKING AHEAD...)
                                                          Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <<SUM>>
                                                          Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <<SUB>>
                                                        Return: addop(LOOKAHEAD FAILED)
                                                      Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                    Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                    Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                      Call:   relop(LOOKING AHEAD...)
                                                        Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <"==">
                                                        Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <"<=">
                                                        Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <">=">
                                                        Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <<ANGLEBRACKETOPEN>>
                                                        Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                        Visited token: <<SEMICOLON>: ";" at line 11 column 16>; Expected token: <"!=">
                                                      Return: relop(LOOKAHEAD FAILED)
                                                    Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                  Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                  Call:   simpleExpression
                                                    Call:   additiveExpression
                                                      Call:   term
                                                        Call:   factor
                                                          Visited token: <<ID>: "a" at line 11 column 9>; Expected token: <<BRACKETOPEN>>
                                                          Call:   call(LOOKING AHEAD...)
                                                            Visited token: <<ID>: "a" at line 11 column 9>; Expected token: <<ID>>
                                                            Visited token: <<SQUAREBRACKETOPEN>: "[" at line 11 column 11>; Expected token: <<BRACKETOPEN>>
                                                            Visited token: <<ID>: "a" at line 11 column 9>; Expected token: <"output">
                                                          Return: call(LOOKAHEAD FAILED)
                                                          Call:   var(LOOKING AHEAD...)
                                                            Visited token: <<ID>: "a" at line 11 column 9>; Expected token: <<ID>>
                                                            Call:   varPrime(LOOKING AHEAD...)
                                                              Visited token: <<SQUAREBRACKETOPEN>: "[" at line 11 column 11>; Expected token: <<SQUAREBRACKETOPEN>>
                                                              Call:   var
                                                                Consumed token: <<ID>: "a" at line 11 column 9>
                                                                Call:   varPrime
                                                                  Consumed token: <<SQUAREBRACKETOPEN>: "[" at line 11 column 11>
                                                                  Call:   expression
                                                                    Call:   var(LOOKING AHEAD...)
                                                                      Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<ID>>
                                                                      Call:   varPrime(LOOKING AHEAD...)
                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<EQUIVALENCE>>
                                                                    Call:   simpleExpression(LOOKING AHEAD...)
                                                                      Call:   additiveExpression(LOOKING AHEAD...)
                                                                        Call:   term(LOOKING AHEAD...)
                                                                          Call:   factor(LOOKING AHEAD...)
                                                                            Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<BRACKETOPEN>>
                                                                            Call:   call(LOOKING AHEAD...)
                                                                              Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<ID>>
                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<BRACKETOPEN>>
                                                                              Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <"output">
                                                                            Return: call(LOOKAHEAD FAILED)
                                                                            Call:   var(LOOKING AHEAD...)
                                                                              Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<ID>>
                                                                              Call:   varPrime(LOOKING AHEAD...)
                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                          Return: factor(LOOKAHEAD SUCCEEDED)
                                                                          Call:   termPrime(LOOKING AHEAD...)
                                                                            Call:   mulop(LOOKING AHEAD...)
                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<MULT>>
                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<DIV>>
                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<MOD>>
                                                                            Return: mulop(LOOKAHEAD FAILED)
                                                                          Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                        Return: term(LOOKAHEAD SUCCEEDED)
                                                                        Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                          Call:   addop(LOOKING AHEAD...)
                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SUM>>
                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SUB>>
                                                                          Return: addop(LOOKAHEAD FAILED)
                                                                        Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                      Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                      Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                        Call:   relop(LOOKING AHEAD...)
                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <"==">
                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <"<=">
                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <">=">
                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <"!=">
                                                                        Return: relop(LOOKAHEAD FAILED)
                                                                      Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                    Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                    Call:   simpleExpression
                                                                      Call:   additiveExpression
                                                                        Call:   term
                                                                          Call:   factor
                                                                            Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<BRACKETOPEN>>
                                                                            Call:   call(LOOKING AHEAD...)
                                                                              Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<ID>>
                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<BRACKETOPEN>>
                                                                              Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <"output">
                                                                            Return: call(LOOKAHEAD FAILED)
                                                                            Call:   var(LOOKING AHEAD...)
                                                                              Visited token: <<ID>: "low" at line 11 column 12>; Expected token: <<ID>>
                                                                              Call:   varPrime(LOOKING AHEAD...)
                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                            Call:   var
                                                                              Consumed token: <<ID>: "low" at line 11 column 12>
                                                                              Call:   varPrime
                                                                              Return: varPrime
                                                                            Return: var
                                                                          Return: factor
                                                                          Call:   termPrime
                                                                          Return: termPrime
                                                                        Return: term
                                                                        Call:   additiveExpressionPrime
                                                                        Return: additiveExpressionPrime
                                                                      Return: additiveExpression
                                                                      Call:   simpleExpressionPrime
                                                                      Return: simpleExpressionPrime
                                                                    Return: simpleExpression
                                                                  Return: expression
                                                                  Consumed token: <<SQUAREBRACKETCLOSE>: "]" at line 11 column 15>
                                                                Return: varPrime
                                                              Return: var
                                                            Return: factor
                                                            Call:   termPrime
                                                            Return: termPrime
                                                          Return: term
                                                          Call:   additiveExpressionPrime
                                                          Return: additiveExpressionPrime
                                                        Return: additiveExpression
                                                        Call:   simpleExpressionPrime
                                                        Return: simpleExpressionPrime
                                                      Return: simpleExpression
                                                    Return: expression
                                                  Return: expression
                                                  Consumed token: <<SEMICOLON>: ";" at line 11 column 16>
                                                Return: expressionStmt
                                              Return: statement
                                              Call:   statementListPrime
No. linea: 12 Identificador: i
                                                Call:   statement
                                                  Call:   expressionStmt
                                                    Call:   expression
                                                      Call:   var(LOOKING AHEAD...)
                                                        Visited token: <<ID>: "i" at line 12 column 5>; Expected token: <<ID>>
                                                        Call:   varPrime(LOOKING AHEAD...)
No. linea: 12 Operador igual: =
                                                          Visited token: <<EQUIVALENCE>: "=" at line 12 column 7>; Expected token: <<SQUAREBRACKETOPEN>>
                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                      Visited token: <<EQUIVALENCE>: "=" at line 12 column 7>; Expected token: <<EQUIVALENCE>>
                                                      Call:   expression(LOOKING AHEAD...)
                                                        Call:   var(LOOKING AHEAD...)
No. linea: 12 Identificador: low
                                                          Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <<ID>>
                                                          Call:   varPrime(LOOKING AHEAD...)
No. linea: 12 Operador suma: +
                                                            Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<SQUAREBRACKETOPEN>>
                                                          Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                        Return: var(LOOKAHEAD SUCCEEDED)
                                                        Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<EQUIVALENCE>>
                                                        Call:   simpleExpression(LOOKING AHEAD...)
                                                          Call:   additiveExpression(LOOKING AHEAD...)
                                                            Call:   term(LOOKING AHEAD...)
                                                              Call:   factor(LOOKING AHEAD...)
                                                                Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <<BRACKETOPEN>>
                                                                Call:   call(LOOKING AHEAD...)
                                                                  Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <<ID>>
                                                                  Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<BRACKETOPEN>>
                                                                  Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <"output">
                                                                Return: call(LOOKAHEAD FAILED)
                                                                Call:   var(LOOKING AHEAD...)
                                                                  Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <<ID>>
                                                                  Call:   varPrime(LOOKING AHEAD...)
                                                                    Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                              Return: factor(LOOKAHEAD SUCCEEDED)
                                                              Call:   termPrime(LOOKING AHEAD...)
                                                                Call:   mulop(LOOKING AHEAD...)
                                                                  Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<MULT>>
                                                                  Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<DIV>>
                                                                  Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<MOD>>
                                                                Return: mulop(LOOKAHEAD FAILED)
                                                              Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                            Return: term(LOOKAHEAD SUCCEEDED)
                                                            Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                              Call:   addop(LOOKING AHEAD...)
                                                                Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<SUM>>
                                                              Return: addop(LOOKAHEAD SUCCEEDED)
                                                              Call:   term(LOOKING AHEAD...)
                                                                Call:   factor(LOOKING AHEAD...)
No. linea: 12 Numero entero: 1
                                                                  Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <<BRACKETOPEN>>
                                                                  Call:   call(LOOKING AHEAD...)
                                                                    Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <<ID>>
                                                                    Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <"output">
                                                                  Return: call(LOOKAHEAD FAILED)
                                                                  Call:   var(LOOKING AHEAD...)
                                                                    Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <<ID>>
                                                                  Return: var(LOOKAHEAD FAILED)
                                                                  Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <<NUMENT>>
                                                                  Call:   var
                                                                    Consumed token: <<ID>: "i" at line 12 column 5>
                                                                    Call:   varPrime
                                                                    Return: varPrime
                                                                  Return: var
                                                                  Consumed token: <<EQUIVALENCE>: "=" at line 12 column 7>
                                                                  Call:   expression
                                                                    Call:   var(LOOKING AHEAD...)
                                                                      Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <<ID>>
                                                                      Call:   varPrime(LOOKING AHEAD...)
                                                                        Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                    Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<EQUIVALENCE>>
                                                                    Call:   simpleExpression(LOOKING AHEAD...)
                                                                      Call:   additiveExpression(LOOKING AHEAD...)
                                                                        Call:   term(LOOKING AHEAD...)
                                                                          Call:   factor(LOOKING AHEAD...)
                                                                            Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <<BRACKETOPEN>>
                                                                            Call:   call(LOOKING AHEAD...)
                                                                              Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <<ID>>
                                                                              Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<BRACKETOPEN>>
                                                                              Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <"output">
                                                                            Return: call(LOOKAHEAD FAILED)
                                                                            Call:   var(LOOKING AHEAD...)
                                                                              Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <<ID>>
                                                                              Call:   varPrime(LOOKING AHEAD...)
                                                                                Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                          Return: factor(LOOKAHEAD SUCCEEDED)
                                                                          Call:   termPrime(LOOKING AHEAD...)
                                                                            Call:   mulop(LOOKING AHEAD...)
                                                                              Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<MULT>>
                                                                              Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<DIV>>
                                                                              Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<MOD>>
                                                                            Return: mulop(LOOKAHEAD FAILED)
                                                                          Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                        Return: term(LOOKAHEAD SUCCEEDED)
                                                                        Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                          Call:   addop(LOOKING AHEAD...)
                                                                            Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<SUM>>
                                                                          Return: addop(LOOKAHEAD SUCCEEDED)
                                                                          Call:   term(LOOKING AHEAD...)
                                                                            Call:   factor(LOOKING AHEAD...)
                                                                              Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <<BRACKETOPEN>>
                                                                              Call:   call(LOOKING AHEAD...)
                                                                                Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <<ID>>
                                                                                Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <"output">
                                                                              Return: call(LOOKAHEAD FAILED)
                                                                              Call:   var(LOOKING AHEAD...)
                                                                                Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <<ID>>
                                                                              Return: var(LOOKAHEAD FAILED)
                                                                              Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <<NUMENT>>
                                                                            Return: factor(LOOKAHEAD SUCCEEDED)
                                                                            Call:   termPrime(LOOKING AHEAD...)
                                                                              Call:   mulop(LOOKING AHEAD...)
No. linea: 12 Punto y Coma: ;
                                                                                Visited token: <<SEMICOLON>: ";" at line 12 column 16>; Expected token: <<MULT>>
                                                                                Visited token: <<SEMICOLON>: ";" at line 12 column 16>; Expected token: <<DIV>>
                                                                                Visited token: <<SEMICOLON>: ";" at line 12 column 16>; Expected token: <<MOD>>
                                                                              Return: mulop(LOOKAHEAD FAILED)
                                                                            Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                          Return: term(LOOKAHEAD SUCCEEDED)
                                                                          Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                            Call:   addop(LOOKING AHEAD...)
                                                                              Visited token: <<SEMICOLON>: ";" at line 12 column 16>; Expected token: <<SUM>>
                                                                              Visited token: <<SEMICOLON>: ";" at line 12 column 16>; Expected token: <<SUB>>
                                                                            Return: addop(LOOKAHEAD FAILED)
                                                                          Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                        Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                      Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                      Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                        Call:   relop(LOOKING AHEAD...)
                                                                          Visited token: <<SEMICOLON>: ";" at line 12 column 16>; Expected token: <"==">
                                                                          Visited token: <<SEMICOLON>: ";" at line 12 column 16>; Expected token: <"<=">
                                                                          Visited token: <<SEMICOLON>: ";" at line 12 column 16>; Expected token: <">=">
                                                                          Visited token: <<SEMICOLON>: ";" at line 12 column 16>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                          Visited token: <<SEMICOLON>: ";" at line 12 column 16>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                          Visited token: <<SEMICOLON>: ";" at line 12 column 16>; Expected token: <"!=">
                                                                        Return: relop(LOOKAHEAD FAILED)
                                                                      Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                    Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                    Call:   simpleExpression
                                                                      Call:   additiveExpression
                                                                        Call:   term
                                                                          Call:   factor
                                                                            Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <<BRACKETOPEN>>
                                                                            Call:   call(LOOKING AHEAD...)
                                                                              Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <<ID>>
                                                                              Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<BRACKETOPEN>>
                                                                              Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <"output">
                                                                            Return: call(LOOKAHEAD FAILED)
                                                                            Call:   var(LOOKING AHEAD...)
                                                                              Visited token: <<ID>: "low" at line 12 column 9>; Expected token: <<ID>>
                                                                              Call:   varPrime(LOOKING AHEAD...)
                                                                                Visited token: <<SUM>: "+" at line 12 column 13>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                            Call:   var
                                                                              Consumed token: <<ID>: "low" at line 12 column 9>
                                                                              Call:   varPrime
                                                                              Return: varPrime
                                                                            Return: var
                                                                          Return: factor
                                                                          Call:   termPrime
                                                                          Return: termPrime
                                                                        Return: term
                                                                        Call:   additiveExpressionPrime
                                                                          Call:   addop
                                                                            Consumed token: <<SUM>: "+" at line 12 column 13>
                                                                          Return: addop
                                                                          Call:   term
                                                                            Call:   factor
                                                                              Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <<BRACKETOPEN>>
                                                                              Call:   call(LOOKING AHEAD...)
                                                                                Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <<ID>>
                                                                                Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <"output">
                                                                              Return: call(LOOKAHEAD FAILED)
                                                                              Call:   var(LOOKING AHEAD...)
                                                                                Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <<ID>>
                                                                              Return: var(LOOKAHEAD FAILED)
                                                                              Visited token: <<NUMENT>: "1" at line 12 column 15>; Expected token: <<NUMENT>>
                                                                              Consumed token: <<NUMENT>: "1" at line 12 column 15>
                                                                            Return: factor
                                                                            Call:   termPrime
                                                                            Return: termPrime
                                                                          Return: term
                                                                          Call:   additiveExpressionPrime
                                                                          Return: additiveExpressionPrime
                                                                        Return: additiveExpressionPrime
                                                                      Return: additiveExpression
                                                                      Call:   simpleExpressionPrime
                                                                      Return: simpleExpressionPrime
                                                                    Return: simpleExpression
                                                                  Return: expression
                                                                Return: expression
                                                                Consumed token: <<SEMICOLON>: ";" at line 12 column 16>
                                                              Return: expressionStmt
                                                            Return: statement
                                                            Call:   statementListPrime
No. linea: 14 Declaracion while: while
                                                              Call:   statement
                                                                Call:   iterationStmt
                                                                  Consumed token: <"while" at line 14 column 5>
No. linea: 14 Parentesis incial: (
                                                                  Consumed token: <<BRACKETOPEN>: "(" at line 14 column 11>
                                                                  Call:   expression
                                                                    Call:   var(LOOKING AHEAD...)
No. linea: 14 Identificador: i
                                                                      Visited token: <<ID>: "i" at line 14 column 12>; Expected token: <<ID>>
                                                                      Call:   varPrime(LOOKING AHEAD...)
No. linea: 14 Operador menor que: <
                                                                        Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                    Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <<EQUIVALENCE>>
                                                                    Call:   simpleExpression(LOOKING AHEAD...)
                                                                      Call:   additiveExpression(LOOKING AHEAD...)
                                                                        Call:   term(LOOKING AHEAD...)
                                                                          Call:   factor(LOOKING AHEAD...)
                                                                            Visited token: <<ID>: "i" at line 14 column 12>; Expected token: <<BRACKETOPEN>>
                                                                            Call:   call(LOOKING AHEAD...)
                                                                              Visited token: <<ID>: "i" at line 14 column 12>; Expected token: <<ID>>
                                                                              Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <<BRACKETOPEN>>
                                                                              Visited token: <<ID>: "i" at line 14 column 12>; Expected token: <"output">
                                                                            Return: call(LOOKAHEAD FAILED)
                                                                            Call:   var(LOOKING AHEAD...)
                                                                              Visited token: <<ID>: "i" at line 14 column 12>; Expected token: <<ID>>
                                                                              Call:   varPrime(LOOKING AHEAD...)
                                                                                Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                          Return: factor(LOOKAHEAD SUCCEEDED)
                                                                          Call:   termPrime(LOOKING AHEAD...)
                                                                            Call:   mulop(LOOKING AHEAD...)
                                                                              Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <<MULT>>
                                                                              Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <<DIV>>
                                                                              Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <<MOD>>
                                                                            Return: mulop(LOOKAHEAD FAILED)
                                                                          Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                        Return: term(LOOKAHEAD SUCCEEDED)
                                                                        Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                          Call:   addop(LOOKING AHEAD...)
                                                                            Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <<SUM>>
                                                                            Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <<SUB>>
                                                                          Return: addop(LOOKAHEAD FAILED)
                                                                        Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                      Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                      Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                        Call:   relop(LOOKING AHEAD...)
                                                                          Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <"==">
                                                                          Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <"<=">
                                                                          Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <">=">
                                                                          Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                        Return: relop(LOOKAHEAD SUCCEEDED)
                                                                        Call:   additiveExpression(LOOKING AHEAD...)
                                                                          Call:   term(LOOKING AHEAD...)
                                                                            Call:   factor(LOOKING AHEAD...)
No. linea: 14 Identificador: high
                                                                              Visited token: <<ID>: "high" at line 14 column 16>; Expected token: <<BRACKETOPEN>>
                                                                              Call:   call(LOOKING AHEAD...)
                                                                                Visited token: <<ID>: "high" at line 14 column 16>; Expected token: <<ID>>
No. linea: 14 Parentesis final: )
                                                                                Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <<BRACKETOPEN>>
                                                                                Visited token: <<ID>: "high" at line 14 column 16>; Expected token: <"output">
                                                                              Return: call(LOOKAHEAD FAILED)
                                                                              Call:   var(LOOKING AHEAD...)
                                                                                Visited token: <<ID>: "high" at line 14 column 16>; Expected token: <<ID>>
                                                                                Call:   varPrime(LOOKING AHEAD...)
                                                                                  Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                                            Return: factor(LOOKAHEAD SUCCEEDED)
                                                                            Call:   termPrime(LOOKING AHEAD...)
                                                                              Call:   mulop(LOOKING AHEAD...)
                                                                                Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <<MULT>>
                                                                                Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <<DIV>>
                                                                                Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <<MOD>>
                                                                              Return: mulop(LOOKAHEAD FAILED)
                                                                            Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                          Return: term(LOOKAHEAD SUCCEEDED)
                                                                          Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                            Call:   addop(LOOKING AHEAD...)
                                                                              Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <<SUM>>
                                                                              Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <<SUB>>
                                                                            Return: addop(LOOKAHEAD FAILED)
                                                                          Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                        Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                        Call:   relop(LOOKING AHEAD...)
                                                                          Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <"==">
                                                                          Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <"<=">
                                                                          Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <">=">
                                                                          Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                          Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                          Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <"!=">
                                                                        Return: relop(LOOKAHEAD FAILED)
                                                                      Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                    Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                    Call:   simpleExpression
                                                                      Call:   additiveExpression
                                                                        Call:   term
                                                                          Call:   factor
                                                                            Visited token: <<ID>: "i" at line 14 column 12>; Expected token: <<BRACKETOPEN>>
                                                                            Call:   call(LOOKING AHEAD...)
                                                                              Visited token: <<ID>: "i" at line 14 column 12>; Expected token: <<ID>>
                                                                              Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <<BRACKETOPEN>>
                                                                              Visited token: <<ID>: "i" at line 14 column 12>; Expected token: <"output">
                                                                            Return: call(LOOKAHEAD FAILED)
                                                                            Call:   var(LOOKING AHEAD...)
                                                                              Visited token: <<ID>: "i" at line 14 column 12>; Expected token: <<ID>>
                                                                              Call:   varPrime(LOOKING AHEAD...)
                                                                                Visited token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                            Call:   var
                                                                              Consumed token: <<ID>: "i" at line 14 column 12>
                                                                              Call:   varPrime
                                                                              Return: varPrime
                                                                            Return: var
                                                                          Return: factor
                                                                          Call:   termPrime
                                                                          Return: termPrime
                                                                        Return: term
                                                                        Call:   additiveExpressionPrime
                                                                        Return: additiveExpressionPrime
                                                                      Return: additiveExpression
                                                                      Call:   simpleExpressionPrime
                                                                        Call:   relop
                                                                          Consumed token: <<ANGLEBRACKETOPEN>: "<" at line 14 column 14>
                                                                        Return: relop
                                                                        Call:   additiveExpression
                                                                          Call:   term
                                                                            Call:   factor
                                                                              Visited token: <<ID>: "high" at line 14 column 16>; Expected token: <<BRACKETOPEN>>
                                                                              Call:   call(LOOKING AHEAD...)
                                                                                Visited token: <<ID>: "high" at line 14 column 16>; Expected token: <<ID>>
                                                                                Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <<BRACKETOPEN>>
                                                                                Visited token: <<ID>: "high" at line 14 column 16>; Expected token: <"output">
                                                                              Return: call(LOOKAHEAD FAILED)
                                                                              Call:   var(LOOKING AHEAD...)
                                                                                Visited token: <<ID>: "high" at line 14 column 16>; Expected token: <<ID>>
                                                                                Call:   varPrime(LOOKING AHEAD...)
                                                                                  Visited token: <<BRACKETCLOSE>: ")" at line 14 column 20>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                                              Call:   var
                                                                                Consumed token: <<ID>: "high" at line 14 column 16>
                                                                                Call:   varPrime
                                                                                Return: varPrime
                                                                              Return: var
                                                                            Return: factor
                                                                            Call:   termPrime
                                                                            Return: termPrime
                                                                          Return: term
                                                                          Call:   additiveExpressionPrime
                                                                          Return: additiveExpressionPrime
                                                                        Return: additiveExpression
                                                                      Return: simpleExpressionPrime
                                                                    Return: simpleExpression
                                                                  Return: expression
                                                                  Consumed token: <<BRACKETCLOSE>: ")" at line 14 column 20>
                                                                  Call:   statement
No. linea: 15 Llave incial: {
                                                                    Call:   compoundStmt
                                                                      Consumed token: <<CURLYBRACKETOPEN>: "{" at line 15 column 5>
                                                                      Call:   localDeclarations
                                                                        Call:   localDeclarationsPrime
No. linea: 16 Declaracion if: if
                                                                        Return: localDeclarationsPrime
                                                                      Return: localDeclarations
                                                                      Call:   statementList
                                                                        Call:   statementListPrime
                                                                          Call:   statement
                                                                            Call:   selectionStmt
                                                                              Consumed token: <"if" at line 16 column 9>
No. linea: 16 Parentesis incial: (
                                                                              Consumed token: <<BRACKETOPEN>: "(" at line 16 column 12>
                                                                              Call:   expression
                                                                                Call:   var(LOOKING AHEAD...)
No. linea: 16 Identificador: a
                                                                                  Visited token: <<ID>: "a" at line 16 column 13>; Expected token: <<ID>>
                                                                                  Call:   varPrime(LOOKING AHEAD...)
No. linea: 16 Corchete incial: [
                                                                                    Visited token: <<SQUAREBRACKETOPEN>: "[" at line 16 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                    Call:   expression(LOOKING AHEAD...)
                                                                                      Call:   var(LOOKING AHEAD...)
No. linea: 16 Identificador: i
                                                                                        Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<ID>>
                                                                                        Call:   varPrime(LOOKING AHEAD...)
No. linea: 16 Corchete final: ]
                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<EQUIVALENCE>>
                                                                                      Call:   simpleExpression(LOOKING AHEAD...)
                                                                                        Call:   additiveExpression(LOOKING AHEAD...)
                                                                                          Call:   term(LOOKING AHEAD...)
                                                                                            Call:   factor(LOOKING AHEAD...)
                                                                                              Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                              Call:   call(LOOKING AHEAD...)
                                                                                                Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<ID>>
                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <"output">
                                                                                              Return: call(LOOKAHEAD FAILED)
                                                                                              Call:   var(LOOKING AHEAD...)
                                                                                                Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<ID>>
                                                                                                Call:   varPrime(LOOKING AHEAD...)
                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                                                            Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                            Call:   termPrime(LOOKING AHEAD...)
                                                                                              Call:   mulop(LOOKING AHEAD...)
                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<MULT>>
                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<DIV>>
                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<MOD>>
                                                                                              Return: mulop(LOOKAHEAD FAILED)
                                                                                            Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                          Return: term(LOOKAHEAD SUCCEEDED)
                                                                                          Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                            Call:   addop(LOOKING AHEAD...)
                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SUM>>
                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SUB>>
                                                                                            Return: addop(LOOKAHEAD FAILED)
                                                                                          Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                        Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                        Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                          Call:   relop(LOOKING AHEAD...)
                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <"==">
                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <"<=">
                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <">=">
                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <"!=">
                                                                                          Return: relop(LOOKAHEAD FAILED)
                                                                                        Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                      Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                    Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SQUAREBRACKETCLOSE>>
No. linea: 16 Operador menor que: <
                                                                                    Visited token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                                Visited token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>; Expected token: <<EQUIVALENCE>>
                                                                                Call:   simpleExpression(LOOKING AHEAD...)
                                                                                  Call:   additiveExpression(LOOKING AHEAD...)
                                                                                    Call:   term(LOOKING AHEAD...)
                                                                                      Call:   factor(LOOKING AHEAD...)
                                                                                        Visited token: <<ID>: "a" at line 16 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                        Call:   call(LOOKING AHEAD...)
                                                                                          Visited token: <<ID>: "a" at line 16 column 13>; Expected token: <<ID>>
                                                                                          Visited token: <<SQUAREBRACKETOPEN>: "[" at line 16 column 14>; Expected token: <<BRACKETOPEN>>
                                                                                          Visited token: <<ID>: "a" at line 16 column 13>; Expected token: <"output">
                                                                                        Return: call(LOOKAHEAD FAILED)
                                                                                        Call:   var(LOOKING AHEAD...)
                                                                                          Visited token: <<ID>: "a" at line 16 column 13>; Expected token: <<ID>>
                                                                                          Call:   varPrime(LOOKING AHEAD...)
                                                                                            Visited token: <<SQUAREBRACKETOPEN>: "[" at line 16 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                            Call:   expression(LOOKING AHEAD...)
                                                                                              Call:   var(LOOKING AHEAD...)
                                                                                                Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<ID>>
                                                                                                Call:   varPrime(LOOKING AHEAD...)
                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<EQUIVALENCE>>
                                                                                              Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                  Call:   term(LOOKING AHEAD...)
                                                                                                    Call:   factor(LOOKING AHEAD...)
                                                                                                      Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                      Call:   call(LOOKING AHEAD...)
                                                                                                        Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<ID>>
                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                        Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <"output">
                                                                                                      Return: call(LOOKAHEAD FAILED)
                                                                                                      Call:   var(LOOKING AHEAD...)
                                                                                                        Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<ID>>
                                                                                                        Call:   varPrime(LOOKING AHEAD...)
                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                    Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                    Call:   termPrime(LOOKING AHEAD...)
                                                                                                      Call:   mulop(LOOKING AHEAD...)
                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<MULT>>
                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<DIV>>
                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<MOD>>
                                                                                                      Return: mulop(LOOKAHEAD FAILED)
                                                                                                    Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                  Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                  Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                    Call:   addop(LOOKING AHEAD...)
                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SUM>>
                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SUB>>
                                                                                                    Return: addop(LOOKAHEAD FAILED)
                                                                                                  Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                  Call:   relop(LOOKING AHEAD...)
                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <"==">
                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <"<=">
                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <">=">
                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <"!=">
                                                                                                  Return: relop(LOOKAHEAD FAILED)
                                                                                                Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                              Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                            Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SQUAREBRACKETCLOSE>>
                                                                                            Visited token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                          Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                        Return: var(LOOKAHEAD SUCCEEDED)
                                                                                      Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                      Call:   termPrime(LOOKING AHEAD...)
                                                                                        Call:   mulop(LOOKING AHEAD...)
                                                                                          Visited token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>; Expected token: <<MULT>>
                                                                                          Visited token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>; Expected token: <<DIV>>
                                                                                          Visited token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>; Expected token: <<MOD>>
                                                                                        Return: mulop(LOOKAHEAD FAILED)
                                                                                      Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                    Return: term(LOOKAHEAD SUCCEEDED)
                                                                                    Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                      Call:   addop(LOOKING AHEAD...)
                                                                                        Visited token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>; Expected token: <<SUM>>
                                                                                        Visited token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>; Expected token: <<SUB>>
                                                                                      Return: addop(LOOKAHEAD FAILED)
                                                                                    Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                  Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                  Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                    Call:   relop(LOOKING AHEAD...)
                                                                                      Visited token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>; Expected token: <"==">
                                                                                      Visited token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>; Expected token: <"<=">
                                                                                      Visited token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>; Expected token: <">=">
                                                                                      Visited token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                      Call:   simpleExpression
                                                                                        Call:   additiveExpression
                                                                                          Call:   term
                                                                                            Call:   factor
                                                                                              Visited token: <<ID>: "a" at line 16 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                              Call:   call(LOOKING AHEAD...)
                                                                                                Visited token: <<ID>: "a" at line 16 column 13>; Expected token: <<ID>>
                                                                                                Visited token: <<SQUAREBRACKETOPEN>: "[" at line 16 column 14>; Expected token: <<BRACKETOPEN>>
                                                                                                Visited token: <<ID>: "a" at line 16 column 13>; Expected token: <"output">
                                                                                              Return: call(LOOKAHEAD FAILED)
                                                                                              Call:   var(LOOKING AHEAD...)
                                                                                                Visited token: <<ID>: "a" at line 16 column 13>; Expected token: <<ID>>
                                                                                                Call:   varPrime(LOOKING AHEAD...)
                                                                                                  Visited token: <<SQUAREBRACKETOPEN>: "[" at line 16 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                  Call:   var
                                                                                                    Consumed token: <<ID>: "a" at line 16 column 13>
                                                                                                    Call:   varPrime
                                                                                                      Consumed token: <<SQUAREBRACKETOPEN>: "[" at line 16 column 14>
                                                                                                      Call:   expression
                                                                                                        Call:   var(LOOKING AHEAD...)
                                                                                                          Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<ID>>
                                                                                                          Call:   varPrime(LOOKING AHEAD...)
                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                          Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                        Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<EQUIVALENCE>>
                                                                                                        Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                          Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                            Call:   term(LOOKING AHEAD...)
                                                                                                              Call:   factor(LOOKING AHEAD...)
                                                                                                                Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                Call:   call(LOOKING AHEAD...)
                                                                                                                  Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<ID>>
                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                  Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <"output">
                                                                                                                Return: call(LOOKAHEAD FAILED)
                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                  Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<ID>>
                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                              Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                              Call:   termPrime(LOOKING AHEAD...)
                                                                                                                Call:   mulop(LOOKING AHEAD...)
                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<MULT>>
                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<DIV>>
                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<MOD>>
                                                                                                                Return: mulop(LOOKAHEAD FAILED)
                                                                                                              Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                            Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                            Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                              Call:   addop(LOOKING AHEAD...)
                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SUM>>
                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SUB>>
                                                                                                              Return: addop(LOOKAHEAD FAILED)
                                                                                                            Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                          Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                          Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                            Call:   relop(LOOKING AHEAD...)
                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <"==">
                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <"<=">
                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <">=">
                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <"!=">
                                                                                                            Return: relop(LOOKAHEAD FAILED)
                                                                                                          Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                        Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                        Call:   simpleExpression
                                                                                                          Call:   additiveExpression
                                                                                                            Call:   term
                                                                                                              Call:   factor
                                                                                                                Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                Call:   call(LOOKING AHEAD...)
                                                                                                                  Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<ID>>
                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                  Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <"output">
                                                                                                                Return: call(LOOKAHEAD FAILED)
                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                  Visited token: <<ID>: "i" at line 16 column 15>; Expected token: <<ID>>
                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                Call:   var
                                                                                                                  Consumed token: <<ID>: "i" at line 16 column 15>
                                                                                                                  Call:   varPrime
                                                                                                                  Return: varPrime
                                                                                                                Return: var
                                                                                                              Return: factor
                                                                                                              Call:   termPrime
                                                                                                              Return: termPrime
                                                                                                            Return: term
                                                                                                            Call:   additiveExpressionPrime
                                                                                                            Return: additiveExpressionPrime
                                                                                                          Return: additiveExpression
                                                                                                          Call:   simpleExpressionPrime
                                                                                                          Return: simpleExpressionPrime
                                                                                                        Return: simpleExpression
                                                                                                      Return: expression
                                                                                                      Consumed token: <<SQUAREBRACKETCLOSE>: "]" at line 16 column 16>
                                                                                                    Return: varPrime
                                                                                                  Return: var
                                                                                                Return: factor
                                                                                                Call:   termPrime
                                                                                                Return: termPrime
                                                                                              Return: term
                                                                                              Call:   additiveExpressionPrime
                                                                                              Return: additiveExpressionPrime
                                                                                            Return: additiveExpression
                                                                                            Call:   simpleExpressionPrime
                                                                                              Call:   relop
                                                                                                Consumed token: <<ANGLEBRACKETOPEN>: "<" at line 16 column 18>
                                                                                              Return: relop
                                                                                              Call:   additiveExpression
                                                                                                Call:   term
                                                                                                  Call:   factor
No. linea: 16 Identificador: x
                                                                                                    Visited token: <<ID>: "x" at line 16 column 20>; Expected token: <<BRACKETOPEN>>
                                                                                                    Call:   call(LOOKING AHEAD...)
                                                                                                      Visited token: <<ID>: "x" at line 16 column 20>; Expected token: <<ID>>
No. linea: 16 Parentesis final: )
                                                                                                      Visited token: <<BRACKETCLOSE>: ")" at line 16 column 21>; Expected token: <<BRACKETOPEN>>
                                                                                                      Visited token: <<ID>: "x" at line 16 column 20>; Expected token: <"output">
                                                                                                    Return: call(LOOKAHEAD FAILED)
                                                                                                    Call:   var(LOOKING AHEAD...)
                                                                                                      Visited token: <<ID>: "x" at line 16 column 20>; Expected token: <<ID>>
                                                                                                      Call:   varPrime(LOOKING AHEAD...)
                                                                                                        Visited token: <<BRACKETCLOSE>: ")" at line 16 column 21>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                    Call:   var
                                                                                                      Consumed token: <<ID>: "x" at line 16 column 20>
                                                                                                      Call:   varPrime
                                                                                                      Return: varPrime
                                                                                                    Return: var
                                                                                                  Return: factor
                                                                                                  Call:   termPrime
                                                                                                  Return: termPrime
                                                                                                Return: term
                                                                                                Call:   additiveExpressionPrime
                                                                                                Return: additiveExpressionPrime
                                                                                              Return: additiveExpression
                                                                                            Return: simpleExpressionPrime
                                                                                          Return: simpleExpression
                                                                                        Return: expression
                                                                                        Consumed token: <<BRACKETCLOSE>: ")" at line 16 column 21>
                                                                                        Call:   statement
No. linea: 17 Llave incial: {
                                                                                          Call:   compoundStmt
                                                                                            Consumed token: <<CURLYBRACKETOPEN>: "{" at line 17 column 9>
                                                                                            Call:   localDeclarations
                                                                                              Call:   localDeclarationsPrime
No. linea: 18 Identificador: x
                                                                                              Return: localDeclarationsPrime
                                                                                            Return: localDeclarations
                                                                                            Call:   statementList
                                                                                              Call:   statementListPrime
                                                                                                Call:   statement
                                                                                                  Call:   expressionStmt
                                                                                                    Call:   expression
                                                                                                      Call:   var(LOOKING AHEAD...)
                                                                                                        Visited token: <<ID>: "x" at line 18 column 13>; Expected token: <<ID>>
                                                                                                        Call:   varPrime(LOOKING AHEAD...)
No. linea: 18 Operador igual: =
                                                                                                          Visited token: <<EQUIVALENCE>: "=" at line 18 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                      Visited token: <<EQUIVALENCE>: "=" at line 18 column 14>; Expected token: <<EQUIVALENCE>>
                                                                                                      Call:   expression(LOOKING AHEAD...)
                                                                                                        Call:   var(LOOKING AHEAD...)
No. linea: 18 Identificador: a
                                                                                                          Visited token: <<ID>: "a" at line 18 column 15>; Expected token: <<ID>>
                                                                                                          Call:   varPrime(LOOKING AHEAD...)
No. linea: 18 Corchete incial: [
                                                                                                            Visited token: <<SQUAREBRACKETOPEN>: "[" at line 18 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                            Call:   expression(LOOKING AHEAD...)
                                                                                                              Call:   var(LOOKING AHEAD...)
No. linea: 18 Identificador: i
                                                                                                                Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<ID>>
                                                                                                                Call:   var
                                                                                                                  Consumed token: <<ID>: "x" at line 18 column 13>
                                                                                                                  Call:   varPrime
                                                                                                                  Return: varPrime
                                                                                                                Return: var
                                                                                                                Consumed token: <<EQUIVALENCE>: "=" at line 18 column 14>
                                                                                                                Call:   expression
                                                                                                                  Call:   var(LOOKING AHEAD...)
                                                                                                                    Visited token: <<ID>: "a" at line 18 column 15>; Expected token: <<ID>>
                                                                                                                    Call:   varPrime(LOOKING AHEAD...)
                                                                                                                      Visited token: <<SQUAREBRACKETOPEN>: "[" at line 18 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                      Call:   expression(LOOKING AHEAD...)
                                                                                                                        Call:   var(LOOKING AHEAD...)
                                                                                                                          Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<ID>>
                                                                                                                          Call:   varPrime(LOOKING AHEAD...)
No. linea: 18 Corchete final: ]
                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                          Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                        Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<EQUIVALENCE>>
                                                                                                                        Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                          Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                            Call:   term(LOOKING AHEAD...)
                                                                                                                              Call:   factor(LOOKING AHEAD...)
                                                                                                                                Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                Call:   call(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<ID>>
                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<BRACKETOPEN>>
                                                                                                                                  Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <"output">
                                                                                                                                Return: call(LOOKAHEAD FAILED)
                                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<ID>>
                                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                              Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                              Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                Call:   mulop(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<MULT>>
                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<DIV>>
                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<MOD>>
                                                                                                                                Return: mulop(LOOKAHEAD FAILED)
                                                                                                                              Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                            Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                            Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                              Call:   addop(LOOKING AHEAD...)
                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SUM>>
                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SUB>>
                                                                                                                              Return: addop(LOOKAHEAD FAILED)
                                                                                                                            Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                          Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                          Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                            Call:   relop(LOOKING AHEAD...)
                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <"==">
                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <"<=">
                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <">=">
                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <"!=">
                                                                                                                            Return: relop(LOOKAHEAD FAILED)
                                                                                                                          Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                        Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                      Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SQUAREBRACKETCLOSE>>
No. linea: 18 Punto y Coma: ;
                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <<EQUIVALENCE>>
                                                                                                                  Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                    Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                      Call:   term(LOOKING AHEAD...)
                                                                                                                        Call:   factor(LOOKING AHEAD...)
                                                                                                                          Visited token: <<ID>: "a" at line 18 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                          Call:   call(LOOKING AHEAD...)
                                                                                                                            Visited token: <<ID>: "a" at line 18 column 15>; Expected token: <<ID>>
                                                                                                                            Visited token: <<SQUAREBRACKETOPEN>: "[" at line 18 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                            Visited token: <<ID>: "a" at line 18 column 15>; Expected token: <"output">
                                                                                                                          Return: call(LOOKAHEAD FAILED)
                                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                                            Visited token: <<ID>: "a" at line 18 column 15>; Expected token: <<ID>>
                                                                                                                            Call:   varPrime(LOOKING AHEAD...)
                                                                                                                              Visited token: <<SQUAREBRACKETOPEN>: "[" at line 18 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                              Call:   expression(LOOKING AHEAD...)
                                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<ID>>
                                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<EQUIVALENCE>>
                                                                                                                                Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                  Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                    Call:   term(LOOKING AHEAD...)
                                                                                                                                      Call:   factor(LOOKING AHEAD...)
                                                                                                                                        Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                        Call:   call(LOOKING AHEAD...)
                                                                                                                                          Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<ID>>
                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<BRACKETOPEN>>
                                                                                                                                          Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <"output">
                                                                                                                                        Return: call(LOOKAHEAD FAILED)
                                                                                                                                        Call:   var(LOOKING AHEAD...)
                                                                                                                                          Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<ID>>
                                                                                                                                          Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                          Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                        Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                      Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                      Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                        Call:   mulop(LOOKING AHEAD...)
                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<MULT>>
                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<DIV>>
                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<MOD>>
                                                                                                                                        Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                      Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                    Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                    Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                      Call:   addop(LOOKING AHEAD...)
                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SUM>>
                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SUB>>
                                                                                                                                      Return: addop(LOOKAHEAD FAILED)
                                                                                                                                    Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                  Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                  Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                    Call:   relop(LOOKING AHEAD...)
                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <"==">
                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <"<=">
                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <">=">
                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <"!=">
                                                                                                                                    Return: relop(LOOKAHEAD FAILED)
                                                                                                                                  Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                              Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SQUAREBRACKETCLOSE>>
                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                        Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                        Call:   termPrime(LOOKING AHEAD...)
                                                                                                                          Call:   mulop(LOOKING AHEAD...)
                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <<MULT>>
                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <<DIV>>
                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <<MOD>>
                                                                                                                          Return: mulop(LOOKAHEAD FAILED)
                                                                                                                        Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                      Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                      Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                        Call:   addop(LOOKING AHEAD...)
                                                                                                                          Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <<SUM>>
                                                                                                                          Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <<SUB>>
                                                                                                                        Return: addop(LOOKAHEAD FAILED)
                                                                                                                      Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                    Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                    Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                      Call:   relop(LOOKING AHEAD...)
                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <"==">
                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <"<=">
                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <">=">
                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 18 column 19>; Expected token: <"!=">
                                                                                                                      Return: relop(LOOKAHEAD FAILED)
                                                                                                                    Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                  Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                  Call:   simpleExpression
                                                                                                                    Call:   additiveExpression
                                                                                                                      Call:   term
                                                                                                                        Call:   factor
                                                                                                                          Visited token: <<ID>: "a" at line 18 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                          Call:   call(LOOKING AHEAD...)
                                                                                                                            Visited token: <<ID>: "a" at line 18 column 15>; Expected token: <<ID>>
                                                                                                                            Visited token: <<SQUAREBRACKETOPEN>: "[" at line 18 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                            Visited token: <<ID>: "a" at line 18 column 15>; Expected token: <"output">
                                                                                                                          Return: call(LOOKAHEAD FAILED)
                                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                                            Visited token: <<ID>: "a" at line 18 column 15>; Expected token: <<ID>>
                                                                                                                            Call:   varPrime(LOOKING AHEAD...)
                                                                                                                              Visited token: <<SQUAREBRACKETOPEN>: "[" at line 18 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                              Call:   var
                                                                                                                                Consumed token: <<ID>: "a" at line 18 column 15>
                                                                                                                                Call:   varPrime
                                                                                                                                  Consumed token: <<SQUAREBRACKETOPEN>: "[" at line 18 column 16>
                                                                                                                                  Call:   expression
                                                                                                                                    Call:   var(LOOKING AHEAD...)
                                                                                                                                      Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<ID>>
                                                                                                                                      Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<EQUIVALENCE>>
                                                                                                                                    Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                      Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                        Call:   term(LOOKING AHEAD...)
                                                                                                                                          Call:   factor(LOOKING AHEAD...)
                                                                                                                                            Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                            Call:   call(LOOKING AHEAD...)
                                                                                                                                              Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<ID>>
                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<BRACKETOPEN>>
                                                                                                                                              Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <"output">
                                                                                                                                            Return: call(LOOKAHEAD FAILED)
                                                                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                                                                              Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<ID>>
                                                                                                                                              Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                          Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                          Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                            Call:   mulop(LOOKING AHEAD...)
                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<MULT>>
                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<DIV>>
                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<MOD>>
                                                                                                                                            Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                          Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                        Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                        Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                          Call:   addop(LOOKING AHEAD...)
                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SUM>>
                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SUB>>
                                                                                                                                          Return: addop(LOOKAHEAD FAILED)
                                                                                                                                        Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                      Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                      Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                        Call:   relop(LOOKING AHEAD...)
                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <"==">
                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <"<=">
                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <">=">
                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <"!=">
                                                                                                                                        Return: relop(LOOKAHEAD FAILED)
                                                                                                                                      Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                    Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                    Call:   simpleExpression
                                                                                                                                      Call:   additiveExpression
                                                                                                                                        Call:   term
                                                                                                                                          Call:   factor
                                                                                                                                            Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                            Call:   call(LOOKING AHEAD...)
                                                                                                                                              Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<ID>>
                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<BRACKETOPEN>>
                                                                                                                                              Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <"output">
                                                                                                                                            Return: call(LOOKAHEAD FAILED)
                                                                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                                                                              Visited token: <<ID>: "i" at line 18 column 17>; Expected token: <<ID>>
                                                                                                                                              Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                            Call:   var
                                                                                                                                              Consumed token: <<ID>: "i" at line 18 column 17>
                                                                                                                                              Call:   varPrime
                                                                                                                                              Return: varPrime
                                                                                                                                            Return: var
                                                                                                                                          Return: factor
                                                                                                                                          Call:   termPrime
                                                                                                                                          Return: termPrime
                                                                                                                                        Return: term
                                                                                                                                        Call:   additiveExpressionPrime
                                                                                                                                        Return: additiveExpressionPrime
                                                                                                                                      Return: additiveExpression
                                                                                                                                      Call:   simpleExpressionPrime
                                                                                                                                      Return: simpleExpressionPrime
                                                                                                                                    Return: simpleExpression
                                                                                                                                  Return: expression
                                                                                                                                  Consumed token: <<SQUAREBRACKETCLOSE>: "]" at line 18 column 18>
                                                                                                                                Return: varPrime
                                                                                                                              Return: var
                                                                                                                            Return: factor
                                                                                                                            Call:   termPrime
                                                                                                                            Return: termPrime
                                                                                                                          Return: term
                                                                                                                          Call:   additiveExpressionPrime
                                                                                                                          Return: additiveExpressionPrime
                                                                                                                        Return: additiveExpression
                                                                                                                        Call:   simpleExpressionPrime
                                                                                                                        Return: simpleExpressionPrime
                                                                                                                      Return: simpleExpression
                                                                                                                    Return: expression
                                                                                                                  Return: expression
                                                                                                                  Consumed token: <<SEMICOLON>: ";" at line 18 column 19>
                                                                                                                Return: expressionStmt
                                                                                                              Return: statement
                                                                                                              Call:   statementListPrime
No. linea: 19 Identificador: k
                                                                                                                Call:   statement
                                                                                                                  Call:   expressionStmt
                                                                                                                    Call:   expression
                                                                                                                      Call:   var(LOOKING AHEAD...)
                                                                                                                        Visited token: <<ID>: "k" at line 19 column 13>; Expected token: <<ID>>
                                                                                                                        Call:   varPrime(LOOKING AHEAD...)
No. linea: 19 Operador igual: =
                                                                                                                          Visited token: <<EQUIVALENCE>: "=" at line 19 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                      Visited token: <<EQUIVALENCE>: "=" at line 19 column 15>; Expected token: <<EQUIVALENCE>>
                                                                                                                      Call:   expression(LOOKING AHEAD...)
                                                                                                                        Call:   var(LOOKING AHEAD...)
No. linea: 19 Identificador: i
                                                                                                                          Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <<ID>>
                                                                                                                          Call:   varPrime(LOOKING AHEAD...)
No. linea: 19 Punto y Coma: ;
                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                          Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                        Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<EQUIVALENCE>>
                                                                                                                        Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                          Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                            Call:   term(LOOKING AHEAD...)
                                                                                                                              Call:   factor(LOOKING AHEAD...)
                                                                                                                                Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                Call:   call(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <<ID>>
                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<BRACKETOPEN>>
                                                                                                                                  Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <"output">
                                                                                                                                Return: call(LOOKAHEAD FAILED)
                                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <<ID>>
                                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                              Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                              Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                Call:   mulop(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<MULT>>
                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<DIV>>
                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<MOD>>
                                                                                                                                Return: mulop(LOOKAHEAD FAILED)
                                                                                                                              Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                            Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                            Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                              Call:   addop(LOOKING AHEAD...)
                                                                                                                                Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<SUM>>
                                                                                                                                Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<SUB>>
                                                                                                                              Return: addop(LOOKAHEAD FAILED)
                                                                                                                            Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                          Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                          Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                            Call:   relop(LOOKING AHEAD...)
                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <"==">
                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <"<=">
                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <">=">
                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <"!=">
                                                                                                                            Return: relop(LOOKAHEAD FAILED)
                                                                                                                          Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                        Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                      Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                                                      Call:   var
                                                                                                                        Consumed token: <<ID>: "k" at line 19 column 13>
                                                                                                                        Call:   varPrime
                                                                                                                        Return: varPrime
                                                                                                                      Return: var
                                                                                                                      Consumed token: <<EQUIVALENCE>: "=" at line 19 column 15>
                                                                                                                      Call:   expression
                                                                                                                        Call:   var(LOOKING AHEAD...)
                                                                                                                          Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <<ID>>
                                                                                                                          Call:   varPrime(LOOKING AHEAD...)
                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                          Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                        Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<EQUIVALENCE>>
                                                                                                                        Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                          Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                            Call:   term(LOOKING AHEAD...)
                                                                                                                              Call:   factor(LOOKING AHEAD...)
                                                                                                                                Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                Call:   call(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <<ID>>
                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<BRACKETOPEN>>
                                                                                                                                  Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <"output">
                                                                                                                                Return: call(LOOKAHEAD FAILED)
                                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <<ID>>
                                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                              Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                              Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                Call:   mulop(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<MULT>>
                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<DIV>>
                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<MOD>>
                                                                                                                                Return: mulop(LOOKAHEAD FAILED)
                                                                                                                              Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                            Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                            Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                              Call:   addop(LOOKING AHEAD...)
                                                                                                                                Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<SUM>>
                                                                                                                                Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<SUB>>
                                                                                                                              Return: addop(LOOKAHEAD FAILED)
                                                                                                                            Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                          Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                          Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                            Call:   relop(LOOKING AHEAD...)
                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <"==">
                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <"<=">
                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <">=">
                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <"!=">
                                                                                                                            Return: relop(LOOKAHEAD FAILED)
                                                                                                                          Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                        Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                        Call:   simpleExpression
                                                                                                                          Call:   additiveExpression
                                                                                                                            Call:   term
                                                                                                                              Call:   factor
                                                                                                                                Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                Call:   call(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <<ID>>
                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<BRACKETOPEN>>
                                                                                                                                  Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <"output">
                                                                                                                                Return: call(LOOKAHEAD FAILED)
                                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<ID>: "i" at line 19 column 17>; Expected token: <<ID>>
                                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 19 column 18>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                Call:   var
                                                                                                                                  Consumed token: <<ID>: "i" at line 19 column 17>
                                                                                                                                  Call:   varPrime
                                                                                                                                  Return: varPrime
                                                                                                                                Return: var
                                                                                                                              Return: factor
                                                                                                                              Call:   termPrime
                                                                                                                              Return: termPrime
                                                                                                                            Return: term
                                                                                                                            Call:   additiveExpressionPrime
                                                                                                                            Return: additiveExpressionPrime
                                                                                                                          Return: additiveExpression
                                                                                                                          Call:   simpleExpressionPrime
                                                                                                                          Return: simpleExpressionPrime
                                                                                                                        Return: simpleExpression
                                                                                                                      Return: expression
                                                                                                                    Return: expression
                                                                                                                    Consumed token: <<SEMICOLON>: ";" at line 19 column 18>
                                                                                                                  Return: expressionStmt
                                                                                                                Return: statement
                                                                                                                Call:   statementListPrime
No. linea: 20 Llave final: }
                                                                                                                Return: statementListPrime
                                                                                                              Return: statementListPrime
                                                                                                            Return: statementListPrime
                                                                                                          Return: statementList
                                                                                                          Consumed token: <<CURLYBRACKETCLOSE>: "}" at line 20 column 9>
                                                                                                        Return: compoundStmt
                                                                                                      Return: statement
                                                                                                      Call:   selectionStmtPrime
No. linea: 22 Identificador: i
                                                                                                      Return: selectionStmtPrime
                                                                                                    Return: selectionStmt
                                                                                                  Return: statement
                                                                                                  Call:   statementListPrime
                                                                                                    Call:   statement
                                                                                                      Call:   expressionStmt
                                                                                                        Call:   expression
                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                            Visited token: <<ID>: "i" at line 22 column 9>; Expected token: <<ID>>
                                                                                                            Call:   varPrime(LOOKING AHEAD...)
No. linea: 22 Operador igual: =
                                                                                                              Visited token: <<EQUIVALENCE>: "=" at line 22 column 11>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                          Visited token: <<EQUIVALENCE>: "=" at line 22 column 11>; Expected token: <<EQUIVALENCE>>
                                                                                                          Call:   expression(LOOKING AHEAD...)
                                                                                                            Call:   var(LOOKING AHEAD...)
No. linea: 22 Identificador: i
                                                                                                              Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <<ID>>
                                                                                                              Call:   varPrime(LOOKING AHEAD...)
No. linea: 22 Operador suma: +
                                                                                                                Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                            Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<EQUIVALENCE>>
                                                                                                            Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                              Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                Call:   term(LOOKING AHEAD...)
                                                                                                                  Call:   factor(LOOKING AHEAD...)
                                                                                                                    Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                                    Call:   call(LOOKING AHEAD...)
                                                                                                                      Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <<ID>>
                                                                                                                      Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                      Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <"output">
                                                                                                                    Return: call(LOOKAHEAD FAILED)
                                                                                                                    Call:   var(LOOKING AHEAD...)
                                                                                                                      Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <<ID>>
                                                                                                                      Call:   varPrime(LOOKING AHEAD...)
                                                                                                                        Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                  Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                  Call:   termPrime(LOOKING AHEAD...)
                                                                                                                    Call:   mulop(LOOKING AHEAD...)
                                                                                                                      Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<MULT>>
                                                                                                                      Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<DIV>>
                                                                                                                      Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<MOD>>
                                                                                                                    Return: mulop(LOOKAHEAD FAILED)
                                                                                                                  Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                  Call:   addop(LOOKING AHEAD...)
                                                                                                                    Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<SUM>>
                                                                                                                  Return: addop(LOOKAHEAD SUCCEEDED)
                                                                                                                  Call:   term(LOOKING AHEAD...)
                                                                                                                    Call:   factor(LOOKING AHEAD...)
No. linea: 22 Numero entero: 1
                                                                                                                      Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                      Call:   call(LOOKING AHEAD...)
                                                                                                                        Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <<ID>>
                                                                                                                        Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <"output">
                                                                                                                      Return: call(LOOKAHEAD FAILED)
                                                                                                                      Call:   var(LOOKING AHEAD...)
                                                                                                                        Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <<ID>>
                                                                                                                      Return: var(LOOKAHEAD FAILED)
                                                                                                                      Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <<NUMENT>>
                                                                                                                      Call:   var
                                                                                                                        Consumed token: <<ID>: "i" at line 22 column 9>
                                                                                                                        Call:   varPrime
                                                                                                                        Return: varPrime
                                                                                                                      Return: var
                                                                                                                      Consumed token: <<EQUIVALENCE>: "=" at line 22 column 11>
                                                                                                                      Call:   expression
                                                                                                                        Call:   var(LOOKING AHEAD...)
                                                                                                                          Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <<ID>>
                                                                                                                          Call:   varPrime(LOOKING AHEAD...)
                                                                                                                            Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                          Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                        Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                        Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<EQUIVALENCE>>
                                                                                                                        Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                          Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                            Call:   term(LOOKING AHEAD...)
                                                                                                                              Call:   factor(LOOKING AHEAD...)
                                                                                                                                Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                                                Call:   call(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <<ID>>
                                                                                                                                  Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                                  Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <"output">
                                                                                                                                Return: call(LOOKAHEAD FAILED)
                                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <<ID>>
                                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                    Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                              Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                              Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                Call:   mulop(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<MULT>>
                                                                                                                                  Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<DIV>>
                                                                                                                                  Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<MOD>>
                                                                                                                                Return: mulop(LOOKAHEAD FAILED)
                                                                                                                              Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                            Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                            Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                              Call:   addop(LOOKING AHEAD...)
                                                                                                                                Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<SUM>>
                                                                                                                              Return: addop(LOOKAHEAD SUCCEEDED)
                                                                                                                              Call:   term(LOOKING AHEAD...)
                                                                                                                                Call:   factor(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                  Call:   call(LOOKING AHEAD...)
                                                                                                                                    Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <<ID>>
                                                                                                                                    Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <"output">
                                                                                                                                  Return: call(LOOKAHEAD FAILED)
                                                                                                                                  Call:   var(LOOKING AHEAD...)
                                                                                                                                    Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <<ID>>
                                                                                                                                  Return: var(LOOKAHEAD FAILED)
                                                                                                                                  Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <<NUMENT>>
                                                                                                                                Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                  Call:   mulop(LOOKING AHEAD...)
No. linea: 22 Punto y Coma: ;
                                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 22 column 18>; Expected token: <<MULT>>
                                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 22 column 18>; Expected token: <<DIV>>
                                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 22 column 18>; Expected token: <<MOD>>
                                                                                                                                  Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                              Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                              Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                Call:   addop(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 22 column 18>; Expected token: <<SUM>>
                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 22 column 18>; Expected token: <<SUB>>
                                                                                                                                Return: addop(LOOKAHEAD FAILED)
                                                                                                                              Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                            Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                          Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                          Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                            Call:   relop(LOOKING AHEAD...)
                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 22 column 18>; Expected token: <"==">
                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 22 column 18>; Expected token: <"<=">
                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 22 column 18>; Expected token: <">=">
                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 22 column 18>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 22 column 18>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 22 column 18>; Expected token: <"!=">
                                                                                                                            Return: relop(LOOKAHEAD FAILED)
                                                                                                                          Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                        Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                        Call:   simpleExpression
                                                                                                                          Call:   additiveExpression
                                                                                                                            Call:   term
                                                                                                                              Call:   factor
                                                                                                                                Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                                                Call:   call(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <<ID>>
                                                                                                                                  Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                                  Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <"output">
                                                                                                                                Return: call(LOOKAHEAD FAILED)
                                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<ID>: "i" at line 22 column 13>; Expected token: <<ID>>
                                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                    Visited token: <<SUM>: "+" at line 22 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                Call:   var
                                                                                                                                  Consumed token: <<ID>: "i" at line 22 column 13>
                                                                                                                                  Call:   varPrime
                                                                                                                                  Return: varPrime
                                                                                                                                Return: var
                                                                                                                              Return: factor
                                                                                                                              Call:   termPrime
                                                                                                                              Return: termPrime
                                                                                                                            Return: term
                                                                                                                            Call:   additiveExpressionPrime
                                                                                                                              Call:   addop
                                                                                                                                Consumed token: <<SUM>: "+" at line 22 column 15>
                                                                                                                              Return: addop
                                                                                                                              Call:   term
                                                                                                                                Call:   factor
                                                                                                                                  Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                  Call:   call(LOOKING AHEAD...)
                                                                                                                                    Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <<ID>>
                                                                                                                                    Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <"output">
                                                                                                                                  Return: call(LOOKAHEAD FAILED)
                                                                                                                                  Call:   var(LOOKING AHEAD...)
                                                                                                                                    Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <<ID>>
                                                                                                                                  Return: var(LOOKAHEAD FAILED)
                                                                                                                                  Visited token: <<NUMENT>: "1" at line 22 column 17>; Expected token: <<NUMENT>>
                                                                                                                                  Consumed token: <<NUMENT>: "1" at line 22 column 17>
                                                                                                                                Return: factor
                                                                                                                                Call:   termPrime
                                                                                                                                Return: termPrime
                                                                                                                              Return: term
                                                                                                                              Call:   additiveExpressionPrime
                                                                                                                              Return: additiveExpressionPrime
                                                                                                                            Return: additiveExpressionPrime
                                                                                                                          Return: additiveExpression
                                                                                                                          Call:   simpleExpressionPrime
                                                                                                                          Return: simpleExpressionPrime
                                                                                                                        Return: simpleExpression
                                                                                                                      Return: expression
                                                                                                                    Return: expression
                                                                                                                    Consumed token: <<SEMICOLON>: ";" at line 22 column 18>
                                                                                                                  Return: expressionStmt
                                                                                                                Return: statement
                                                                                                                Call:   statementListPrime
No. linea: 23 Llave final: }
                                                                                                                Return: statementListPrime
                                                                                                              Return: statementListPrime
                                                                                                            Return: statementListPrime
                                                                                                          Return: statementList
                                                                                                          Consumed token: <<CURLYBRACKETCLOSE>: "}" at line 23 column 5>
                                                                                                        Return: compoundStmt
                                                                                                      Return: statement
                                                                                                    Return: iterationStmt
                                                                                                  Return: statement
                                                                                                  Call:   statementListPrime
No. linea: 25 Declaracion return: return
                                                                                                    Call:   statement
                                                                                                      Call:   returnStmt
                                                                                                        Consumed token: <"return" at line 25 column 5>
                                                                                                        Call:   returnStmtPrime
No. linea: 25 Identificador: k
                                                                                                          Call:   expression
                                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                                              Visited token: <<ID>: "k" at line 25 column 12>; Expected token: <<ID>>
                                                                                                              Call:   varPrime(LOOKING AHEAD...)
No. linea: 25 Punto y Coma: ;
                                                                                                                Visited token: <<SEMICOLON>: ";" at line 25 column 13>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                            Visited token: <<SEMICOLON>: ";" at line 25 column 13>; Expected token: <<EQUIVALENCE>>
                                                                                                            Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                              Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                Call:   term(LOOKING AHEAD...)
                                                                                                                  Call:   factor(LOOKING AHEAD...)
                                                                                                                    Visited token: <<ID>: "k" at line 25 column 12>; Expected token: <<BRACKETOPEN>>
                                                                                                                    Call:   call(LOOKING AHEAD...)
                                                                                                                      Visited token: <<ID>: "k" at line 25 column 12>; Expected token: <<ID>>
                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 25 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                                      Visited token: <<ID>: "k" at line 25 column 12>; Expected token: <"output">
                                                                                                                    Return: call(LOOKAHEAD FAILED)
                                                                                                                    Call:   var(LOOKING AHEAD...)
                                                                                                                      Visited token: <<ID>: "k" at line 25 column 12>; Expected token: <<ID>>
                                                                                                                      Call:   varPrime(LOOKING AHEAD...)
                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 25 column 13>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                  Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                  Call:   termPrime(LOOKING AHEAD...)
                                                                                                                    Call:   mulop(LOOKING AHEAD...)
                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 25 column 13>; Expected token: <<MULT>>
                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 25 column 13>; Expected token: <<DIV>>
                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 25 column 13>; Expected token: <<MOD>>
                                                                                                                    Return: mulop(LOOKAHEAD FAILED)
                                                                                                                  Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                  Call:   addop(LOOKING AHEAD...)
                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 25 column 13>; Expected token: <<SUM>>
                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 25 column 13>; Expected token: <<SUB>>
                                                                                                                  Return: addop(LOOKAHEAD FAILED)
                                                                                                                Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                              Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                              Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                Call:   relop(LOOKING AHEAD...)
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 25 column 13>; Expected token: <"==">
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 25 column 13>; Expected token: <"<=">
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 25 column 13>; Expected token: <">=">
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 25 column 13>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 25 column 13>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 25 column 13>; Expected token: <"!=">
                                                                                                                Return: relop(LOOKAHEAD FAILED)
                                                                                                              Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                            Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                            Call:   simpleExpression
                                                                                                              Call:   additiveExpression
                                                                                                                Call:   term
                                                                                                                  Call:   factor
                                                                                                                    Visited token: <<ID>: "k" at line 25 column 12>; Expected token: <<BRACKETOPEN>>
                                                                                                                    Call:   call(LOOKING AHEAD...)
                                                                                                                      Visited token: <<ID>: "k" at line 25 column 12>; Expected token: <<ID>>
                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 25 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                                      Visited token: <<ID>: "k" at line 25 column 12>; Expected token: <"output">
                                                                                                                    Return: call(LOOKAHEAD FAILED)
                                                                                                                    Call:   var(LOOKING AHEAD...)
                                                                                                                      Visited token: <<ID>: "k" at line 25 column 12>; Expected token: <<ID>>
                                                                                                                      Call:   varPrime(LOOKING AHEAD...)
                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 25 column 13>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                    Call:   var
                                                                                                                      Consumed token: <<ID>: "k" at line 25 column 12>
                                                                                                                      Call:   varPrime
                                                                                                                      Return: varPrime
                                                                                                                    Return: var
                                                                                                                  Return: factor
                                                                                                                  Call:   termPrime
                                                                                                                  Return: termPrime
                                                                                                                Return: term
                                                                                                                Call:   additiveExpressionPrime
                                                                                                                Return: additiveExpressionPrime
                                                                                                              Return: additiveExpression
                                                                                                              Call:   simpleExpressionPrime
                                                                                                              Return: simpleExpressionPrime
                                                                                                            Return: simpleExpression
                                                                                                          Return: expression
                                                                                                          Consumed token: <<SEMICOLON>: ";" at line 25 column 13>
                                                                                                        Return: returnStmtPrime
                                                                                                      Return: returnStmt
                                                                                                    Return: statement
                                                                                                    Call:   statementListPrime
No. linea: 26 Llave final: }
                                                                                                    Return: statementListPrime
                                                                                                  Return: statementListPrime
                                                                                                Return: statementListPrime
                                                                                              Return: statementListPrime
                                                                                            Return: statementListPrime
                                                                                          Return: statementListPrime
                                                                                        Return: statementList
                                                                                        Consumed token: <<CURLYBRACKETCLOSE>: "}" at line 26 column 1>
                                                                                      Return: compoundStmt
                                                                                    Return: funDeclaration
                                                                                  Return: declaration
                                                                                  Call:   declarationListPrime
No. linea: 29 Declaracion void: void
                                                                                    Call:   declaration
                                                                                      Call:   varDeclaration(LOOKING AHEAD...)
                                                                                        Call:   typeSpecifier(LOOKING AHEAD...)
                                                                                          Visited token: <"void" at line 29 column 1>; Expected token: <"int">
                                                                                          Visited token: <"void" at line 29 column 1>; Expected token: <"float">
                                                                                          Visited token: <"void" at line 29 column 1>; Expected token: <"char">
                                                                                          Visited token: <"void" at line 29 column 1>; Expected token: <"void">
                                                                                        Return: typeSpecifier(LOOKAHEAD SUCCEEDED)
No. linea: 29 Identificador: sort
                                                                                        Visited token: <<ID>: "sort" at line 29 column 6>; Expected token: <<ID>>
                                                                                        Call:   varDeclarationPrime(LOOKING AHEAD...)
No. linea: 29 Parentesis incial: (
                                                                                          Visited token: <<BRACKETOPEN>: "(" at line 29 column 10>; Expected token: <<SEMICOLON>>
                                                                                          Visited token: <<BRACKETOPEN>: "(" at line 29 column 10>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                          Visited token: <<BRACKETOPEN>: "(" at line 29 column 10>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                        Return: varDeclarationPrime(LOOKAHEAD FAILED)
                                                                                      Return: varDeclaration(LOOKAHEAD FAILED)
                                                                                      Call:   funDeclaration(LOOKING AHEAD...)
                                                                                        Call:   typeSpecifier(LOOKING AHEAD...)
                                                                                          Visited token: <"void" at line 29 column 1>; Expected token: <"int">
                                                                                          Visited token: <"void" at line 29 column 1>; Expected token: <"float">
                                                                                          Visited token: <"void" at line 29 column 1>; Expected token: <"char">
                                                                                          Visited token: <"void" at line 29 column 1>; Expected token: <"void">
                                                                                        Return: typeSpecifier(LOOKAHEAD SUCCEEDED)
                                                                                        Visited token: <<ID>: "sort" at line 29 column 6>; Expected token: <<ID>>
                                                                                        Visited token: <<BRACKETOPEN>: "(" at line 29 column 10>; Expected token: <<BRACKETOPEN>>
                                                                                        Call:   funDeclaration
                                                                                          Call:   typeSpecifier
                                                                                            Consumed token: <"void" at line 29 column 1>
                                                                                          Return: typeSpecifier
                                                                                          Consumed token: <<ID>: "sort" at line 29 column 6>
                                                                                          Consumed token: <<BRACKETOPEN>: "(" at line 29 column 10>
                                                                                          Call:   params
                                                                                            Call:   paramList(LOOKING AHEAD...)
                                                                                              Call:   param(LOOKING AHEAD...)
                                                                                                Call:   typeSpecifier(LOOKING AHEAD...)
No. linea: 29 Declaracion int: int
                                                                                                  Visited token: <"int" at line 29 column 11>; Expected token: <"int">
                                                                                                Return: typeSpecifier(LOOKAHEAD SUCCEEDED)
No. linea: 29 Identificador: a
                                                                                                Visited token: <<ID>: "a" at line 29 column 15>; Expected token: <<ID>>
                                                                                                Call:   paramList
                                                                                                  Call:   param
                                                                                                    Call:   typeSpecifier
                                                                                                      Consumed token: <"int" at line 29 column 11>
                                                                                                    Return: typeSpecifier
                                                                                                    Consumed token: <<ID>: "a" at line 29 column 15>
                                                                                                    Call:   paramPrime
No. linea: 29 Corchete incial: [
                                                                                                      Consumed token: <<SQUAREBRACKETOPEN>: "[" at line 29 column 16>
No. linea: 29 Corchete final: ]
                                                                                                      Consumed token: <<SQUAREBRACKETCLOSE>: "]" at line 29 column 17>
No. linea: 29 Coma: ,
                                                                                                    Return: paramPrime
                                                                                                  Return: param
                                                                                                  Call:   paramListPrime
                                                                                                    Consumed token: <<COMMA>: "," at line 29 column 18>
                                                                                                    Call:   param
                                                                                                      Call:   typeSpecifier
No. linea: 29 Declaracion int: int
                                                                                                        Consumed token: <"int" at line 29 column 20>
                                                                                                      Return: typeSpecifier
No. linea: 29 Identificador: low
                                                                                                      Consumed token: <<ID>: "low" at line 29 column 24>
                                                                                                      Call:   paramPrime
No. linea: 29 Coma: ,
                                                                                                      Return: paramPrime
                                                                                                    Return: param
                                                                                                    Call:   paramListPrime
                                                                                                      Consumed token: <<COMMA>: "," at line 29 column 27>
                                                                                                      Call:   param
                                                                                                        Call:   typeSpecifier
No. linea: 29 Declaracion int: int
                                                                                                          Consumed token: <"int" at line 29 column 29>
                                                                                                        Return: typeSpecifier
No. linea: 29 Identificador: high
                                                                                                        Consumed token: <<ID>: "high" at line 29 column 33>
                                                                                                        Call:   paramPrime
No. linea: 29 Parentesis final: )
                                                                                                        Return: paramPrime
                                                                                                      Return: param
                                                                                                      Call:   paramListPrime
                                                                                                      Return: paramListPrime
                                                                                                    Return: paramListPrime
                                                                                                  Return: paramListPrime
                                                                                                Return: paramList
                                                                                              Return: params
                                                                                              Consumed token: <<BRACKETCLOSE>: ")" at line 29 column 37>
                                                                                              Call:   compoundStmt
No. linea: 30 Llave incial: {
                                                                                                Consumed token: <<CURLYBRACKETOPEN>: "{" at line 30 column 1>
                                                                                                Call:   localDeclarations
                                                                                                  Call:   localDeclarationsPrime
No. linea: 31 Declaracion int: int
                                                                                                    Call:   varDeclaration
                                                                                                      Call:   typeSpecifier
                                                                                                        Consumed token: <"int" at line 31 column 5>
                                                                                                      Return: typeSpecifier
No. linea: 31 Identificador: i
                                                                                                      Consumed token: <<ID>: "i" at line 31 column 9>
                                                                                                      Call:   varDeclarationPrime
No. linea: 31 Punto y Coma: ;
                                                                                                        Consumed token: <<SEMICOLON>: ";" at line 31 column 10>
                                                                                                      Return: varDeclarationPrime
                                                                                                    Return: varDeclaration
                                                                                                    Call:   localDeclarationsPrime
No. linea: 32 Declaracion int: int
                                                                                                      Call:   varDeclaration
                                                                                                        Call:   typeSpecifier
                                                                                                          Consumed token: <"int" at line 32 column 5>
                                                                                                        Return: typeSpecifier
No. linea: 32 Identificador: k
                                                                                                        Consumed token: <<ID>: "k" at line 32 column 9>
                                                                                                        Call:   varDeclarationPrime
No. linea: 32 Punto y Coma: ;
                                                                                                          Consumed token: <<SEMICOLON>: ";" at line 32 column 10>
                                                                                                        Return: varDeclarationPrime
                                                                                                      Return: varDeclaration
                                                                                                      Call:   localDeclarationsPrime
No. linea: 34 Identificador: i
                                                                                                      Return: localDeclarationsPrime
                                                                                                    Return: localDeclarationsPrime
                                                                                                  Return: localDeclarationsPrime
                                                                                                Return: localDeclarations
                                                                                                Call:   statementList
                                                                                                  Call:   statementListPrime
                                                                                                    Call:   statement
                                                                                                      Call:   expressionStmt
                                                                                                        Call:   expression
                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                            Visited token: <<ID>: "i" at line 34 column 5>; Expected token: <<ID>>
                                                                                                            Call:   varPrime(LOOKING AHEAD...)
No. linea: 34 Operador igual: =
                                                                                                              Visited token: <<EQUIVALENCE>: "=" at line 34 column 7>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                          Visited token: <<EQUIVALENCE>: "=" at line 34 column 7>; Expected token: <<EQUIVALENCE>>
                                                                                                          Call:   expression(LOOKING AHEAD...)
                                                                                                            Call:   var(LOOKING AHEAD...)
No. linea: 34 Identificador: low
                                                                                                              Visited token: <<ID>: "low" at line 34 column 9>; Expected token: <<ID>>
                                                                                                              Call:   varPrime(LOOKING AHEAD...)
No. linea: 34 Punto y Coma: ;
                                                                                                                Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                            Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <<EQUIVALENCE>>
                                                                                                            Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                              Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                Call:   term(LOOKING AHEAD...)
                                                                                                                  Call:   factor(LOOKING AHEAD...)
                                                                                                                    Visited token: <<ID>: "low" at line 34 column 9>; Expected token: <<BRACKETOPEN>>
                                                                                                                    Call:   call(LOOKING AHEAD...)
                                                                                                                      Visited token: <<ID>: "low" at line 34 column 9>; Expected token: <<ID>>
                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <<BRACKETOPEN>>
                                                                                                                      Visited token: <<ID>: "low" at line 34 column 9>; Expected token: <"output">
                                                                                                                    Return: call(LOOKAHEAD FAILED)
                                                                                                                    Call:   var(LOOKING AHEAD...)
                                                                                                                      Visited token: <<ID>: "low" at line 34 column 9>; Expected token: <<ID>>
                                                                                                                      Call:   varPrime(LOOKING AHEAD...)
                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                  Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                  Call:   termPrime(LOOKING AHEAD...)
                                                                                                                    Call:   mulop(LOOKING AHEAD...)
                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <<MULT>>
                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <<DIV>>
                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <<MOD>>
                                                                                                                    Return: mulop(LOOKAHEAD FAILED)
                                                                                                                  Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                  Call:   addop(LOOKING AHEAD...)
                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <<SUM>>
                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <<SUB>>
                                                                                                                  Return: addop(LOOKAHEAD FAILED)
                                                                                                                Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                              Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                              Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                Call:   relop(LOOKING AHEAD...)
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <"==">
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <"<=">
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <">=">
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <"!=">
                                                                                                                Return: relop(LOOKAHEAD FAILED)
                                                                                                              Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                            Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                          Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                                          Call:   var
                                                                                                            Consumed token: <<ID>: "i" at line 34 column 5>
                                                                                                            Call:   varPrime
                                                                                                            Return: varPrime
                                                                                                          Return: var
                                                                                                          Consumed token: <<EQUIVALENCE>: "=" at line 34 column 7>
                                                                                                          Call:   expression
                                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                                              Visited token: <<ID>: "low" at line 34 column 9>; Expected token: <<ID>>
                                                                                                              Call:   varPrime(LOOKING AHEAD...)
                                                                                                                Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                            Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <<EQUIVALENCE>>
                                                                                                            Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                              Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                Call:   term(LOOKING AHEAD...)
                                                                                                                  Call:   factor(LOOKING AHEAD...)
                                                                                                                    Visited token: <<ID>: "low" at line 34 column 9>; Expected token: <<BRACKETOPEN>>
                                                                                                                    Call:   call(LOOKING AHEAD...)
                                                                                                                      Visited token: <<ID>: "low" at line 34 column 9>; Expected token: <<ID>>
                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <<BRACKETOPEN>>
                                                                                                                      Visited token: <<ID>: "low" at line 34 column 9>; Expected token: <"output">
                                                                                                                    Return: call(LOOKAHEAD FAILED)
                                                                                                                    Call:   var(LOOKING AHEAD...)
                                                                                                                      Visited token: <<ID>: "low" at line 34 column 9>; Expected token: <<ID>>
                                                                                                                      Call:   varPrime(LOOKING AHEAD...)
                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                  Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                  Call:   termPrime(LOOKING AHEAD...)
                                                                                                                    Call:   mulop(LOOKING AHEAD...)
                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <<MULT>>
                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <<DIV>>
                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <<MOD>>
                                                                                                                    Return: mulop(LOOKAHEAD FAILED)
                                                                                                                  Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                  Call:   addop(LOOKING AHEAD...)
                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <<SUM>>
                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <<SUB>>
                                                                                                                  Return: addop(LOOKAHEAD FAILED)
                                                                                                                Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                              Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                              Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                Call:   relop(LOOKING AHEAD...)
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <"==">
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <"<=">
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <">=">
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <"!=">
                                                                                                                Return: relop(LOOKAHEAD FAILED)
                                                                                                              Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                            Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                            Call:   simpleExpression
                                                                                                              Call:   additiveExpression
                                                                                                                Call:   term
                                                                                                                  Call:   factor
                                                                                                                    Visited token: <<ID>: "low" at line 34 column 9>; Expected token: <<BRACKETOPEN>>
                                                                                                                    Call:   call(LOOKING AHEAD...)
                                                                                                                      Visited token: <<ID>: "low" at line 34 column 9>; Expected token: <<ID>>
                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <<BRACKETOPEN>>
                                                                                                                      Visited token: <<ID>: "low" at line 34 column 9>; Expected token: <"output">
                                                                                                                    Return: call(LOOKAHEAD FAILED)
                                                                                                                    Call:   var(LOOKING AHEAD...)
                                                                                                                      Visited token: <<ID>: "low" at line 34 column 9>; Expected token: <<ID>>
                                                                                                                      Call:   varPrime(LOOKING AHEAD...)
                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 34 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                    Call:   var
                                                                                                                      Consumed token: <<ID>: "low" at line 34 column 9>
                                                                                                                      Call:   varPrime
                                                                                                                      Return: varPrime
                                                                                                                    Return: var
                                                                                                                  Return: factor
                                                                                                                  Call:   termPrime
                                                                                                                  Return: termPrime
                                                                                                                Return: term
                                                                                                                Call:   additiveExpressionPrime
                                                                                                                Return: additiveExpressionPrime
                                                                                                              Return: additiveExpression
                                                                                                              Call:   simpleExpressionPrime
                                                                                                              Return: simpleExpressionPrime
                                                                                                            Return: simpleExpression
                                                                                                          Return: expression
                                                                                                        Return: expression
                                                                                                        Consumed token: <<SEMICOLON>: ";" at line 34 column 12>
                                                                                                      Return: expressionStmt
                                                                                                    Return: statement
                                                                                                    Call:   statementListPrime
No. linea: 35 Declaracion while: while
                                                                                                      Call:   statement
                                                                                                        Call:   iterationStmt
                                                                                                          Consumed token: <"while" at line 35 column 5>
No. linea: 35 Parentesis incial: (
                                                                                                          Consumed token: <<BRACKETOPEN>: "(" at line 35 column 11>
                                                                                                          Call:   expression
                                                                                                            Call:   var(LOOKING AHEAD...)
No. linea: 35 Identificador: i
                                                                                                              Visited token: <<ID>: "i" at line 35 column 12>; Expected token: <<ID>>
                                                                                                              Call:   varPrime(LOOKING AHEAD...)
No. linea: 35 Operador menor que: <
                                                                                                                Visited token: <<ANGLEBRACKETOPEN>: "<" at line 35 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                            Visited token: <<ANGLEBRACKETOPEN>: "<" at line 35 column 14>; Expected token: <<EQUIVALENCE>>
                                                                                                            Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                              Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                Call:   term(LOOKING AHEAD...)
                                                                                                                  Call:   factor(LOOKING AHEAD...)
                                                                                                                    Visited token: <<ID>: "i" at line 35 column 12>; Expected token: <<BRACKETOPEN>>
                                                                                                                    Call:   call(LOOKING AHEAD...)
                                                                                                                      Visited token: <<ID>: "i" at line 35 column 12>; Expected token: <<ID>>
                                                                                                                      Visited token: <<ANGLEBRACKETOPEN>: "<" at line 35 column 14>; Expected token: <<BRACKETOPEN>>
                                                                                                                      Visited token: <<ID>: "i" at line 35 column 12>; Expected token: <"output">
                                                                                                                    Return: call(LOOKAHEAD FAILED)
                                                                                                                    Call:   var(LOOKING AHEAD...)
                                                                                                                      Visited token: <<ID>: "i" at line 35 column 12>; Expected token: <<ID>>
                                                                                                                      Call:   varPrime(LOOKING AHEAD...)
                                                                                                                        Visited token: <<ANGLEBRACKETOPEN>: "<" at line 35 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                  Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                  Call:   termPrime(LOOKING AHEAD...)
                                                                                                                    Call:   mulop(LOOKING AHEAD...)
                                                                                                                      Visited token: <<ANGLEBRACKETOPEN>: "<" at line 35 column 14>; Expected token: <<MULT>>
                                                                                                                      Visited token: <<ANGLEBRACKETOPEN>: "<" at line 35 column 14>; Expected token: <<DIV>>
                                                                                                                      Visited token: <<ANGLEBRACKETOPEN>: "<" at line 35 column 14>; Expected token: <<MOD>>
                                                                                                                    Return: mulop(LOOKAHEAD FAILED)
                                                                                                                  Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                  Call:   addop(LOOKING AHEAD...)
                                                                                                                    Visited token: <<ANGLEBRACKETOPEN>: "<" at line 35 column 14>; Expected token: <<SUM>>
                                                                                                                    Visited token: <<ANGLEBRACKETOPEN>: "<" at line 35 column 14>; Expected token: <<SUB>>
                                                                                                                  Return: addop(LOOKAHEAD FAILED)
                                                                                                                Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                              Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                              Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                Call:   relop(LOOKING AHEAD...)
                                                                                                                  Visited token: <<ANGLEBRACKETOPEN>: "<" at line 35 column 14>; Expected token: <"==">
                                                                                                                  Visited token: <<ANGLEBRACKETOPEN>: "<" at line 35 column 14>; Expected token: <"<=">
                                                                                                                  Visited token: <<ANGLEBRACKETOPEN>: "<" at line 35 column 14>; Expected token: <">=">
                                                                                                                  Visited token: <<ANGLEBRACKETOPEN>: "<" at line 35 column 14>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                Return: relop(LOOKAHEAD SUCCEEDED)
                                                                                                                Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                  Call:   term(LOOKING AHEAD...)
                                                                                                                    Call:   factor(LOOKING AHEAD...)
No. linea: 35 Identificador: high
                                                                                                                      Visited token: <<ID>: "high" at line 35 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                      Call:   call(LOOKING AHEAD...)
                                                                                                                        Visited token: <<ID>: "high" at line 35 column 16>; Expected token: <<ID>>
No. linea: 35 Operador resta: -
                                                                                                                        Visited token: <<SUB>: "-" at line 35 column 20>; Expected token: <<BRACKETOPEN>>
                                                                                                                        Visited token: <<ID>: "high" at line 35 column 16>; Expected token: <"output">
                                                                                                                      Return: call(LOOKAHEAD FAILED)
                                                                                                                      Call:   var(LOOKING AHEAD...)
                                                                                                                        Visited token: <<ID>: "high" at line 35 column 16>; Expected token: <<ID>>
                                                                                                                        Call:   varPrime(LOOKING AHEAD...)
                                                                                                                          Visited token: <<SUB>: "-" at line 35 column 20>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                    Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                    Call:   termPrime(LOOKING AHEAD...)
                                                                                                                      Call:   mulop(LOOKING AHEAD...)
                                                                                                                        Visited token: <<SUB>: "-" at line 35 column 20>; Expected token: <<MULT>>
                                                                                                                        Visited token: <<SUB>: "-" at line 35 column 20>; Expected token: <<DIV>>
                                                                                                                        Visited token: <<SUB>: "-" at line 35 column 20>; Expected token: <<MOD>>
                                                                                                                      Return: mulop(LOOKAHEAD FAILED)
                                                                                                                    Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                  Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                  Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                    Call:   addop(LOOKING AHEAD...)
                                                                                                                      Visited token: <<SUB>: "-" at line 35 column 20>; Expected token: <<SUM>>
                                                                                                                      Visited token: <<SUB>: "-" at line 35 column 20>; Expected token: <<SUB>>
                                                                                                                    Return: addop(LOOKAHEAD SUCCEEDED)
                                                                                                                    Call:   term(LOOKING AHEAD...)
                                                                                                                      Call:   factor(LOOKING AHEAD...)
No. linea: 35 Numero entero: 1
                                                                                                                        Visited token: <<NUMENT>: "1" at line 35 column 21>; Expected token: <<BRACKETOPEN>>
                                                                                                                        Call:   call(LOOKING AHEAD...)
                                                                                                                          Visited token: <<NUMENT>: "1" at line 35 column 21>; Expected token: <<ID>>
                                                                                                                          Visited token: <<NUMENT>: "1" at line 35 column 21>; Expected token: <"output">
                                                                                                                        Return: call(LOOKAHEAD FAILED)
                                                                                                                        Call:   var(LOOKING AHEAD...)
                                                                                                                          Visited token: <<NUMENT>: "1" at line 35 column 21>; Expected token: <<ID>>
                                                                                                                        Return: var(LOOKAHEAD FAILED)
                                                                                                                        Visited token: <<NUMENT>: "1" at line 35 column 21>; Expected token: <<NUMENT>>
                                                                                                                        Call:   simpleExpression
                                                                                                                          Call:   additiveExpression
                                                                                                                            Call:   term
                                                                                                                              Call:   factor
                                                                                                                                Visited token: <<ID>: "i" at line 35 column 12>; Expected token: <<BRACKETOPEN>>
                                                                                                                                Call:   call(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<ID>: "i" at line 35 column 12>; Expected token: <<ID>>
                                                                                                                                  Visited token: <<ANGLEBRACKETOPEN>: "<" at line 35 column 14>; Expected token: <<BRACKETOPEN>>
                                                                                                                                  Visited token: <<ID>: "i" at line 35 column 12>; Expected token: <"output">
                                                                                                                                Return: call(LOOKAHEAD FAILED)
                                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                                  Visited token: <<ID>: "i" at line 35 column 12>; Expected token: <<ID>>
                                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                    Visited token: <<ANGLEBRACKETOPEN>: "<" at line 35 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                Call:   var
                                                                                                                                  Consumed token: <<ID>: "i" at line 35 column 12>
                                                                                                                                  Call:   varPrime
                                                                                                                                  Return: varPrime
                                                                                                                                Return: var
                                                                                                                              Return: factor
                                                                                                                              Call:   termPrime
                                                                                                                              Return: termPrime
                                                                                                                            Return: term
                                                                                                                            Call:   additiveExpressionPrime
                                                                                                                            Return: additiveExpressionPrime
                                                                                                                          Return: additiveExpression
                                                                                                                          Call:   simpleExpressionPrime
                                                                                                                            Call:   relop
                                                                                                                              Consumed token: <<ANGLEBRACKETOPEN>: "<" at line 35 column 14>
                                                                                                                            Return: relop
                                                                                                                            Call:   additiveExpression
                                                                                                                              Call:   term
                                                                                                                                Call:   factor
                                                                                                                                  Visited token: <<ID>: "high" at line 35 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                                  Call:   call(LOOKING AHEAD...)
                                                                                                                                    Visited token: <<ID>: "high" at line 35 column 16>; Expected token: <<ID>>
                                                                                                                                    Visited token: <<SUB>: "-" at line 35 column 20>; Expected token: <<BRACKETOPEN>>
                                                                                                                                    Visited token: <<ID>: "high" at line 35 column 16>; Expected token: <"output">
                                                                                                                                  Return: call(LOOKAHEAD FAILED)
                                                                                                                                  Call:   var(LOOKING AHEAD...)
                                                                                                                                    Visited token: <<ID>: "high" at line 35 column 16>; Expected token: <<ID>>
                                                                                                                                    Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                      Visited token: <<SUB>: "-" at line 35 column 20>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                  Call:   var
                                                                                                                                    Consumed token: <<ID>: "high" at line 35 column 16>
                                                                                                                                    Call:   varPrime
                                                                                                                                    Return: varPrime
                                                                                                                                  Return: var
                                                                                                                                Return: factor
                                                                                                                                Call:   termPrime
                                                                                                                                Return: termPrime
                                                                                                                              Return: term
                                                                                                                              Call:   additiveExpressionPrime
                                                                                                                                Call:   addop
                                                                                                                                  Consumed token: <<SUB>: "-" at line 35 column 20>
                                                                                                                                Return: addop
                                                                                                                                Call:   term
                                                                                                                                  Call:   factor
                                                                                                                                    Visited token: <<NUMENT>: "1" at line 35 column 21>; Expected token: <<BRACKETOPEN>>
                                                                                                                                    Call:   call(LOOKING AHEAD...)
                                                                                                                                      Visited token: <<NUMENT>: "1" at line 35 column 21>; Expected token: <<ID>>
                                                                                                                                      Visited token: <<NUMENT>: "1" at line 35 column 21>; Expected token: <"output">
                                                                                                                                    Return: call(LOOKAHEAD FAILED)
                                                                                                                                    Call:   var(LOOKING AHEAD...)
                                                                                                                                      Visited token: <<NUMENT>: "1" at line 35 column 21>; Expected token: <<ID>>
                                                                                                                                    Return: var(LOOKAHEAD FAILED)
                                                                                                                                    Visited token: <<NUMENT>: "1" at line 35 column 21>; Expected token: <<NUMENT>>
                                                                                                                                    Consumed token: <<NUMENT>: "1" at line 35 column 21>
                                                                                                                                  Return: factor
                                                                                                                                  Call:   termPrime
No. linea: 35 Parentesis final: )
                                                                                                                                  Return: termPrime
                                                                                                                                Return: term
                                                                                                                                Call:   additiveExpressionPrime
                                                                                                                                Return: additiveExpressionPrime
                                                                                                                              Return: additiveExpressionPrime
                                                                                                                            Return: additiveExpression
                                                                                                                          Return: simpleExpressionPrime
                                                                                                                        Return: simpleExpression
                                                                                                                      Return: expression
                                                                                                                      Consumed token: <<BRACKETCLOSE>: ")" at line 35 column 22>
                                                                                                                      Call:   statement
No. linea: 36 Llave incial: {
                                                                                                                        Call:   compoundStmt
                                                                                                                          Consumed token: <<CURLYBRACKETOPEN>: "{" at line 36 column 5>
                                                                                                                          Call:   localDeclarations
                                                                                                                            Call:   localDeclarationsPrime
No. linea: 37 Declaracion int: int
                                                                                                                              Call:   varDeclaration
                                                                                                                                Call:   typeSpecifier
                                                                                                                                  Consumed token: <"int" at line 37 column 9>
                                                                                                                                Return: typeSpecifier
No. linea: 37 Identificador: t
                                                                                                                                Consumed token: <<ID>: "t" at line 37 column 13>
                                                                                                                                Call:   varDeclarationPrime
No. linea: 37 Punto y Coma: ;
                                                                                                                                  Consumed token: <<SEMICOLON>: ";" at line 37 column 14>
                                                                                                                                Return: varDeclarationPrime
                                                                                                                              Return: varDeclaration
                                                                                                                              Call:   localDeclarationsPrime
No. linea: 38 Identificador: k
                                                                                                                              Return: localDeclarationsPrime
                                                                                                                            Return: localDeclarationsPrime
                                                                                                                          Return: localDeclarations
                                                                                                                          Call:   statementList
                                                                                                                            Call:   statementListPrime
                                                                                                                              Call:   statement
                                                                                                                                Call:   expressionStmt
                                                                                                                                  Call:   expression
                                                                                                                                    Call:   var(LOOKING AHEAD...)
                                                                                                                                      Visited token: <<ID>: "k" at line 38 column 9>; Expected token: <<ID>>
                                                                                                                                      Call:   varPrime(LOOKING AHEAD...)
No. linea: 38 Operador igual: =
                                                                                                                                        Visited token: <<EQUIVALENCE>: "=" at line 38 column 11>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                    Visited token: <<EQUIVALENCE>: "=" at line 38 column 11>; Expected token: <<EQUIVALENCE>>
                                                                                                                                    Call:   expression(LOOKING AHEAD...)
                                                                                                                                      Call:   var(LOOKING AHEAD...)
No. linea: 38 Identificador: minloc
                                                                                                                                        Visited token: <<ID>: "minloc" at line 38 column 13>; Expected token: <<ID>>
                                                                                                                                        Call:   varPrime(LOOKING AHEAD...)
No. linea: 38 Parentesis incial: (
                                                                                                                                          Visited token: <<BRACKETOPEN>: "(" at line 38 column 19>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                      Visited token: <<BRACKETOPEN>: "(" at line 38 column 19>; Expected token: <<EQUIVALENCE>>
                                                                                                                                      Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                        Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                          Call:   term(LOOKING AHEAD...)
                                                                                                                                            Call:   factor(LOOKING AHEAD...)
                                                                                                                                              Visited token: <<ID>: "minloc" at line 38 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                                                              Call:   call(LOOKING AHEAD...)
                                                                                                                                                Visited token: <<ID>: "minloc" at line 38 column 13>; Expected token: <<ID>>
                                                                                                                                                Visited token: <<BRACKETOPEN>: "(" at line 38 column 19>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                Call:   args(LOOKING AHEAD...)
                                                                                                                                                  Call:   argList(LOOKING AHEAD...)
                                                                                                                                                    Call:   expression(LOOKING AHEAD...)
                                                                                                                                                      Call:   var(LOOKING AHEAD...)
No. linea: 38 Identificador: a
                                                                                                                                                        Visited token: <<ID>: "a" at line 38 column 20>; Expected token: <<ID>>
                                                                                                                                                        Call:   var
                                                                                                                                                          Consumed token: <<ID>: "k" at line 38 column 9>
                                                                                                                                                          Call:   varPrime
                                                                                                                                                          Return: varPrime
                                                                                                                                                        Return: var
                                                                                                                                                        Consumed token: <<EQUIVALENCE>: "=" at line 38 column 11>
                                                                                                                                                        Call:   expression
                                                                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                                                                            Visited token: <<ID>: "minloc" at line 38 column 13>; Expected token: <<ID>>
                                                                                                                                                            Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                              Visited token: <<BRACKETOPEN>: "(" at line 38 column 19>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                          Visited token: <<BRACKETOPEN>: "(" at line 38 column 19>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                          Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                            Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                              Call:   term(LOOKING AHEAD...)
                                                                                                                                                                Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                  Visited token: <<ID>: "minloc" at line 38 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                  Call:   call(LOOKING AHEAD...)
                                                                                                                                                                    Visited token: <<ID>: "minloc" at line 38 column 13>; Expected token: <<ID>>
                                                                                                                                                                    Visited token: <<BRACKETOPEN>: "(" at line 38 column 19>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                    Call:   args(LOOKING AHEAD...)
                                                                                                                                                                      Call:   argList(LOOKING AHEAD...)
                                                                                                                                                                        Call:   expression(LOOKING AHEAD...)
                                                                                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                                                                                            Visited token: <<ID>: "a" at line 38 column 20>; Expected token: <<ID>>
                                                                                                                                                                            Call:   varPrime(LOOKING AHEAD...)
No. linea: 38 Coma: ,
                                                                                                                                                                              Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                          Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                          Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                            Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                              Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                  Visited token: <<ID>: "a" at line 38 column 20>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                  Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                    Visited token: <<ID>: "a" at line 38 column 20>; Expected token: <<ID>>
                                                                                                                                                                                    Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                    Visited token: <<ID>: "a" at line 38 column 20>; Expected token: <"output">
                                                                                                                                                                                  Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                  Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                    Visited token: <<ID>: "a" at line 38 column 20>; Expected token: <<ID>>
                                                                                                                                                                                    Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                      Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                  Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                    Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<MULT>>
                                                                                                                                                                                    Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<DIV>>
                                                                                                                                                                                    Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<MOD>>
                                                                                                                                                                                  Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                              Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                              Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                  Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<SUM>>
                                                                                                                                                                                  Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<SUB>>
                                                                                                                                                                                Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                              Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                            Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                            Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                              Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <"==">
                                                                                                                                                                                Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <"<=">
                                                                                                                                                                                Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <">=">
                                                                                                                                                                                Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <"!=">
                                                                                                                                                                              Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                            Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                          Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                        Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                        Call:   argListPrime(LOOKING AHEAD...)
                                                                                                                                                                          Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<COMMA>>
                                                                                                                                                                          Call:   expression(LOOKING AHEAD...)
                                                                                                                                                                            Call:   var(LOOKING AHEAD...)
No. linea: 38 Identificador: i
                                                                                                                                                                              Visited token: <<ID>: "i" at line 38 column 22>; Expected token: <<ID>>
                                                                                                                                                                              Call:   simpleExpression
                                                                                                                                                                                Call:   additiveExpression
                                                                                                                                                                                  Call:   term
                                                                                                                                                                                    Call:   factor
                                                                                                                                                                                      Visited token: <<ID>: "minloc" at line 38 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                      Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                        Visited token: <<ID>: "minloc" at line 38 column 13>; Expected token: <<ID>>
                                                                                                                                                                                        Visited token: <<BRACKETOPEN>: "(" at line 38 column 19>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                        Call:   call
                                                                                                                                                                                          Consumed token: <<ID>: "minloc" at line 38 column 13>
                                                                                                                                                                                          Consumed token: <<BRACKETOPEN>: "(" at line 38 column 19>
                                                                                                                                                                                          Call:   args
                                                                                                                                                                                            Call:   argList
                                                                                                                                                                                              Call:   expression
                                                                                                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                  Visited token: <<ID>: "a" at line 38 column 20>; Expected token: <<ID>>
                                                                                                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                    Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                  Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                    Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                      Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                        Visited token: <<ID>: "a" at line 38 column 20>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                        Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                          Visited token: <<ID>: "a" at line 38 column 20>; Expected token: <<ID>>
                                                                                                                                                                                                          Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                          Visited token: <<ID>: "a" at line 38 column 20>; Expected token: <"output">
                                                                                                                                                                                                        Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                        Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                          Visited token: <<ID>: "a" at line 38 column 20>; Expected token: <<ID>>
                                                                                                                                                                                                          Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                          Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                        Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                          Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<MULT>>
                                                                                                                                                                                                          Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<DIV>>
                                                                                                                                                                                                          Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<MOD>>
                                                                                                                                                                                                        Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                      Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                    Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                    Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                      Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                        Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<SUM>>
                                                                                                                                                                                                        Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<SUB>>
                                                                                                                                                                                                      Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                    Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                  Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                  Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                    Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                      Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <"==">
                                                                                                                                                                                                      Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <"<=">
                                                                                                                                                                                                      Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <">=">
                                                                                                                                                                                                      Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                      Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                      Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <"!=">
                                                                                                                                                                                                    Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                  Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                Call:   simpleExpression
                                                                                                                                                                                                  Call:   additiveExpression
                                                                                                                                                                                                    Call:   term
                                                                                                                                                                                                      Call:   factor
                                                                                                                                                                                                        Visited token: <<ID>: "a" at line 38 column 20>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                        Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                          Visited token: <<ID>: "a" at line 38 column 20>; Expected token: <<ID>>
                                                                                                                                                                                                          Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                          Visited token: <<ID>: "a" at line 38 column 20>; Expected token: <"output">
                                                                                                                                                                                                        Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                        Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                          Visited token: <<ID>: "a" at line 38 column 20>; Expected token: <<ID>>
                                                                                                                                                                                                          Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<COMMA>: "," at line 38 column 21>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                          Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Call:   var
                                                                                                                                                                                                          Consumed token: <<ID>: "a" at line 38 column 20>
                                                                                                                                                                                                          Call:   varPrime
                                                                                                                                                                                                          Return: varPrime
                                                                                                                                                                                                        Return: var
                                                                                                                                                                                                      Return: factor
                                                                                                                                                                                                      Call:   termPrime
                                                                                                                                                                                                      Return: termPrime
                                                                                                                                                                                                    Return: term
                                                                                                                                                                                                    Call:   additiveExpressionPrime
                                                                                                                                                                                                    Return: additiveExpressionPrime
                                                                                                                                                                                                  Return: additiveExpression
                                                                                                                                                                                                  Call:   simpleExpressionPrime
                                                                                                                                                                                                  Return: simpleExpressionPrime
                                                                                                                                                                                                Return: simpleExpression
                                                                                                                                                                                              Return: expression
                                                                                                                                                                                              Call:   argListPrime
                                                                                                                                                                                                Consumed token: <<COMMA>: "," at line 38 column 21>
                                                                                                                                                                                                Call:   expression
                                                                                                                                                                                                  Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                    Visited token: <<ID>: "i" at line 38 column 22>; Expected token: <<ID>>
                                                                                                                                                                                                    Call:   varPrime(LOOKING AHEAD...)
No. linea: 38 Coma: ,
                                                                                                                                                                                                      Visited token: <<COMMA>: "," at line 38 column 23>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                  Visited token: <<COMMA>: "," at line 38 column 23>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                  Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                    Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                      Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                        Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                          Visited token: <<ID>: "i" at line 38 column 22>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                          Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<ID>: "i" at line 38 column 22>; Expected token: <<ID>>
                                                                                                                                                                                                            Visited token: <<COMMA>: "," at line 38 column 23>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                            Visited token: <<ID>: "i" at line 38 column 22>; Expected token: <"output">
                                                                                                                                                                                                          Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<ID>: "i" at line 38 column 22>; Expected token: <<ID>>
                                                                                                                                                                                                            Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<COMMA>: "," at line 38 column 23>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                          Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<COMMA>: "," at line 38 column 23>; Expected token: <<MULT>>
                                                                                                                                                                                                            Visited token: <<COMMA>: "," at line 38 column 23>; Expected token: <<DIV>>
                                                                                                                                                                                                            Visited token: <<COMMA>: "," at line 38 column 23>; Expected token: <<MOD>>
                                                                                                                                                                                                          Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                        Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                        Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                          Visited token: <<COMMA>: "," at line 38 column 23>; Expected token: <<SUM>>
                                                                                                                                                                                                          Visited token: <<COMMA>: "," at line 38 column 23>; Expected token: <<SUB>>
                                                                                                                                                                                                        Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                      Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                    Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                    Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                      Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                        Visited token: <<COMMA>: "," at line 38 column 23>; Expected token: <"==">
                                                                                                                                                                                                        Visited token: <<COMMA>: "," at line 38 column 23>; Expected token: <"<=">
                                                                                                                                                                                                        Visited token: <<COMMA>: "," at line 38 column 23>; Expected token: <">=">
                                                                                                                                                                                                        Visited token: <<COMMA>: "," at line 38 column 23>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                        Visited token: <<COMMA>: "," at line 38 column 23>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                        Visited token: <<COMMA>: "," at line 38 column 23>; Expected token: <"!=">
                                                                                                                                                                                                      Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                    Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                  Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                  Call:   simpleExpression
                                                                                                                                                                                                    Call:   additiveExpression
                                                                                                                                                                                                      Call:   term
                                                                                                                                                                                                        Call:   factor
                                                                                                                                                                                                          Visited token: <<ID>: "i" at line 38 column 22>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                          Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<ID>: "i" at line 38 column 22>; Expected token: <<ID>>
                                                                                                                                                                                                            Visited token: <<COMMA>: "," at line 38 column 23>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                            Visited token: <<ID>: "i" at line 38 column 22>; Expected token: <"output">
                                                                                                                                                                                                          Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<ID>: "i" at line 38 column 22>; Expected token: <<ID>>
                                                                                                                                                                                                            Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<COMMA>: "," at line 38 column 23>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Call:   var
                                                                                                                                                                                                            Consumed token: <<ID>: "i" at line 38 column 22>
                                                                                                                                                                                                            Call:   varPrime
                                                                                                                                                                                                            Return: varPrime
                                                                                                                                                                                                          Return: var
                                                                                                                                                                                                        Return: factor
                                                                                                                                                                                                        Call:   termPrime
                                                                                                                                                                                                        Return: termPrime
                                                                                                                                                                                                      Return: term
                                                                                                                                                                                                      Call:   additiveExpressionPrime
                                                                                                                                                                                                      Return: additiveExpressionPrime
                                                                                                                                                                                                    Return: additiveExpression
                                                                                                                                                                                                    Call:   simpleExpressionPrime
                                                                                                                                                                                                    Return: simpleExpressionPrime
                                                                                                                                                                                                  Return: simpleExpression
                                                                                                                                                                                                Return: expression
                                                                                                                                                                                                Call:   argListPrime
                                                                                                                                                                                                  Consumed token: <<COMMA>: "," at line 38 column 23>
                                                                                                                                                                                                  Call:   expression
                                                                                                                                                                                                    Call:   var(LOOKING AHEAD...)
No. linea: 38 Identificador: high
                                                                                                                                                                                                      Visited token: <<ID>: "high" at line 38 column 24>; Expected token: <<ID>>
                                                                                                                                                                                                      Call:   varPrime(LOOKING AHEAD...)
No. linea: 38 Parentesis final: )
                                                                                                                                                                                                        Visited token: <<BRACKETCLOSE>: ")" at line 38 column 28>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                    Visited token: <<BRACKETCLOSE>: ")" at line 38 column 28>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                    Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                      Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                        Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                          Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<ID>: "high" at line 38 column 24>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                            Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<ID>: "high" at line 38 column 24>; Expected token: <<ID>>
                                                                                                                                                                                                              Visited token: <<BRACKETCLOSE>: ")" at line 38 column 28>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                              Visited token: <<ID>: "high" at line 38 column 24>; Expected token: <"output">
                                                                                                                                                                                                            Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<ID>: "high" at line 38 column 24>; Expected token: <<ID>>
                                                                                                                                                                                                              Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                Visited token: <<BRACKETCLOSE>: ")" at line 38 column 28>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                            Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<BRACKETCLOSE>: ")" at line 38 column 28>; Expected token: <<MULT>>
                                                                                                                                                                                                              Visited token: <<BRACKETCLOSE>: ")" at line 38 column 28>; Expected token: <<DIV>>
                                                                                                                                                                                                              Visited token: <<BRACKETCLOSE>: ")" at line 38 column 28>; Expected token: <<MOD>>
                                                                                                                                                                                                            Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                          Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                          Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<BRACKETCLOSE>: ")" at line 38 column 28>; Expected token: <<SUM>>
                                                                                                                                                                                                            Visited token: <<BRACKETCLOSE>: ")" at line 38 column 28>; Expected token: <<SUB>>
                                                                                                                                                                                                          Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                        Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                        Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                          Visited token: <<BRACKETCLOSE>: ")" at line 38 column 28>; Expected token: <"==">
                                                                                                                                                                                                          Visited token: <<BRACKETCLOSE>: ")" at line 38 column 28>; Expected token: <"<=">
                                                                                                                                                                                                          Visited token: <<BRACKETCLOSE>: ")" at line 38 column 28>; Expected token: <">=">
                                                                                                                                                                                                          Visited token: <<BRACKETCLOSE>: ")" at line 38 column 28>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                          Visited token: <<BRACKETCLOSE>: ")" at line 38 column 28>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                          Visited token: <<BRACKETCLOSE>: ")" at line 38 column 28>; Expected token: <"!=">
                                                                                                                                                                                                        Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                      Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                    Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                    Call:   simpleExpression
                                                                                                                                                                                                      Call:   additiveExpression
                                                                                                                                                                                                        Call:   term
                                                                                                                                                                                                          Call:   factor
                                                                                                                                                                                                            Visited token: <<ID>: "high" at line 38 column 24>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                            Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<ID>: "high" at line 38 column 24>; Expected token: <<ID>>
                                                                                                                                                                                                              Visited token: <<BRACKETCLOSE>: ")" at line 38 column 28>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                              Visited token: <<ID>: "high" at line 38 column 24>; Expected token: <"output">
                                                                                                                                                                                                            Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<ID>: "high" at line 38 column 24>; Expected token: <<ID>>
                                                                                                                                                                                                              Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                Visited token: <<BRACKETCLOSE>: ")" at line 38 column 28>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                            Call:   var
                                                                                                                                                                                                              Consumed token: <<ID>: "high" at line 38 column 24>
                                                                                                                                                                                                              Call:   varPrime
                                                                                                                                                                                                              Return: varPrime
                                                                                                                                                                                                            Return: var
                                                                                                                                                                                                          Return: factor
                                                                                                                                                                                                          Call:   termPrime
                                                                                                                                                                                                          Return: termPrime
                                                                                                                                                                                                        Return: term
                                                                                                                                                                                                        Call:   additiveExpressionPrime
                                                                                                                                                                                                        Return: additiveExpressionPrime
                                                                                                                                                                                                      Return: additiveExpression
                                                                                                                                                                                                      Call:   simpleExpressionPrime
                                                                                                                                                                                                      Return: simpleExpressionPrime
                                                                                                                                                                                                    Return: simpleExpression
                                                                                                                                                                                                  Return: expression
                                                                                                                                                                                                  Call:   argListPrime
                                                                                                                                                                                                  Return: argListPrime
                                                                                                                                                                                                Return: argListPrime
                                                                                                                                                                                              Return: argListPrime
                                                                                                                                                                                            Return: argList
                                                                                                                                                                                          Return: args
                                                                                                                                                                                          Consumed token: <<BRACKETCLOSE>: ")" at line 38 column 28>
                                                                                                                                                                                        Return: call
                                                                                                                                                                                      Return: factor
                                                                                                                                                                                      Call:   termPrime
No. linea: 38 Punto y Coma: ;
                                                                                                                                                                                      Return: termPrime
                                                                                                                                                                                    Return: term
                                                                                                                                                                                    Call:   additiveExpressionPrime
                                                                                                                                                                                    Return: additiveExpressionPrime
                                                                                                                                                                                  Return: additiveExpression
                                                                                                                                                                                  Call:   simpleExpressionPrime
                                                                                                                                                                                  Return: simpleExpressionPrime
                                                                                                                                                                                Return: simpleExpression
                                                                                                                                                                              Return: expression
                                                                                                                                                                            Return: expression
                                                                                                                                                                            Consumed token: <<SEMICOLON>: ";" at line 38 column 29>
                                                                                                                                                                          Return: expressionStmt
                                                                                                                                                                        Return: statement
                                                                                                                                                                        Call:   statementListPrime
No. linea: 39 Identificador: t
                                                                                                                                                                          Call:   statement
                                                                                                                                                                            Call:   expressionStmt
                                                                                                                                                                              Call:   expression
                                                                                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                  Visited token: <<ID>: "t" at line 39 column 9>; Expected token: <<ID>>
                                                                                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
No. linea: 39 Operador igual: =
                                                                                                                                                                                    Visited token: <<EQUIVALENCE>: "=" at line 39 column 11>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                Visited token: <<EQUIVALENCE>: "=" at line 39 column 11>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                Call:   expression(LOOKING AHEAD...)
                                                                                                                                                                                  Call:   var(LOOKING AHEAD...)
No. linea: 39 Identificador: a
                                                                                                                                                                                    Visited token: <<ID>: "a" at line 39 column 13>; Expected token: <<ID>>
                                                                                                                                                                                    Call:   varPrime(LOOKING AHEAD...)
No. linea: 39 Corchete incial: [
                                                                                                                                                                                      Visited token: <<SQUAREBRACKETOPEN>: "[" at line 39 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                      Call:   expression(LOOKING AHEAD...)
                                                                                                                                                                                        Call:   var(LOOKING AHEAD...)
No. linea: 39 Identificador: k
                                                                                                                                                                                          Visited token: <<ID>: "k" at line 39 column 15>; Expected token: <<ID>>
                                                                                                                                                                                          Call:   var
                                                                                                                                                                                            Consumed token: <<ID>: "t" at line 39 column 9>
                                                                                                                                                                                            Call:   varPrime
                                                                                                                                                                                            Return: varPrime
                                                                                                                                                                                          Return: var
                                                                                                                                                                                          Consumed token: <<EQUIVALENCE>: "=" at line 39 column 11>
                                                                                                                                                                                          Call:   expression
                                                                                                                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                              Visited token: <<ID>: "a" at line 39 column 13>; Expected token: <<ID>>
                                                                                                                                                                                              Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                Visited token: <<SQUAREBRACKETOPEN>: "[" at line 39 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                Call:   expression(LOOKING AHEAD...)
                                                                                                                                                                                                  Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                    Visited token: <<ID>: "k" at line 39 column 15>; Expected token: <<ID>>
                                                                                                                                                                                                    Call:   varPrime(LOOKING AHEAD...)
No. linea: 39 Corchete final: ]
                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                  Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                    Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                      Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                        Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                          Visited token: <<ID>: "k" at line 39 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                          Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<ID>: "k" at line 39 column 15>; Expected token: <<ID>>
                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                            Visited token: <<ID>: "k" at line 39 column 15>; Expected token: <"output">
                                                                                                                                                                                                          Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<ID>: "k" at line 39 column 15>; Expected token: <<ID>>
                                                                                                                                                                                                            Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                          Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<MULT>>
                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<DIV>>
                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<MOD>>
                                                                                                                                                                                                          Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                        Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                        Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<SUM>>
                                                                                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<SUB>>
                                                                                                                                                                                                        Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                      Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                    Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                    Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                      Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <"==">
                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <"<=">
                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <">=">
                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <"!=">
                                                                                                                                                                                                      Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                    Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                  Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<SQUAREBRACKETCLOSE>>
No. linea: 39 Punto y Coma: ;
                                                                                                                                                                                                Visited token: <<SEMICOLON>: ";" at line 39 column 17>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 39 column 17>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                            Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                              Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                  Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                    Visited token: <<ID>: "a" at line 39 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                    Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                      Visited token: <<ID>: "a" at line 39 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETOPEN>: "[" at line 39 column 14>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                      Visited token: <<ID>: "a" at line 39 column 13>; Expected token: <"output">
                                                                                                                                                                                                    Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                    Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                      Visited token: <<ID>: "a" at line 39 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                      Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETOPEN>: "[" at line 39 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                        Call:   expression(LOOKING AHEAD...)
                                                                                                                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<ID>: "k" at line 39 column 15>; Expected token: <<ID>>
                                                                                                                                                                                                            Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                          Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                            Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                              Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                  Visited token: <<ID>: "k" at line 39 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                  Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                    Visited token: <<ID>: "k" at line 39 column 15>; Expected token: <<ID>>
                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                    Visited token: <<ID>: "k" at line 39 column 15>; Expected token: <"output">
                                                                                                                                                                                                                  Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                  Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                    Visited token: <<ID>: "k" at line 39 column 15>; Expected token: <<ID>>
                                                                                                                                                                                                                    Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                  Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<MULT>>
                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<DIV>>
                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<MOD>>
                                                                                                                                                                                                                  Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                              Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                              Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<SUM>>
                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<SUB>>
                                                                                                                                                                                                                Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                              Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                            Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                            Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                              Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <"==">
                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <"<=">
                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <">=">
                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <"!=">
                                                                                                                                                                                                              Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                            Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<SQUAREBRACKETCLOSE>>
                                                                                                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 39 column 17>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                  Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                  Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                    Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 39 column 17>; Expected token: <<MULT>>
                                                                                                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 39 column 17>; Expected token: <<DIV>>
                                                                                                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 39 column 17>; Expected token: <<MOD>>
                                                                                                                                                                                                    Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                  Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                  Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 39 column 17>; Expected token: <<SUM>>
                                                                                                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 39 column 17>; Expected token: <<SUB>>
                                                                                                                                                                                                  Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                              Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                              Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 39 column 17>; Expected token: <"==">
                                                                                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 39 column 17>; Expected token: <"<=">
                                                                                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 39 column 17>; Expected token: <">=">
                                                                                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 39 column 17>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 39 column 17>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 39 column 17>; Expected token: <"!=">
                                                                                                                                                                                                Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                              Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                            Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                            Call:   simpleExpression
                                                                                                                                                                                              Call:   additiveExpression
                                                                                                                                                                                                Call:   term
                                                                                                                                                                                                  Call:   factor
                                                                                                                                                                                                    Visited token: <<ID>: "a" at line 39 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                    Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                      Visited token: <<ID>: "a" at line 39 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETOPEN>: "[" at line 39 column 14>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                      Visited token: <<ID>: "a" at line 39 column 13>; Expected token: <"output">
                                                                                                                                                                                                    Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                    Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                      Visited token: <<ID>: "a" at line 39 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                      Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETOPEN>: "[" at line 39 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                        Call:   var
                                                                                                                                                                                                          Consumed token: <<ID>: "a" at line 39 column 13>
                                                                                                                                                                                                          Call:   varPrime
                                                                                                                                                                                                            Consumed token: <<SQUAREBRACKETOPEN>: "[" at line 39 column 14>
                                                                                                                                                                                                            Call:   expression
                                                                                                                                                                                                              Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                Visited token: <<ID>: "k" at line 39 column 15>; Expected token: <<ID>>
                                                                                                                                                                                                                Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                              Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                  Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                    Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                      Visited token: <<ID>: "k" at line 39 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                      Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                        Visited token: <<ID>: "k" at line 39 column 15>; Expected token: <<ID>>
                                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                        Visited token: <<ID>: "k" at line 39 column 15>; Expected token: <"output">
                                                                                                                                                                                                                      Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                      Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                        Visited token: <<ID>: "k" at line 39 column 15>; Expected token: <<ID>>
                                                                                                                                                                                                                        Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                    Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                    Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                      Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<MULT>>
                                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<DIV>>
                                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<MOD>>
                                                                                                                                                                                                                      Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                    Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                  Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                  Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                    Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<SUM>>
                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<SUB>>
                                                                                                                                                                                                                    Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                  Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                  Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <"==">
                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <"<=">
                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <">=">
                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <"!=">
                                                                                                                                                                                                                  Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                              Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                              Call:   simpleExpression
                                                                                                                                                                                                                Call:   additiveExpression
                                                                                                                                                                                                                  Call:   term
                                                                                                                                                                                                                    Call:   factor
                                                                                                                                                                                                                      Visited token: <<ID>: "k" at line 39 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                      Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                        Visited token: <<ID>: "k" at line 39 column 15>; Expected token: <<ID>>
                                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                        Visited token: <<ID>: "k" at line 39 column 15>; Expected token: <"output">
                                                                                                                                                                                                                      Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                      Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                        Visited token: <<ID>: "k" at line 39 column 15>; Expected token: <<ID>>
                                                                                                                                                                                                                        Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                      Call:   var
                                                                                                                                                                                                                        Consumed token: <<ID>: "k" at line 39 column 15>
                                                                                                                                                                                                                        Call:   varPrime
                                                                                                                                                                                                                        Return: varPrime
                                                                                                                                                                                                                      Return: var
                                                                                                                                                                                                                    Return: factor
                                                                                                                                                                                                                    Call:   termPrime
                                                                                                                                                                                                                    Return: termPrime
                                                                                                                                                                                                                  Return: term
                                                                                                                                                                                                                  Call:   additiveExpressionPrime
                                                                                                                                                                                                                  Return: additiveExpressionPrime
                                                                                                                                                                                                                Return: additiveExpression
                                                                                                                                                                                                                Call:   simpleExpressionPrime
                                                                                                                                                                                                                Return: simpleExpressionPrime
                                                                                                                                                                                                              Return: simpleExpression
                                                                                                                                                                                                            Return: expression
                                                                                                                                                                                                            Consumed token: <<SQUAREBRACKETCLOSE>: "]" at line 39 column 16>
                                                                                                                                                                                                          Return: varPrime
                                                                                                                                                                                                        Return: var
                                                                                                                                                                                                      Return: factor
                                                                                                                                                                                                      Call:   termPrime
                                                                                                                                                                                                      Return: termPrime
                                                                                                                                                                                                    Return: term
                                                                                                                                                                                                    Call:   additiveExpressionPrime
                                                                                                                                                                                                    Return: additiveExpressionPrime
                                                                                                                                                                                                  Return: additiveExpression
                                                                                                                                                                                                  Call:   simpleExpressionPrime
                                                                                                                                                                                                  Return: simpleExpressionPrime
                                                                                                                                                                                                Return: simpleExpression
                                                                                                                                                                                              Return: expression
                                                                                                                                                                                            Return: expression
                                                                                                                                                                                            Consumed token: <<SEMICOLON>: ";" at line 39 column 17>
                                                                                                                                                                                          Return: expressionStmt
                                                                                                                                                                                        Return: statement
                                                                                                                                                                                        Call:   statementListPrime
No. linea: 40 Identificador: a
                                                                                                                                                                                          Call:   statement
                                                                                                                                                                                            Call:   expressionStmt
                                                                                                                                                                                              Call:   expression
                                                                                                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                  Visited token: <<ID>: "a" at line 40 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
No. linea: 40 Corchete incial: [
                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETOPEN>: "[" at line 40 column 10>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                    Call:   expression(LOOKING AHEAD...)
                                                                                                                                                                                                      Call:   var(LOOKING AHEAD...)
No. linea: 40 Identificador: k
                                                                                                                                                                                                        Visited token: <<ID>: "k" at line 40 column 11>; Expected token: <<ID>>
                                                                                                                                                                                                        Call:   varPrime(LOOKING AHEAD...)
No. linea: 40 Corchete final: ]
                                                                                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                      Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                        Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                          Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                            Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<ID>: "k" at line 40 column 11>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                              Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                Visited token: <<ID>: "k" at line 40 column 11>; Expected token: <<ID>>
                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                Visited token: <<ID>: "k" at line 40 column 11>; Expected token: <"output">
                                                                                                                                                                                                              Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                              Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                Visited token: <<ID>: "k" at line 40 column 11>; Expected token: <<ID>>
                                                                                                                                                                                                                Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                            Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                            Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                              Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<MULT>>
                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<DIV>>
                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<MOD>>
                                                                                                                                                                                                              Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                            Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                            Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<SUM>>
                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<SUB>>
                                                                                                                                                                                                            Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                          Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                          Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <"==">
                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <"<=">
                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <">=">
                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <"!=">
                                                                                                                                                                                                          Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                        Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                    Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<SQUAREBRACKETCLOSE>>
No. linea: 40 Operador igual: =
                                                                                                                                                                                                    Visited token: <<EQUIVALENCE>: "=" at line 40 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                Visited token: <<EQUIVALENCE>: "=" at line 40 column 14>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                Call:   var
                                                                                                                                                                                                  Consumed token: <<ID>: "a" at line 40 column 9>
                                                                                                                                                                                                  Call:   varPrime
                                                                                                                                                                                                    Consumed token: <<SQUAREBRACKETOPEN>: "[" at line 40 column 10>
                                                                                                                                                                                                    Call:   expression
                                                                                                                                                                                                      Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                        Visited token: <<ID>: "k" at line 40 column 11>; Expected token: <<ID>>
                                                                                                                                                                                                        Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                      Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                        Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                          Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                            Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<ID>: "k" at line 40 column 11>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                              Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                Visited token: <<ID>: "k" at line 40 column 11>; Expected token: <<ID>>
                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                Visited token: <<ID>: "k" at line 40 column 11>; Expected token: <"output">
                                                                                                                                                                                                              Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                              Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                Visited token: <<ID>: "k" at line 40 column 11>; Expected token: <<ID>>
                                                                                                                                                                                                                Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                            Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                            Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                              Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<MULT>>
                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<DIV>>
                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<MOD>>
                                                                                                                                                                                                              Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                            Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                            Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<SUM>>
                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<SUB>>
                                                                                                                                                                                                            Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                          Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                          Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <"==">
                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <"<=">
                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <">=">
                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <"!=">
                                                                                                                                                                                                          Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                        Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Call:   simpleExpression
                                                                                                                                                                                                        Call:   additiveExpression
                                                                                                                                                                                                          Call:   term
                                                                                                                                                                                                            Call:   factor
                                                                                                                                                                                                              Visited token: <<ID>: "k" at line 40 column 11>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                              Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                Visited token: <<ID>: "k" at line 40 column 11>; Expected token: <<ID>>
                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                Visited token: <<ID>: "k" at line 40 column 11>; Expected token: <"output">
                                                                                                                                                                                                              Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                              Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                Visited token: <<ID>: "k" at line 40 column 11>; Expected token: <<ID>>
                                                                                                                                                                                                                Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                              Call:   var
                                                                                                                                                                                                                Consumed token: <<ID>: "k" at line 40 column 11>
                                                                                                                                                                                                                Call:   varPrime
                                                                                                                                                                                                                Return: varPrime
                                                                                                                                                                                                              Return: var
                                                                                                                                                                                                            Return: factor
                                                                                                                                                                                                            Call:   termPrime
                                                                                                                                                                                                            Return: termPrime
                                                                                                                                                                                                          Return: term
                                                                                                                                                                                                          Call:   additiveExpressionPrime
                                                                                                                                                                                                          Return: additiveExpressionPrime
                                                                                                                                                                                                        Return: additiveExpression
                                                                                                                                                                                                        Call:   simpleExpressionPrime
                                                                                                                                                                                                        Return: simpleExpressionPrime
                                                                                                                                                                                                      Return: simpleExpression
                                                                                                                                                                                                    Return: expression
                                                                                                                                                                                                    Consumed token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 12>
                                                                                                                                                                                                  Return: varPrime
                                                                                                                                                                                                Return: var
                                                                                                                                                                                                Consumed token: <<EQUIVALENCE>: "=" at line 40 column 14>
                                                                                                                                                                                                Call:   expression
                                                                                                                                                                                                  Call:   var(LOOKING AHEAD...)
No. linea: 40 Identificador: a
                                                                                                                                                                                                    Visited token: <<ID>: "a" at line 40 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                    Call:   varPrime(LOOKING AHEAD...)
No. linea: 40 Corchete incial: [
                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETOPEN>: "[" at line 40 column 17>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                      Call:   expression(LOOKING AHEAD...)
                                                                                                                                                                                                        Call:   var(LOOKING AHEAD...)
No. linea: 40 Identificador: i
                                                                                                                                                                                                          Visited token: <<ID>: "i" at line 40 column 18>; Expected token: <<ID>>
                                                                                                                                                                                                          Call:   varPrime(LOOKING AHEAD...)
No. linea: 40 Corchete final: ]
                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                          Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                        Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                          Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                            Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                              Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                Visited token: <<ID>: "i" at line 40 column 18>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                  Visited token: <<ID>: "i" at line 40 column 18>; Expected token: <<ID>>
                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                  Visited token: <<ID>: "i" at line 40 column 18>; Expected token: <"output">
                                                                                                                                                                                                                Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                  Visited token: <<ID>: "i" at line 40 column 18>; Expected token: <<ID>>
                                                                                                                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                              Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                              Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<MULT>>
                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<DIV>>
                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<MOD>>
                                                                                                                                                                                                                Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                              Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                            Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                            Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                              Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<SUM>>
                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<SUB>>
                                                                                                                                                                                                              Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                            Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                            Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <"==">
                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <"<=">
                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <">=">
                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <"!=">
                                                                                                                                                                                                            Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                          Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<SQUAREBRACKETCLOSE>>
No. linea: 40 Punto y Coma: ;
                                                                                                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 40 column 20>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 40 column 20>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                  Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                    Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                      Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                        Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                          Visited token: <<ID>: "a" at line 40 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                          Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<ID>: "a" at line 40 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETOPEN>: "[" at line 40 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                            Visited token: <<ID>: "a" at line 40 column 16>; Expected token: <"output">
                                                                                                                                                                                                          Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<ID>: "a" at line 40 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                            Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETOPEN>: "[" at line 40 column 17>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                              Call:   expression(LOOKING AHEAD...)
                                                                                                                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                  Visited token: <<ID>: "i" at line 40 column 18>; Expected token: <<ID>>
                                                                                                                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                                Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                  Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                    Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                      Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                        Visited token: <<ID>: "i" at line 40 column 18>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                        Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                          Visited token: <<ID>: "i" at line 40 column 18>; Expected token: <<ID>>
                                                                                                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                          Visited token: <<ID>: "i" at line 40 column 18>; Expected token: <"output">
                                                                                                                                                                                                                        Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                        Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                          Visited token: <<ID>: "i" at line 40 column 18>; Expected token: <<ID>>
                                                                                                                                                                                                                          Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                          Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                        Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                      Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                      Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                        Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<MULT>>
                                                                                                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<DIV>>
                                                                                                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<MOD>>
                                                                                                                                                                                                                        Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                      Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                    Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                    Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                      Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<SUM>>
                                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<SUB>>
                                                                                                                                                                                                                      Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                    Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                  Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                  Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                    Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <"==">
                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <"<=">
                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <">=">
                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <"!=">
                                                                                                                                                                                                                    Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                  Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                              Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<SQUAREBRACKETCLOSE>>
                                                                                                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 40 column 20>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                          Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 40 column 20>; Expected token: <<MULT>>
                                                                                                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 40 column 20>; Expected token: <<DIV>>
                                                                                                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 40 column 20>; Expected token: <<MOD>>
                                                                                                                                                                                                          Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                        Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                        Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                          Visited token: <<SEMICOLON>: ";" at line 40 column 20>; Expected token: <<SUM>>
                                                                                                                                                                                                          Visited token: <<SEMICOLON>: ";" at line 40 column 20>; Expected token: <<SUB>>
                                                                                                                                                                                                        Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                      Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                    Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                    Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                      Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 40 column 20>; Expected token: <"==">
                                                                                                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 40 column 20>; Expected token: <"<=">
                                                                                                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 40 column 20>; Expected token: <">=">
                                                                                                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 40 column 20>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 40 column 20>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 40 column 20>; Expected token: <"!=">
                                                                                                                                                                                                      Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                    Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                  Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                  Call:   simpleExpression
                                                                                                                                                                                                    Call:   additiveExpression
                                                                                                                                                                                                      Call:   term
                                                                                                                                                                                                        Call:   factor
                                                                                                                                                                                                          Visited token: <<ID>: "a" at line 40 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                          Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<ID>: "a" at line 40 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETOPEN>: "[" at line 40 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                            Visited token: <<ID>: "a" at line 40 column 16>; Expected token: <"output">
                                                                                                                                                                                                          Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<ID>: "a" at line 40 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                            Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETOPEN>: "[" at line 40 column 17>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                              Call:   var
                                                                                                                                                                                                                Consumed token: <<ID>: "a" at line 40 column 16>
                                                                                                                                                                                                                Call:   varPrime
                                                                                                                                                                                                                  Consumed token: <<SQUAREBRACKETOPEN>: "[" at line 40 column 17>
                                                                                                                                                                                                                  Call:   expression
                                                                                                                                                                                                                    Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                      Visited token: <<ID>: "i" at line 40 column 18>; Expected token: <<ID>>
                                                                                                                                                                                                                      Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                                    Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                      Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                        Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                          Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                            Visited token: <<ID>: "i" at line 40 column 18>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                            Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                              Visited token: <<ID>: "i" at line 40 column 18>; Expected token: <<ID>>
                                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                              Visited token: <<ID>: "i" at line 40 column 18>; Expected token: <"output">
                                                                                                                                                                                                                            Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                              Visited token: <<ID>: "i" at line 40 column 18>; Expected token: <<ID>>
                                                                                                                                                                                                                              Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                          Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                          Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                            Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<MULT>>
                                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<DIV>>
                                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<MOD>>
                                                                                                                                                                                                                            Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                          Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                        Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                        Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                          Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<SUM>>
                                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<SUB>>
                                                                                                                                                                                                                          Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                        Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                      Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                      Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                        Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <"==">
                                                                                                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <"<=">
                                                                                                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <">=">
                                                                                                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <"!=">
                                                                                                                                                                                                                        Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                      Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                    Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                    Call:   simpleExpression
                                                                                                                                                                                                                      Call:   additiveExpression
                                                                                                                                                                                                                        Call:   term
                                                                                                                                                                                                                          Call:   factor
                                                                                                                                                                                                                            Visited token: <<ID>: "i" at line 40 column 18>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                            Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                              Visited token: <<ID>: "i" at line 40 column 18>; Expected token: <<ID>>
                                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                              Visited token: <<ID>: "i" at line 40 column 18>; Expected token: <"output">
                                                                                                                                                                                                                            Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                              Visited token: <<ID>: "i" at line 40 column 18>; Expected token: <<ID>>
                                                                                                                                                                                                                              Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                            Call:   var
                                                                                                                                                                                                                              Consumed token: <<ID>: "i" at line 40 column 18>
                                                                                                                                                                                                                              Call:   varPrime
                                                                                                                                                                                                                              Return: varPrime
                                                                                                                                                                                                                            Return: var
                                                                                                                                                                                                                          Return: factor
                                                                                                                                                                                                                          Call:   termPrime
                                                                                                                                                                                                                          Return: termPrime
                                                                                                                                                                                                                        Return: term
                                                                                                                                                                                                                        Call:   additiveExpressionPrime
                                                                                                                                                                                                                        Return: additiveExpressionPrime
                                                                                                                                                                                                                      Return: additiveExpression
                                                                                                                                                                                                                      Call:   simpleExpressionPrime
                                                                                                                                                                                                                      Return: simpleExpressionPrime
                                                                                                                                                                                                                    Return: simpleExpression
                                                                                                                                                                                                                  Return: expression
                                                                                                                                                                                                                  Consumed token: <<SQUAREBRACKETCLOSE>: "]" at line 40 column 19>
                                                                                                                                                                                                                Return: varPrime
                                                                                                                                                                                                              Return: var
                                                                                                                                                                                                            Return: factor
                                                                                                                                                                                                            Call:   termPrime
                                                                                                                                                                                                            Return: termPrime
                                                                                                                                                                                                          Return: term
                                                                                                                                                                                                          Call:   additiveExpressionPrime
                                                                                                                                                                                                          Return: additiveExpressionPrime
                                                                                                                                                                                                        Return: additiveExpression
                                                                                                                                                                                                        Call:   simpleExpressionPrime
                                                                                                                                                                                                        Return: simpleExpressionPrime
                                                                                                                                                                                                      Return: simpleExpression
                                                                                                                                                                                                    Return: expression
                                                                                                                                                                                                  Return: expression
                                                                                                                                                                                                  Consumed token: <<SEMICOLON>: ";" at line 40 column 20>
                                                                                                                                                                                                Return: expressionStmt
                                                                                                                                                                                              Return: statement
                                                                                                                                                                                              Call:   statementListPrime
No. linea: 41 Identificador: a
                                                                                                                                                                                                Call:   statement
                                                                                                                                                                                                  Call:   expressionStmt
                                                                                                                                                                                                    Call:   expression
                                                                                                                                                                                                      Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                        Visited token: <<ID>: "a" at line 41 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                        Call:   varPrime(LOOKING AHEAD...)
No. linea: 41 Corchete incial: [
                                                                                                                                                                                                          Visited token: <<SQUAREBRACKETOPEN>: "[" at line 41 column 10>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                          Call:   expression(LOOKING AHEAD...)
                                                                                                                                                                                                            Call:   var(LOOKING AHEAD...)
No. linea: 41 Identificador: i
                                                                                                                                                                                                              Visited token: <<ID>: "i" at line 41 column 11>; Expected token: <<ID>>
                                                                                                                                                                                                              Call:   varPrime(LOOKING AHEAD...)
No. linea: 41 Corchete final: ]
                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                            Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                              Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                  Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                    Visited token: <<ID>: "i" at line 41 column 11>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                    Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                      Visited token: <<ID>: "i" at line 41 column 11>; Expected token: <<ID>>
                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                      Visited token: <<ID>: "i" at line 41 column 11>; Expected token: <"output">
                                                                                                                                                                                                                    Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                    Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                      Visited token: <<ID>: "i" at line 41 column 11>; Expected token: <<ID>>
                                                                                                                                                                                                                      Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                  Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                  Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                    Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<MULT>>
                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<DIV>>
                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<MOD>>
                                                                                                                                                                                                                    Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                  Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                  Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<SUM>>
                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<SUB>>
                                                                                                                                                                                                                  Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                              Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                              Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <"==">
                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <"<=">
                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <">=">
                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <"!=">
                                                                                                                                                                                                                Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                              Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                            Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<SQUAREBRACKETCLOSE>>
No. linea: 41 Operador igual: =
                                                                                                                                                                                                          Visited token: <<EQUIVALENCE>: "=" at line 41 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Visited token: <<EQUIVALENCE>: "=" at line 41 column 14>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                      Call:   var
                                                                                                                                                                                                        Consumed token: <<ID>: "a" at line 41 column 9>
                                                                                                                                                                                                        Call:   varPrime
                                                                                                                                                                                                          Consumed token: <<SQUAREBRACKETOPEN>: "[" at line 41 column 10>
                                                                                                                                                                                                          Call:   expression
                                                                                                                                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<ID>: "i" at line 41 column 11>; Expected token: <<ID>>
                                                                                                                                                                                                              Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                            Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                              Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                  Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                    Visited token: <<ID>: "i" at line 41 column 11>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                    Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                      Visited token: <<ID>: "i" at line 41 column 11>; Expected token: <<ID>>
                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                      Visited token: <<ID>: "i" at line 41 column 11>; Expected token: <"output">
                                                                                                                                                                                                                    Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                    Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                      Visited token: <<ID>: "i" at line 41 column 11>; Expected token: <<ID>>
                                                                                                                                                                                                                      Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                  Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                  Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                    Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<MULT>>
                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<DIV>>
                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<MOD>>
                                                                                                                                                                                                                    Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                  Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                  Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<SUM>>
                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<SUB>>
                                                                                                                                                                                                                  Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                              Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                              Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <"==">
                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <"<=">
                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <">=">
                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <"!=">
                                                                                                                                                                                                                Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                              Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                            Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                            Call:   simpleExpression
                                                                                                                                                                                                              Call:   additiveExpression
                                                                                                                                                                                                                Call:   term
                                                                                                                                                                                                                  Call:   factor
                                                                                                                                                                                                                    Visited token: <<ID>: "i" at line 41 column 11>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                    Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                      Visited token: <<ID>: "i" at line 41 column 11>; Expected token: <<ID>>
                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                      Visited token: <<ID>: "i" at line 41 column 11>; Expected token: <"output">
                                                                                                                                                                                                                    Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                    Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                      Visited token: <<ID>: "i" at line 41 column 11>; Expected token: <<ID>>
                                                                                                                                                                                                                      Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                    Call:   var
                                                                                                                                                                                                                      Consumed token: <<ID>: "i" at line 41 column 11>
                                                                                                                                                                                                                      Call:   varPrime
                                                                                                                                                                                                                      Return: varPrime
                                                                                                                                                                                                                    Return: var
                                                                                                                                                                                                                  Return: factor
                                                                                                                                                                                                                  Call:   termPrime
                                                                                                                                                                                                                  Return: termPrime
                                                                                                                                                                                                                Return: term
                                                                                                                                                                                                                Call:   additiveExpressionPrime
                                                                                                                                                                                                                Return: additiveExpressionPrime
                                                                                                                                                                                                              Return: additiveExpression
                                                                                                                                                                                                              Call:   simpleExpressionPrime
                                                                                                                                                                                                              Return: simpleExpressionPrime
                                                                                                                                                                                                            Return: simpleExpression
                                                                                                                                                                                                          Return: expression
                                                                                                                                                                                                          Consumed token: <<SQUAREBRACKETCLOSE>: "]" at line 41 column 12>
                                                                                                                                                                                                        Return: varPrime
                                                                                                                                                                                                      Return: var
                                                                                                                                                                                                      Consumed token: <<EQUIVALENCE>: "=" at line 41 column 14>
                                                                                                                                                                                                      Call:   expression
                                                                                                                                                                                                        Call:   var(LOOKING AHEAD...)
No. linea: 41 Identificador: t
                                                                                                                                                                                                          Visited token: <<ID>: "t" at line 41 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                          Call:   varPrime(LOOKING AHEAD...)
No. linea: 41 Punto y Coma: ;
                                                                                                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 41 column 17>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                          Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 41 column 17>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                        Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                          Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                            Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                              Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                Visited token: <<ID>: "t" at line 41 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                  Visited token: <<ID>: "t" at line 41 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 41 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                  Visited token: <<ID>: "t" at line 41 column 16>; Expected token: <"output">
                                                                                                                                                                                                                Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                  Visited token: <<ID>: "t" at line 41 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 41 column 17>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                              Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                              Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 41 column 17>; Expected token: <<MULT>>
                                                                                                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 41 column 17>; Expected token: <<DIV>>
                                                                                                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 41 column 17>; Expected token: <<MOD>>
                                                                                                                                                                                                                Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                              Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                            Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                            Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                              Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                Visited token: <<SEMICOLON>: ";" at line 41 column 17>; Expected token: <<SUM>>
                                                                                                                                                                                                                Visited token: <<SEMICOLON>: ";" at line 41 column 17>; Expected token: <<SUB>>
                                                                                                                                                                                                              Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                            Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                            Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 41 column 17>; Expected token: <"==">
                                                                                                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 41 column 17>; Expected token: <"<=">
                                                                                                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 41 column 17>; Expected token: <">=">
                                                                                                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 41 column 17>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 41 column 17>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 41 column 17>; Expected token: <"!=">
                                                                                                                                                                                                            Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                          Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Call:   simpleExpression
                                                                                                                                                                                                          Call:   additiveExpression
                                                                                                                                                                                                            Call:   term
                                                                                                                                                                                                              Call:   factor
                                                                                                                                                                                                                Visited token: <<ID>: "t" at line 41 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                  Visited token: <<ID>: "t" at line 41 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 41 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                  Visited token: <<ID>: "t" at line 41 column 16>; Expected token: <"output">
                                                                                                                                                                                                                Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                  Visited token: <<ID>: "t" at line 41 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                    Visited token: <<SEMICOLON>: ";" at line 41 column 17>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                Call:   var
                                                                                                                                                                                                                  Consumed token: <<ID>: "t" at line 41 column 16>
                                                                                                                                                                                                                  Call:   varPrime
                                                                                                                                                                                                                  Return: varPrime
                                                                                                                                                                                                                Return: var
                                                                                                                                                                                                              Return: factor
                                                                                                                                                                                                              Call:   termPrime
                                                                                                                                                                                                              Return: termPrime
                                                                                                                                                                                                            Return: term
                                                                                                                                                                                                            Call:   additiveExpressionPrime
                                                                                                                                                                                                            Return: additiveExpressionPrime
                                                                                                                                                                                                          Return: additiveExpression
                                                                                                                                                                                                          Call:   simpleExpressionPrime
                                                                                                                                                                                                          Return: simpleExpressionPrime
                                                                                                                                                                                                        Return: simpleExpression
                                                                                                                                                                                                      Return: expression
                                                                                                                                                                                                    Return: expression
                                                                                                                                                                                                    Consumed token: <<SEMICOLON>: ";" at line 41 column 17>
                                                                                                                                                                                                  Return: expressionStmt
                                                                                                                                                                                                Return: statement
                                                                                                                                                                                                Call:   statementListPrime
No. linea: 42 Identificador: i
                                                                                                                                                                                                  Call:   statement
                                                                                                                                                                                                    Call:   expressionStmt
                                                                                                                                                                                                      Call:   expression
                                                                                                                                                                                                        Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                          Visited token: <<ID>: "i" at line 42 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                          Call:   varPrime(LOOKING AHEAD...)
No. linea: 42 Operador igual: =
                                                                                                                                                                                                            Visited token: <<EQUIVALENCE>: "=" at line 42 column 11>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                          Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Visited token: <<EQUIVALENCE>: "=" at line 42 column 11>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                        Call:   expression(LOOKING AHEAD...)
                                                                                                                                                                                                          Call:   var(LOOKING AHEAD...)
No. linea: 42 Identificador: i
                                                                                                                                                                                                            Visited token: <<ID>: "i" at line 42 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                            Call:   varPrime(LOOKING AHEAD...)
No. linea: 42 Operador suma: +
                                                                                                                                                                                                              Visited token: <<SUM>: "+" at line 42 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Visited token: <<SUM>: "+" at line 42 column 15>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                          Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                            Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                              Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                  Visited token: <<ID>: "i" at line 42 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                  Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                    Visited token: <<ID>: "i" at line 42 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                    Visited token: <<SUM>: "+" at line 42 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                    Visited token: <<ID>: "i" at line 42 column 13>; Expected token: <"output">
                                                                                                                                                                                                                  Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                  Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                    Visited token: <<ID>: "i" at line 42 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                    Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                      Visited token: <<SUM>: "+" at line 42 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                  Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                    Visited token: <<SUM>: "+" at line 42 column 15>; Expected token: <<MULT>>
                                                                                                                                                                                                                    Visited token: <<SUM>: "+" at line 42 column 15>; Expected token: <<DIV>>
                                                                                                                                                                                                                    Visited token: <<SUM>: "+" at line 42 column 15>; Expected token: <<MOD>>
                                                                                                                                                                                                                  Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                              Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                              Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                  Visited token: <<SUM>: "+" at line 42 column 15>; Expected token: <<SUM>>
                                                                                                                                                                                                                Return: addop(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                  Call:   factor(LOOKING AHEAD...)
No. linea: 42 Numero entero: 1
                                                                                                                                                                                                                    Visited token: <<NUMENT>: "1" at line 42 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                    Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                      Visited token: <<NUMENT>: "1" at line 42 column 17>; Expected token: <<ID>>
                                                                                                                                                                                                                      Visited token: <<NUMENT>: "1" at line 42 column 17>; Expected token: <"output">
                                                                                                                                                                                                                    Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                    Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                      Visited token: <<NUMENT>: "1" at line 42 column 17>; Expected token: <<ID>>
                                                                                                                                                                                                                    Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                    Visited token: <<NUMENT>: "1" at line 42 column 17>; Expected token: <<NUMENT>>
                                                                                                                                                                                                                    Call:   var
                                                                                                                                                                                                                      Consumed token: <<ID>: "i" at line 42 column 9>
                                                                                                                                                                                                                      Call:   varPrime
                                                                                                                                                                                                                      Return: varPrime
                                                                                                                                                                                                                    Return: var
                                                                                                                                                                                                                    Consumed token: <<EQUIVALENCE>: "=" at line 42 column 11>
                                                                                                                                                                                                                    Call:   expression
                                                                                                                                                                                                                      Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                        Visited token: <<ID>: "i" at line 42 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                        Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                          Visited token: <<SUM>: "+" at line 42 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                      Visited token: <<SUM>: "+" at line 42 column 15>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                                      Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                        Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                          Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                            Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                              Visited token: <<ID>: "i" at line 42 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                              Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                Visited token: <<ID>: "i" at line 42 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                Visited token: <<SUM>: "+" at line 42 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                Visited token: <<ID>: "i" at line 42 column 13>; Expected token: <"output">
                                                                                                                                                                                                                              Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                              Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                Visited token: <<ID>: "i" at line 42 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                  Visited token: <<SUM>: "+" at line 42 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                            Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                            Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                              Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                                Visited token: <<SUM>: "+" at line 42 column 15>; Expected token: <<MULT>>
                                                                                                                                                                                                                                Visited token: <<SUM>: "+" at line 42 column 15>; Expected token: <<DIV>>
                                                                                                                                                                                                                                Visited token: <<SUM>: "+" at line 42 column 15>; Expected token: <<MOD>>
                                                                                                                                                                                                                              Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                            Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                          Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                          Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                            Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                              Visited token: <<SUM>: "+" at line 42 column 15>; Expected token: <<SUM>>
                                                                                                                                                                                                                            Return: addop(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                            Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                              Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                                Visited token: <<NUMENT>: "1" at line 42 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                  Visited token: <<NUMENT>: "1" at line 42 column 17>; Expected token: <<ID>>
                                                                                                                                                                                                                                  Visited token: <<NUMENT>: "1" at line 42 column 17>; Expected token: <"output">
                                                                                                                                                                                                                                Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                  Visited token: <<NUMENT>: "1" at line 42 column 17>; Expected token: <<ID>>
                                                                                                                                                                                                                                Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                Visited token: <<NUMENT>: "1" at line 42 column 17>; Expected token: <<NUMENT>>
                                                                                                                                                                                                                              Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                              Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                Call:   mulop(LOOKING AHEAD...)
No. linea: 42 Punto y Coma: ;
                                                                                                                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 42 column 18>; Expected token: <<MULT>>
                                                                                                                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 42 column 18>; Expected token: <<DIV>>
                                                                                                                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 42 column 18>; Expected token: <<MOD>>
                                                                                                                                                                                                                                Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                              Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                            Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                            Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                              Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                                Visited token: <<SEMICOLON>: ";" at line 42 column 18>; Expected token: <<SUM>>
                                                                                                                                                                                                                                Visited token: <<SEMICOLON>: ";" at line 42 column 18>; Expected token: <<SUB>>
                                                                                                                                                                                                                              Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                            Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                          Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                        Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                        Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                          Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 42 column 18>; Expected token: <"==">
                                                                                                                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 42 column 18>; Expected token: <"<=">
                                                                                                                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 42 column 18>; Expected token: <">=">
                                                                                                                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 42 column 18>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 42 column 18>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 42 column 18>; Expected token: <"!=">
                                                                                                                                                                                                                          Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                        Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                      Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                      Call:   simpleExpression
                                                                                                                                                                                                                        Call:   additiveExpression
                                                                                                                                                                                                                          Call:   term
                                                                                                                                                                                                                            Call:   factor
                                                                                                                                                                                                                              Visited token: <<ID>: "i" at line 42 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                              Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                Visited token: <<ID>: "i" at line 42 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                Visited token: <<SUM>: "+" at line 42 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                Visited token: <<ID>: "i" at line 42 column 13>; Expected token: <"output">
                                                                                                                                                                                                                              Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                              Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                Visited token: <<ID>: "i" at line 42 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                  Visited token: <<SUM>: "+" at line 42 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                              Call:   var
                                                                                                                                                                                                                                Consumed token: <<ID>: "i" at line 42 column 13>
                                                                                                                                                                                                                                Call:   varPrime
                                                                                                                                                                                                                                Return: varPrime
                                                                                                                                                                                                                              Return: var
                                                                                                                                                                                                                            Return: factor
                                                                                                                                                                                                                            Call:   termPrime
                                                                                                                                                                                                                            Return: termPrime
                                                                                                                                                                                                                          Return: term
                                                                                                                                                                                                                          Call:   additiveExpressionPrime
                                                                                                                                                                                                                            Call:   addop
                                                                                                                                                                                                                              Consumed token: <<SUM>: "+" at line 42 column 15>
                                                                                                                                                                                                                            Return: addop
                                                                                                                                                                                                                            Call:   term
                                                                                                                                                                                                                              Call:   factor
                                                                                                                                                                                                                                Visited token: <<NUMENT>: "1" at line 42 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                  Visited token: <<NUMENT>: "1" at line 42 column 17>; Expected token: <<ID>>
                                                                                                                                                                                                                                  Visited token: <<NUMENT>: "1" at line 42 column 17>; Expected token: <"output">
                                                                                                                                                                                                                                Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                  Visited token: <<NUMENT>: "1" at line 42 column 17>; Expected token: <<ID>>
                                                                                                                                                                                                                                Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                Visited token: <<NUMENT>: "1" at line 42 column 17>; Expected token: <<NUMENT>>
                                                                                                                                                                                                                                Consumed token: <<NUMENT>: "1" at line 42 column 17>
                                                                                                                                                                                                                              Return: factor
                                                                                                                                                                                                                              Call:   termPrime
                                                                                                                                                                                                                              Return: termPrime
                                                                                                                                                                                                                            Return: term
                                                                                                                                                                                                                            Call:   additiveExpressionPrime
                                                                                                                                                                                                                            Return: additiveExpressionPrime
                                                                                                                                                                                                                          Return: additiveExpressionPrime
                                                                                                                                                                                                                        Return: additiveExpression
                                                                                                                                                                                                                        Call:   simpleExpressionPrime
                                                                                                                                                                                                                        Return: simpleExpressionPrime
                                                                                                                                                                                                                      Return: simpleExpression
                                                                                                                                                                                                                    Return: expression
                                                                                                                                                                                                                  Return: expression
                                                                                                                                                                                                                  Consumed token: <<SEMICOLON>: ";" at line 42 column 18>
                                                                                                                                                                                                                Return: expressionStmt
                                                                                                                                                                                                              Return: statement
                                                                                                                                                                                                              Call:   statementListPrime
No. linea: 43 Llave final: }
                                                                                                                                                                                                              Return: statementListPrime
                                                                                                                                                                                                            Return: statementListPrime
                                                                                                                                                                                                          Return: statementListPrime
                                                                                                                                                                                                        Return: statementListPrime
                                                                                                                                                                                                      Return: statementListPrime
                                                                                                                                                                                                    Return: statementListPrime
                                                                                                                                                                                                  Return: statementList
                                                                                                                                                                                                  Consumed token: <<CURLYBRACKETCLOSE>: "}" at line 43 column 5>
                                                                                                                                                                                                Return: compoundStmt
                                                                                                                                                                                              Return: statement
                                                                                                                                                                                            Return: iterationStmt
                                                                                                                                                                                          Return: statement
                                                                                                                                                                                          Call:   statementListPrime
No. linea: 44 Llave final: }
                                                                                                                                                                                          Return: statementListPrime
                                                                                                                                                                                        Return: statementListPrime
                                                                                                                                                                                      Return: statementListPrime
                                                                                                                                                                                    Return: statementList
                                                                                                                                                                                    Consumed token: <<CURLYBRACKETCLOSE>: "}" at line 44 column 1>
                                                                                                                                                                                  Return: compoundStmt
                                                                                                                                                                                Return: funDeclaration
                                                                                                                                                                              Return: declaration
                                                                                                                                                                              Call:   declarationListPrime
No. linea: 47 Declaracion void: void
                                                                                                                                                                                Call:   declaration
                                                                                                                                                                                  Call:   varDeclaration(LOOKING AHEAD...)
                                                                                                                                                                                    Call:   typeSpecifier(LOOKING AHEAD...)
                                                                                                                                                                                      Visited token: <"void" at line 47 column 1>; Expected token: <"int">
                                                                                                                                                                                      Visited token: <"void" at line 47 column 1>; Expected token: <"float">
                                                                                                                                                                                      Visited token: <"void" at line 47 column 1>; Expected token: <"char">
                                                                                                                                                                                      Visited token: <"void" at line 47 column 1>; Expected token: <"void">
                                                                                                                                                                                    Return: typeSpecifier(LOOKAHEAD SUCCEEDED)
No. linea: 47 Identificador: main
                                                                                                                                                                                    Visited token: <<ID>: "main" at line 47 column 6>; Expected token: <<ID>>
                                                                                                                                                                                    Call:   varDeclarationPrime(LOOKING AHEAD...)
No. linea: 47 Parentesis incial: (
                                                                                                                                                                                      Visited token: <<BRACKETOPEN>: "(" at line 47 column 10>; Expected token: <<SEMICOLON>>
                                                                                                                                                                                      Visited token: <<BRACKETOPEN>: "(" at line 47 column 10>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                      Visited token: <<BRACKETOPEN>: "(" at line 47 column 10>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                    Return: varDeclarationPrime(LOOKAHEAD FAILED)
                                                                                                                                                                                  Return: varDeclaration(LOOKAHEAD FAILED)
                                                                                                                                                                                  Call:   funDeclaration(LOOKING AHEAD...)
                                                                                                                                                                                    Call:   typeSpecifier(LOOKING AHEAD...)
                                                                                                                                                                                      Visited token: <"void" at line 47 column 1>; Expected token: <"int">
                                                                                                                                                                                      Visited token: <"void" at line 47 column 1>; Expected token: <"float">
                                                                                                                                                                                      Visited token: <"void" at line 47 column 1>; Expected token: <"char">
                                                                                                                                                                                      Visited token: <"void" at line 47 column 1>; Expected token: <"void">
                                                                                                                                                                                    Return: typeSpecifier(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                    Visited token: <<ID>: "main" at line 47 column 6>; Expected token: <<ID>>
                                                                                                                                                                                    Visited token: <<BRACKETOPEN>: "(" at line 47 column 10>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                    Call:   funDeclaration
                                                                                                                                                                                      Call:   typeSpecifier
                                                                                                                                                                                        Consumed token: <"void" at line 47 column 1>
                                                                                                                                                                                      Return: typeSpecifier
                                                                                                                                                                                      Consumed token: <<ID>: "main" at line 47 column 6>
                                                                                                                                                                                      Consumed token: <<BRACKETOPEN>: "(" at line 47 column 10>
                                                                                                                                                                                      Call:   params
                                                                                                                                                                                        Call:   paramList(LOOKING AHEAD...)
                                                                                                                                                                                          Call:   param(LOOKING AHEAD...)
                                                                                                                                                                                            Call:   typeSpecifier(LOOKING AHEAD...)
No. linea: 47 Declaracion void: void
                                                                                                                                                                                              Visited token: <"void" at line 47 column 11>; Expected token: <"int">
                                                                                                                                                                                              Visited token: <"void" at line 47 column 11>; Expected token: <"float">
                                                                                                                                                                                              Visited token: <"void" at line 47 column 11>; Expected token: <"char">
                                                                                                                                                                                              Visited token: <"void" at line 47 column 11>; Expected token: <"void">
                                                                                                                                                                                            Return: typeSpecifier(LOOKAHEAD SUCCEEDED)
No. linea: 47 Parentesis final: )
                                                                                                                                                                                            Visited token: <<BRACKETCLOSE>: ")" at line 47 column 15>; Expected token: <<ID>>
                                                                                                                                                                                          Return: param(LOOKAHEAD FAILED)
                                                                                                                                                                                        Return: paramList(LOOKAHEAD FAILED)
                                                                                                                                                                                        Visited token: <"void" at line 47 column 11>; Expected token: <"void">
                                                                                                                                                                                        Consumed token: <"void" at line 47 column 11>
                                                                                                                                                                                      Return: params
                                                                                                                                                                                      Consumed token: <<BRACKETCLOSE>: ")" at line 47 column 15>
                                                                                                                                                                                      Call:   compoundStmt
No. linea: 48 Llave incial: {
                                                                                                                                                                                        Consumed token: <<CURLYBRACKETOPEN>: "{" at line 48 column 1>
                                                                                                                                                                                        Call:   localDeclarations
                                                                                                                                                                                          Call:   localDeclarationsPrime
No. linea: 49 Declaracion int: int
                                                                                                                                                                                            Call:   varDeclaration
                                                                                                                                                                                              Call:   typeSpecifier
                                                                                                                                                                                                Consumed token: <"int" at line 49 column 5>
                                                                                                                                                                                              Return: typeSpecifier
No. linea: 49 Identificador: i
                                                                                                                                                                                              Consumed token: <<ID>: "i" at line 49 column 9>
                                                                                                                                                                                              Call:   varDeclarationPrime
No. linea: 49 Punto y Coma: ;
                                                                                                                                                                                                Consumed token: <<SEMICOLON>: ";" at line 49 column 10>
                                                                                                                                                                                              Return: varDeclarationPrime
                                                                                                                                                                                            Return: varDeclaration
                                                                                                                                                                                            Call:   localDeclarationsPrime
No. linea: 51 Identificador: i
                                                                                                                                                                                            Return: localDeclarationsPrime
                                                                                                                                                                                          Return: localDeclarationsPrime
                                                                                                                                                                                        Return: localDeclarations
                                                                                                                                                                                        Call:   statementList
                                                                                                                                                                                          Call:   statementListPrime
                                                                                                                                                                                            Call:   statement
                                                                                                                                                                                              Call:   expressionStmt
                                                                                                                                                                                                Call:   expression
                                                                                                                                                                                                  Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                    Visited token: <<ID>: "i" at line 51 column 5>; Expected token: <<ID>>
                                                                                                                                                                                                    Call:   varPrime(LOOKING AHEAD...)
No. linea: 51 Operador igual: =
                                                                                                                                                                                                      Visited token: <<EQUIVALENCE>: "=" at line 51 column 7>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                  Visited token: <<EQUIVALENCE>: "=" at line 51 column 7>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                  Call:   expression(LOOKING AHEAD...)
                                                                                                                                                                                                    Call:   var(LOOKING AHEAD...)
No. linea: 51 Numero entero: 0
                                                                                                                                                                                                      Visited token: <<NUMENT>: "0" at line 51 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                    Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                    Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                      Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                        Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                          Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<NUMENT>: "0" at line 51 column 9>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                            Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<NUMENT>: "0" at line 51 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                              Visited token: <<NUMENT>: "0" at line 51 column 9>; Expected token: <"output">
                                                                                                                                                                                                            Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<NUMENT>: "0" at line 51 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                            Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                            Visited token: <<NUMENT>: "0" at line 51 column 9>; Expected token: <<NUMENT>>
                                                                                                                                                                                                          Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                            Call:   mulop(LOOKING AHEAD...)
No. linea: 51 Punto y Coma: ;
                                                                                                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 51 column 10>; Expected token: <<MULT>>
                                                                                                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 51 column 10>; Expected token: <<DIV>>
                                                                                                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 51 column 10>; Expected token: <<MOD>>
                                                                                                                                                                                                            Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                          Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                          Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 51 column 10>; Expected token: <<SUM>>
                                                                                                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 51 column 10>; Expected token: <<SUB>>
                                                                                                                                                                                                          Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                        Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                        Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                          Visited token: <<SEMICOLON>: ";" at line 51 column 10>; Expected token: <"==">
                                                                                                                                                                                                          Visited token: <<SEMICOLON>: ";" at line 51 column 10>; Expected token: <"<=">
                                                                                                                                                                                                          Visited token: <<SEMICOLON>: ";" at line 51 column 10>; Expected token: <">=">
                                                                                                                                                                                                          Visited token: <<SEMICOLON>: ";" at line 51 column 10>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                          Visited token: <<SEMICOLON>: ";" at line 51 column 10>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                          Visited token: <<SEMICOLON>: ";" at line 51 column 10>; Expected token: <"!=">
                                                                                                                                                                                                        Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                      Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                    Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                  Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                  Call:   var
                                                                                                                                                                                                    Consumed token: <<ID>: "i" at line 51 column 5>
                                                                                                                                                                                                    Call:   varPrime
                                                                                                                                                                                                    Return: varPrime
                                                                                                                                                                                                  Return: var
                                                                                                                                                                                                  Consumed token: <<EQUIVALENCE>: "=" at line 51 column 7>
                                                                                                                                                                                                  Call:   expression
                                                                                                                                                                                                    Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                      Visited token: <<NUMENT>: "0" at line 51 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                    Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                    Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                      Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                        Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                          Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<NUMENT>: "0" at line 51 column 9>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                            Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<NUMENT>: "0" at line 51 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                              Visited token: <<NUMENT>: "0" at line 51 column 9>; Expected token: <"output">
                                                                                                                                                                                                            Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<NUMENT>: "0" at line 51 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                            Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                            Visited token: <<NUMENT>: "0" at line 51 column 9>; Expected token: <<NUMENT>>
                                                                                                                                                                                                          Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                            Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 51 column 10>; Expected token: <<MULT>>
                                                                                                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 51 column 10>; Expected token: <<DIV>>
                                                                                                                                                                                                              Visited token: <<SEMICOLON>: ";" at line 51 column 10>; Expected token: <<MOD>>
                                                                                                                                                                                                            Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                          Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                          Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 51 column 10>; Expected token: <<SUM>>
                                                                                                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 51 column 10>; Expected token: <<SUB>>
                                                                                                                                                                                                          Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                        Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                        Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                          Visited token: <<SEMICOLON>: ";" at line 51 column 10>; Expected token: <"==">
                                                                                                                                                                                                          Visited token: <<SEMICOLON>: ";" at line 51 column 10>; Expected token: <"<=">
                                                                                                                                                                                                          Visited token: <<SEMICOLON>: ";" at line 51 column 10>; Expected token: <">=">
                                                                                                                                                                                                          Visited token: <<SEMICOLON>: ";" at line 51 column 10>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                          Visited token: <<SEMICOLON>: ";" at line 51 column 10>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                          Visited token: <<SEMICOLON>: ";" at line 51 column 10>; Expected token: <"!=">
                                                                                                                                                                                                        Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                      Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                    Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                    Call:   simpleExpression
                                                                                                                                                                                                      Call:   additiveExpression
                                                                                                                                                                                                        Call:   term
                                                                                                                                                                                                          Call:   factor
                                                                                                                                                                                                            Visited token: <<NUMENT>: "0" at line 51 column 9>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                            Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<NUMENT>: "0" at line 51 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                              Visited token: <<NUMENT>: "0" at line 51 column 9>; Expected token: <"output">
                                                                                                                                                                                                            Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<NUMENT>: "0" at line 51 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                            Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                            Visited token: <<NUMENT>: "0" at line 51 column 9>; Expected token: <<NUMENT>>
                                                                                                                                                                                                            Consumed token: <<NUMENT>: "0" at line 51 column 9>
                                                                                                                                                                                                          Return: factor
                                                                                                                                                                                                          Call:   termPrime
                                                                                                                                                                                                          Return: termPrime
                                                                                                                                                                                                        Return: term
                                                                                                                                                                                                        Call:   additiveExpressionPrime
                                                                                                                                                                                                        Return: additiveExpressionPrime
                                                                                                                                                                                                      Return: additiveExpression
                                                                                                                                                                                                      Call:   simpleExpressionPrime
                                                                                                                                                                                                      Return: simpleExpressionPrime
                                                                                                                                                                                                    Return: simpleExpression
                                                                                                                                                                                                  Return: expression
                                                                                                                                                                                                Return: expression
                                                                                                                                                                                                Consumed token: <<SEMICOLON>: ";" at line 51 column 10>
                                                                                                                                                                                              Return: expressionStmt
                                                                                                                                                                                            Return: statement
                                                                                                                                                                                            Call:   statementListPrime
No. linea: 52 Declaracion while: while
                                                                                                                                                                                              Call:   statement
                                                                                                                                                                                                Call:   iterationStmt
                                                                                                                                                                                                  Consumed token: <"while" at line 52 column 5>
No. linea: 52 Parentesis incial: (
                                                                                                                                                                                                  Consumed token: <<BRACKETOPEN>: "(" at line 52 column 11>
                                                                                                                                                                                                  Call:   expression
                                                                                                                                                                                                    Call:   var(LOOKING AHEAD...)
No. linea: 52 Identificador: i
                                                                                                                                                                                                      Visited token: <<ID>: "i" at line 52 column 12>; Expected token: <<ID>>
                                                                                                                                                                                                      Call:   varPrime(LOOKING AHEAD...)
No. linea: 52 Operador menor que: <
                                                                                                                                                                                                        Visited token: <<ANGLEBRACKETOPEN>: "<" at line 52 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                    Visited token: <<ANGLEBRACKETOPEN>: "<" at line 52 column 14>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                    Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                      Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                        Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                          Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<ID>: "i" at line 52 column 12>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                            Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<ID>: "i" at line 52 column 12>; Expected token: <<ID>>
                                                                                                                                                                                                              Visited token: <<ANGLEBRACKETOPEN>: "<" at line 52 column 14>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                              Visited token: <<ID>: "i" at line 52 column 12>; Expected token: <"output">
                                                                                                                                                                                                            Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<ID>: "i" at line 52 column 12>; Expected token: <<ID>>
                                                                                                                                                                                                              Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                Visited token: <<ANGLEBRACKETOPEN>: "<" at line 52 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                            Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<ANGLEBRACKETOPEN>: "<" at line 52 column 14>; Expected token: <<MULT>>
                                                                                                                                                                                                              Visited token: <<ANGLEBRACKETOPEN>: "<" at line 52 column 14>; Expected token: <<DIV>>
                                                                                                                                                                                                              Visited token: <<ANGLEBRACKETOPEN>: "<" at line 52 column 14>; Expected token: <<MOD>>
                                                                                                                                                                                                            Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                          Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                          Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                            Visited token: <<ANGLEBRACKETOPEN>: "<" at line 52 column 14>; Expected token: <<SUM>>
                                                                                                                                                                                                            Visited token: <<ANGLEBRACKETOPEN>: "<" at line 52 column 14>; Expected token: <<SUB>>
                                                                                                                                                                                                          Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                        Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                      Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                        Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                          Visited token: <<ANGLEBRACKETOPEN>: "<" at line 52 column 14>; Expected token: <"==">
                                                                                                                                                                                                          Visited token: <<ANGLEBRACKETOPEN>: "<" at line 52 column 14>; Expected token: <"<=">
                                                                                                                                                                                                          Visited token: <<ANGLEBRACKETOPEN>: "<" at line 52 column 14>; Expected token: <">=">
                                                                                                                                                                                                          Visited token: <<ANGLEBRACKETOPEN>: "<" at line 52 column 14>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                        Return: relop(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                          Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                            Call:   factor(LOOKING AHEAD...)
No. linea: 52 Numero entero: 10
                                                                                                                                                                                                              Visited token: <<NUMENT>: "10" at line 52 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                              Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                Visited token: <<NUMENT>: "10" at line 52 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                                Visited token: <<NUMENT>: "10" at line 52 column 16>; Expected token: <"output">
                                                                                                                                                                                                              Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                              Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                Visited token: <<NUMENT>: "10" at line 52 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                              Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                              Visited token: <<NUMENT>: "10" at line 52 column 16>; Expected token: <<NUMENT>>
                                                                                                                                                                                                            Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                            Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                              Call:   mulop(LOOKING AHEAD...)
No. linea: 52 Parentesis final: )
                                                                                                                                                                                                                Visited token: <<BRACKETCLOSE>: ")" at line 52 column 18>; Expected token: <<MULT>>
                                                                                                                                                                                                                Visited token: <<BRACKETCLOSE>: ")" at line 52 column 18>; Expected token: <<DIV>>
                                                                                                                                                                                                                Visited token: <<BRACKETCLOSE>: ")" at line 52 column 18>; Expected token: <<MOD>>
                                                                                                                                                                                                              Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                            Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                          Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                            Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<BRACKETCLOSE>: ")" at line 52 column 18>; Expected token: <<SUM>>
                                                                                                                                                                                                              Visited token: <<BRACKETCLOSE>: ")" at line 52 column 18>; Expected token: <<SUB>>
                                                                                                                                                                                                            Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                          Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                        Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                          Visited token: <<BRACKETCLOSE>: ")" at line 52 column 18>; Expected token: <"==">
                                                                                                                                                                                                          Visited token: <<BRACKETCLOSE>: ")" at line 52 column 18>; Expected token: <"<=">
                                                                                                                                                                                                          Visited token: <<BRACKETCLOSE>: ")" at line 52 column 18>; Expected token: <">=">
                                                                                                                                                                                                          Visited token: <<BRACKETCLOSE>: ")" at line 52 column 18>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                          Visited token: <<BRACKETCLOSE>: ")" at line 52 column 18>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                          Visited token: <<BRACKETCLOSE>: ")" at line 52 column 18>; Expected token: <"!=">
                                                                                                                                                                                                        Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                      Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                    Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                    Call:   simpleExpression
                                                                                                                                                                                                      Call:   additiveExpression
                                                                                                                                                                                                        Call:   term
                                                                                                                                                                                                          Call:   factor
                                                                                                                                                                                                            Visited token: <<ID>: "i" at line 52 column 12>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                            Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<ID>: "i" at line 52 column 12>; Expected token: <<ID>>
                                                                                                                                                                                                              Visited token: <<ANGLEBRACKETOPEN>: "<" at line 52 column 14>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                              Visited token: <<ID>: "i" at line 52 column 12>; Expected token: <"output">
                                                                                                                                                                                                            Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                              Visited token: <<ID>: "i" at line 52 column 12>; Expected token: <<ID>>
                                                                                                                                                                                                              Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                Visited token: <<ANGLEBRACKETOPEN>: "<" at line 52 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                            Call:   var
                                                                                                                                                                                                              Consumed token: <<ID>: "i" at line 52 column 12>
                                                                                                                                                                                                              Call:   varPrime
                                                                                                                                                                                                              Return: varPrime
                                                                                                                                                                                                            Return: var
                                                                                                                                                                                                          Return: factor
                                                                                                                                                                                                          Call:   termPrime
                                                                                                                                                                                                          Return: termPrime
                                                                                                                                                                                                        Return: term
                                                                                                                                                                                                        Call:   additiveExpressionPrime
                                                                                                                                                                                                        Return: additiveExpressionPrime
                                                                                                                                                                                                      Return: additiveExpression
                                                                                                                                                                                                      Call:   simpleExpressionPrime
                                                                                                                                                                                                        Call:   relop
                                                                                                                                                                                                          Consumed token: <<ANGLEBRACKETOPEN>: "<" at line 52 column 14>
                                                                                                                                                                                                        Return: relop
                                                                                                                                                                                                        Call:   additiveExpression
                                                                                                                                                                                                          Call:   term
                                                                                                                                                                                                            Call:   factor
                                                                                                                                                                                                              Visited token: <<NUMENT>: "10" at line 52 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                              Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                Visited token: <<NUMENT>: "10" at line 52 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                                Visited token: <<NUMENT>: "10" at line 52 column 16>; Expected token: <"output">
                                                                                                                                                                                                              Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                              Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                Visited token: <<NUMENT>: "10" at line 52 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                              Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                              Visited token: <<NUMENT>: "10" at line 52 column 16>; Expected token: <<NUMENT>>
                                                                                                                                                                                                              Consumed token: <<NUMENT>: "10" at line 52 column 16>
                                                                                                                                                                                                            Return: factor
                                                                                                                                                                                                            Call:   termPrime
                                                                                                                                                                                                            Return: termPrime
                                                                                                                                                                                                          Return: term
                                                                                                                                                                                                          Call:   additiveExpressionPrime
                                                                                                                                                                                                          Return: additiveExpressionPrime
                                                                                                                                                                                                        Return: additiveExpression
                                                                                                                                                                                                      Return: simpleExpressionPrime
                                                                                                                                                                                                    Return: simpleExpression
                                                                                                                                                                                                  Return: expression
                                                                                                                                                                                                  Consumed token: <<BRACKETCLOSE>: ")" at line 52 column 18>
                                                                                                                                                                                                  Call:   statement
No. linea: 53 Llave incial: {
                                                                                                                                                                                                    Call:   compoundStmt
                                                                                                                                                                                                      Consumed token: <<CURLYBRACKETOPEN>: "{" at line 53 column 5>
                                                                                                                                                                                                      Call:   localDeclarations
                                                                                                                                                                                                        Call:   localDeclarationsPrime
No. linea: 54 Identificador: x
                                                                                                                                                                                                        Return: localDeclarationsPrime
                                                                                                                                                                                                      Return: localDeclarations
                                                                                                                                                                                                      Call:   statementList
                                                                                                                                                                                                        Call:   statementListPrime
                                                                                                                                                                                                          Call:   statement
                                                                                                                                                                                                            Call:   expressionStmt
                                                                                                                                                                                                              Call:   expression
                                                                                                                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                  Visited token: <<ID>: "x" at line 54 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
No. linea: 54 Corchete incial: [
                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETOPEN>: "[" at line 54 column 10>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                    Call:   expression(LOOKING AHEAD...)
                                                                                                                                                                                                                      Call:   var(LOOKING AHEAD...)
No. linea: 54 Identificador: i
                                                                                                                                                                                                                        Visited token: <<ID>: "i" at line 54 column 11>; Expected token: <<ID>>
                                                                                                                                                                                                                        Call:   varPrime(LOOKING AHEAD...)
No. linea: 54 Corchete final: ]
                                                                                                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                                      Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                        Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                          Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                            Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                              Visited token: <<ID>: "i" at line 54 column 11>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                              Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                Visited token: <<ID>: "i" at line 54 column 11>; Expected token: <<ID>>
                                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                Visited token: <<ID>: "i" at line 54 column 11>; Expected token: <"output">
                                                                                                                                                                                                                              Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                              Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                Visited token: <<ID>: "i" at line 54 column 11>; Expected token: <<ID>>
                                                                                                                                                                                                                                Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                            Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                            Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                              Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<MULT>>
                                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<DIV>>
                                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<MOD>>
                                                                                                                                                                                                                              Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                            Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                          Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                          Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                            Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<SUM>>
                                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<SUB>>
                                                                                                                                                                                                                            Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                          Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                        Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                        Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                          Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <"==">
                                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <"<=">
                                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <">=">
                                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <"!=">
                                                                                                                                                                                                                          Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                        Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                      Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                    Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<SQUAREBRACKETCLOSE>>
No. linea: 54 Operador igual: =
                                                                                                                                                                                                                    Visited token: <<EQUIVALENCE>: "=" at line 54 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                Visited token: <<EQUIVALENCE>: "=" at line 54 column 14>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                                Call:   var
                                                                                                                                                                                                                  Consumed token: <<ID>: "x" at line 54 column 9>
                                                                                                                                                                                                                  Call:   varPrime
                                                                                                                                                                                                                    Consumed token: <<SQUAREBRACKETOPEN>: "[" at line 54 column 10>
                                                                                                                                                                                                                    Call:   expression
                                                                                                                                                                                                                      Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                        Visited token: <<ID>: "i" at line 54 column 11>; Expected token: <<ID>>
                                                                                                                                                                                                                        Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                                      Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                        Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                          Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                            Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                              Visited token: <<ID>: "i" at line 54 column 11>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                              Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                Visited token: <<ID>: "i" at line 54 column 11>; Expected token: <<ID>>
                                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                Visited token: <<ID>: "i" at line 54 column 11>; Expected token: <"output">
                                                                                                                                                                                                                              Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                              Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                Visited token: <<ID>: "i" at line 54 column 11>; Expected token: <<ID>>
                                                                                                                                                                                                                                Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                            Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                            Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                              Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<MULT>>
                                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<DIV>>
                                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<MOD>>
                                                                                                                                                                                                                              Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                            Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                          Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                          Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                            Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<SUM>>
                                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<SUB>>
                                                                                                                                                                                                                            Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                          Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                        Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                        Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                          Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <"==">
                                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <"<=">
                                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <">=">
                                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <"!=">
                                                                                                                                                                                                                          Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                        Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                      Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                      Call:   simpleExpression
                                                                                                                                                                                                                        Call:   additiveExpression
                                                                                                                                                                                                                          Call:   term
                                                                                                                                                                                                                            Call:   factor
                                                                                                                                                                                                                              Visited token: <<ID>: "i" at line 54 column 11>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                              Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                Visited token: <<ID>: "i" at line 54 column 11>; Expected token: <<ID>>
                                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                Visited token: <<ID>: "i" at line 54 column 11>; Expected token: <"output">
                                                                                                                                                                                                                              Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                              Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                Visited token: <<ID>: "i" at line 54 column 11>; Expected token: <<ID>>
                                                                                                                                                                                                                                Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                              Call:   var
                                                                                                                                                                                                                                Consumed token: <<ID>: "i" at line 54 column 11>
                                                                                                                                                                                                                                Call:   varPrime
                                                                                                                                                                                                                                Return: varPrime
                                                                                                                                                                                                                              Return: var
                                                                                                                                                                                                                            Return: factor
                                                                                                                                                                                                                            Call:   termPrime
                                                                                                                                                                                                                            Return: termPrime
                                                                                                                                                                                                                          Return: term
                                                                                                                                                                                                                          Call:   additiveExpressionPrime
                                                                                                                                                                                                                          Return: additiveExpressionPrime
                                                                                                                                                                                                                        Return: additiveExpression
                                                                                                                                                                                                                        Call:   simpleExpressionPrime
                                                                                                                                                                                                                        Return: simpleExpressionPrime
                                                                                                                                                                                                                      Return: simpleExpression
                                                                                                                                                                                                                    Return: expression
                                                                                                                                                                                                                    Consumed token: <<SQUAREBRACKETCLOSE>: "]" at line 54 column 12>
                                                                                                                                                                                                                  Return: varPrime
                                                                                                                                                                                                                Return: var
                                                                                                                                                                                                                Consumed token: <<EQUIVALENCE>: "=" at line 54 column 14>
                                                                                                                                                                                                                Call:   expression
                                                                                                                                                                                                                  Call:   var(LOOKING AHEAD...)
No. linea: 54 Sentencia input: input
                                                                                                                                                                                                                    Visited token: <"input" at line 54 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                                  Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                  Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                    Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                      Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                        Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                          Visited token: <"input" at line 54 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                          Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                            Visited token: <"input" at line 54 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                                            Visited token: <"input" at line 54 column 16>; Expected token: <"output">
                                                                                                                                                                                                                          Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                            Visited token: <"input" at line 54 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                                          Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                          Visited token: <"input" at line 54 column 16>; Expected token: <<NUMENT>>
                                                                                                                                                                                                                          Visited token: <"input" at line 54 column 16>; Expected token: <<NUMREAL>>
                                                                                                                                                                                                                          Visited token: <"input" at line 54 column 16>; Expected token: <<SIMPLECHAR>>
                                                                                                                                                                                                                        Return: factor(LOOKAHEAD FAILED)
                                                                                                                                                                                                                      Return: term(LOOKAHEAD FAILED)
                                                                                                                                                                                                                    Return: additiveExpression(LOOKAHEAD FAILED)
                                                                                                                                                                                                                  Return: simpleExpression(LOOKAHEAD FAILED)
                                                                                                                                                                                                                  Visited token: <"input" at line 54 column 16>; Expected token: <"input">
No. linea: 54 Parentesis incial: (
                                                                                                                                                                                                                  Visited token: <<BRACKETOPEN>: "(" at line 54 column 21>; Expected token: <<BRACKETOPEN>>
No. linea: 54 Parentesis final: )
                                                                                                                                                                                                                  Visited token: <<BRACKETCLOSE>: ")" at line 54 column 22>; Expected token: <<BRACKETCLOSE>>
                                                                                                                                                                                                                  Consumed token: <"input" at line 54 column 16>
                                                                                                                                                                                                                  Consumed token: <<BRACKETOPEN>: "(" at line 54 column 21>
                                                                                                                                                                                                                  Consumed token: <<BRACKETCLOSE>: ")" at line 54 column 22>
                                                                                                                                                                                                                Return: expression
                                                                                                                                                                                                              Return: expression
No. linea: 54 Punto y Coma: ;
                                                                                                                                                                                                              Consumed token: <<SEMICOLON>: ";" at line 54 column 23>
                                                                                                                                                                                                            Return: expressionStmt
                                                                                                                                                                                                          Return: statement
                                                                                                                                                                                                          Call:   statementListPrime
No. linea: 55 Identificador: i
                                                                                                                                                                                                            Call:   statement
                                                                                                                                                                                                              Call:   expressionStmt
                                                                                                                                                                                                                Call:   expression
                                                                                                                                                                                                                  Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                    Visited token: <<ID>: "i" at line 55 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                                    Call:   varPrime(LOOKING AHEAD...)
No. linea: 55 Operador igual: =
                                                                                                                                                                                                                      Visited token: <<EQUIVALENCE>: "=" at line 55 column 11>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                  Visited token: <<EQUIVALENCE>: "=" at line 55 column 11>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                                  Call:   expression(LOOKING AHEAD...)
                                                                                                                                                                                                                    Call:   var(LOOKING AHEAD...)
No. linea: 55 Identificador: i
                                                                                                                                                                                                                      Visited token: <<ID>: "i" at line 55 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                      Call:   varPrime(LOOKING AHEAD...)
No. linea: 55 Operador suma: +
                                                                                                                                                                                                                        Visited token: <<SUM>: "+" at line 55 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                    Visited token: <<SUM>: "+" at line 55 column 15>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                                    Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                      Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                        Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                          Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                            Visited token: <<ID>: "i" at line 55 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                            Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                              Visited token: <<ID>: "i" at line 55 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                              Visited token: <<SUM>: "+" at line 55 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                              Visited token: <<ID>: "i" at line 55 column 13>; Expected token: <"output">
                                                                                                                                                                                                                            Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                              Visited token: <<ID>: "i" at line 55 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                              Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                Visited token: <<SUM>: "+" at line 55 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                          Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                          Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                            Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                              Visited token: <<SUM>: "+" at line 55 column 15>; Expected token: <<MULT>>
                                                                                                                                                                                                                              Visited token: <<SUM>: "+" at line 55 column 15>; Expected token: <<DIV>>
                                                                                                                                                                                                                              Visited token: <<SUM>: "+" at line 55 column 15>; Expected token: <<MOD>>
                                                                                                                                                                                                                            Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                          Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                        Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                        Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                          Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                            Visited token: <<SUM>: "+" at line 55 column 15>; Expected token: <<SUM>>
                                                                                                                                                                                                                          Return: addop(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                          Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                            Call:   factor(LOOKING AHEAD...)
No. linea: 55 Numero entero: 1
                                                                                                                                                                                                                              Visited token: <<NUMENT>: "1" at line 55 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                              Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                Visited token: <<NUMENT>: "1" at line 55 column 17>; Expected token: <<ID>>
                                                                                                                                                                                                                                Visited token: <<NUMENT>: "1" at line 55 column 17>; Expected token: <"output">
                                                                                                                                                                                                                              Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                              Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                Visited token: <<NUMENT>: "1" at line 55 column 17>; Expected token: <<ID>>
                                                                                                                                                                                                                              Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                              Visited token: <<NUMENT>: "1" at line 55 column 17>; Expected token: <<NUMENT>>
                                                                                                                                                                                                                              Call:   var
                                                                                                                                                                                                                                Consumed token: <<ID>: "i" at line 55 column 9>
                                                                                                                                                                                                                                Call:   varPrime
                                                                                                                                                                                                                                Return: varPrime
                                                                                                                                                                                                                              Return: var
                                                                                                                                                                                                                              Consumed token: <<EQUIVALENCE>: "=" at line 55 column 11>
                                                                                                                                                                                                                              Call:   expression
                                                                                                                                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                  Visited token: <<ID>: "i" at line 55 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                    Visited token: <<SUM>: "+" at line 55 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                Visited token: <<SUM>: "+" at line 55 column 15>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                                                Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                  Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                    Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                                      Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                                        Visited token: <<ID>: "i" at line 55 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                        Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                          Visited token: <<ID>: "i" at line 55 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                          Visited token: <<SUM>: "+" at line 55 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                          Visited token: <<ID>: "i" at line 55 column 13>; Expected token: <"output">
                                                                                                                                                                                                                                        Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                        Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                          Visited token: <<ID>: "i" at line 55 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                          Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                            Visited token: <<SUM>: "+" at line 55 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                          Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                        Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                      Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                      Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                        Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                                          Visited token: <<SUM>: "+" at line 55 column 15>; Expected token: <<MULT>>
                                                                                                                                                                                                                                          Visited token: <<SUM>: "+" at line 55 column 15>; Expected token: <<DIV>>
                                                                                                                                                                                                                                          Visited token: <<SUM>: "+" at line 55 column 15>; Expected token: <<MOD>>
                                                                                                                                                                                                                                        Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                      Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                    Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                    Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                      Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                                        Visited token: <<SUM>: "+" at line 55 column 15>; Expected token: <<SUM>>
                                                                                                                                                                                                                                      Return: addop(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                      Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                                        Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                                          Visited token: <<NUMENT>: "1" at line 55 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                          Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "1" at line 55 column 17>; Expected token: <<ID>>
                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "1" at line 55 column 17>; Expected token: <"output">
                                                                                                                                                                                                                                          Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "1" at line 55 column 17>; Expected token: <<ID>>
                                                                                                                                                                                                                                          Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                          Visited token: <<NUMENT>: "1" at line 55 column 17>; Expected token: <<NUMENT>>
                                                                                                                                                                                                                                        Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                        Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                          Call:   mulop(LOOKING AHEAD...)
No. linea: 55 Punto y Coma: ;
                                                                                                                                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 55 column 18>; Expected token: <<MULT>>
                                                                                                                                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 55 column 18>; Expected token: <<DIV>>
                                                                                                                                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 55 column 18>; Expected token: <<MOD>>
                                                                                                                                                                                                                                          Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                        Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                      Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                      Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                        Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                                          Visited token: <<SEMICOLON>: ";" at line 55 column 18>; Expected token: <<SUM>>
                                                                                                                                                                                                                                          Visited token: <<SEMICOLON>: ";" at line 55 column 18>; Expected token: <<SUB>>
                                                                                                                                                                                                                                        Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                      Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                    Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                  Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                  Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                    Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 55 column 18>; Expected token: <"==">
                                                                                                                                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 55 column 18>; Expected token: <"<=">
                                                                                                                                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 55 column 18>; Expected token: <">=">
                                                                                                                                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 55 column 18>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 55 column 18>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 55 column 18>; Expected token: <"!=">
                                                                                                                                                                                                                                    Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                  Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                Call:   simpleExpression
                                                                                                                                                                                                                                  Call:   additiveExpression
                                                                                                                                                                                                                                    Call:   term
                                                                                                                                                                                                                                      Call:   factor
                                                                                                                                                                                                                                        Visited token: <<ID>: "i" at line 55 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                        Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                          Visited token: <<ID>: "i" at line 55 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                          Visited token: <<SUM>: "+" at line 55 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                          Visited token: <<ID>: "i" at line 55 column 13>; Expected token: <"output">
                                                                                                                                                                                                                                        Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                        Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                          Visited token: <<ID>: "i" at line 55 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                          Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                            Visited token: <<SUM>: "+" at line 55 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                          Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                        Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                        Call:   var
                                                                                                                                                                                                                                          Consumed token: <<ID>: "i" at line 55 column 13>
                                                                                                                                                                                                                                          Call:   varPrime
                                                                                                                                                                                                                                          Return: varPrime
                                                                                                                                                                                                                                        Return: var
                                                                                                                                                                                                                                      Return: factor
                                                                                                                                                                                                                                      Call:   termPrime
                                                                                                                                                                                                                                      Return: termPrime
                                                                                                                                                                                                                                    Return: term
                                                                                                                                                                                                                                    Call:   additiveExpressionPrime
                                                                                                                                                                                                                                      Call:   addop
                                                                                                                                                                                                                                        Consumed token: <<SUM>: "+" at line 55 column 15>
                                                                                                                                                                                                                                      Return: addop
                                                                                                                                                                                                                                      Call:   term
                                                                                                                                                                                                                                        Call:   factor
                                                                                                                                                                                                                                          Visited token: <<NUMENT>: "1" at line 55 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                          Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "1" at line 55 column 17>; Expected token: <<ID>>
                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "1" at line 55 column 17>; Expected token: <"output">
                                                                                                                                                                                                                                          Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "1" at line 55 column 17>; Expected token: <<ID>>
                                                                                                                                                                                                                                          Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                          Visited token: <<NUMENT>: "1" at line 55 column 17>; Expected token: <<NUMENT>>
                                                                                                                                                                                                                                          Consumed token: <<NUMENT>: "1" at line 55 column 17>
                                                                                                                                                                                                                                        Return: factor
                                                                                                                                                                                                                                        Call:   termPrime
                                                                                                                                                                                                                                        Return: termPrime
                                                                                                                                                                                                                                      Return: term
                                                                                                                                                                                                                                      Call:   additiveExpressionPrime
                                                                                                                                                                                                                                      Return: additiveExpressionPrime
                                                                                                                                                                                                                                    Return: additiveExpressionPrime
                                                                                                                                                                                                                                  Return: additiveExpression
                                                                                                                                                                                                                                  Call:   simpleExpressionPrime
                                                                                                                                                                                                                                  Return: simpleExpressionPrime
                                                                                                                                                                                                                                Return: simpleExpression
                                                                                                                                                                                                                              Return: expression
                                                                                                                                                                                                                            Return: expression
                                                                                                                                                                                                                            Consumed token: <<SEMICOLON>: ";" at line 55 column 18>
                                                                                                                                                                                                                          Return: expressionStmt
                                                                                                                                                                                                                        Return: statement
                                                                                                                                                                                                                        Call:   statementListPrime
No. linea: 56 Llave final: }
                                                                                                                                                                                                                        Return: statementListPrime
                                                                                                                                                                                                                      Return: statementListPrime
                                                                                                                                                                                                                    Return: statementListPrime
                                                                                                                                                                                                                  Return: statementList
                                                                                                                                                                                                                  Consumed token: <<CURLYBRACKETCLOSE>: "}" at line 56 column 5>
                                                                                                                                                                                                                Return: compoundStmt
                                                                                                                                                                                                              Return: statement
                                                                                                                                                                                                            Return: iterationStmt
                                                                                                                                                                                                          Return: statement
                                                                                                                                                                                                          Call:   statementListPrime
No. linea: 58 Identificador: sort
                                                                                                                                                                                                            Call:   statement
                                                                                                                                                                                                              Call:   expressionStmt
                                                                                                                                                                                                                Call:   expression
                                                                                                                                                                                                                  Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                    Visited token: <<ID>: "sort" at line 58 column 5>; Expected token: <<ID>>
                                                                                                                                                                                                                    Call:   varPrime(LOOKING AHEAD...)
No. linea: 58 Parentesis incial: (
                                                                                                                                                                                                                      Visited token: <<BRACKETOPEN>: "(" at line 58 column 9>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                  Visited token: <<BRACKETOPEN>: "(" at line 58 column 9>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                                  Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                    Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                      Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                        Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                          Visited token: <<ID>: "sort" at line 58 column 5>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                          Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                            Visited token: <<ID>: "sort" at line 58 column 5>; Expected token: <<ID>>
                                                                                                                                                                                                                            Visited token: <<BRACKETOPEN>: "(" at line 58 column 9>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                            Call:   args(LOOKING AHEAD...)
                                                                                                                                                                                                                              Call:   argList(LOOKING AHEAD...)
                                                                                                                                                                                                                                Call:   expression(LOOKING AHEAD...)
                                                                                                                                                                                                                                  Call:   var(LOOKING AHEAD...)
No. linea: 58 Identificador: x
                                                                                                                                                                                                                                    Visited token: <<ID>: "x" at line 58 column 10>; Expected token: <<ID>>
                                                                                                                                                                                                                                    Call:   varPrime(LOOKING AHEAD...)
No. linea: 58 Coma: ,
                                                                                                                                                                                                                                      Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                  Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                                                  Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                    Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                      Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                                        Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                                          Visited token: <<ID>: "x" at line 58 column 10>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                          Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                            Visited token: <<ID>: "x" at line 58 column 10>; Expected token: <<ID>>
                                                                                                                                                                                                                                            Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                            Visited token: <<ID>: "x" at line 58 column 10>; Expected token: <"output">
                                                                                                                                                                                                                                          Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                            Visited token: <<ID>: "x" at line 58 column 10>; Expected token: <<ID>>
                                                                                                                                                                                                                                            Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                              Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                        Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                        Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                          Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                                            Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<MULT>>
                                                                                                                                                                                                                                            Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<DIV>>
                                                                                                                                                                                                                                            Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<MOD>>
                                                                                                                                                                                                                                          Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                        Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                      Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                      Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                        Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                                          Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<SUM>>
                                                                                                                                                                                                                                          Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<SUB>>
                                                                                                                                                                                                                                        Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                      Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                    Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                    Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                      Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                                                        Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <"==">
                                                                                                                                                                                                                                        Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <"<=">
                                                                                                                                                                                                                                        Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <">=">
                                                                                                                                                                                                                                        Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                                                        Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                                                        Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <"!=">
                                                                                                                                                                                                                                      Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                    Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                  Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                Call:   argListPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                  Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<COMMA>>
                                                                                                                                                                                                                                  Call:   expression(LOOKING AHEAD...)
                                                                                                                                                                                                                                    Call:   var(LOOKING AHEAD...)
No. linea: 58 Numero entero: 0
                                                                                                                                                                                                                                      Visited token: <<NUMENT>: "0" at line 58 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                    Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                    Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                      Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                        Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                                          Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "0" at line 58 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                            Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                              Visited token: <<NUMENT>: "0" at line 58 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                              Visited token: <<NUMENT>: "0" at line 58 column 13>; Expected token: <"output">
                                                                                                                                                                                                                                            Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                              Visited token: <<NUMENT>: "0" at line 58 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                            Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "0" at line 58 column 13>; Expected token: <<NUMENT>>
                                                                                                                                                                                                                                            Call:   simpleExpression
                                                                                                                                                                                                                                              Call:   additiveExpression
                                                                                                                                                                                                                                                Call:   term
                                                                                                                                                                                                                                                  Call:   factor
                                                                                                                                                                                                                                                    Visited token: <<ID>: "sort" at line 58 column 5>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                    Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                      Visited token: <<ID>: "sort" at line 58 column 5>; Expected token: <<ID>>
                                                                                                                                                                                                                                                      Visited token: <<BRACKETOPEN>: "(" at line 58 column 9>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                      Call:   call
                                                                                                                                                                                                                                                        Consumed token: <<ID>: "sort" at line 58 column 5>
                                                                                                                                                                                                                                                        Consumed token: <<BRACKETOPEN>: "(" at line 58 column 9>
                                                                                                                                                                                                                                                        Call:   args
                                                                                                                                                                                                                                                          Call:   argList
                                                                                                                                                                                                                                                            Call:   expression
                                                                                                                                                                                                                                                              Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                Visited token: <<ID>: "x" at line 58 column 10>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                  Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                              Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                                                                              Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                  Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                    Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                      Visited token: <<ID>: "x" at line 58 column 10>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                      Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                        Visited token: <<ID>: "x" at line 58 column 10>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                        Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                        Visited token: <<ID>: "x" at line 58 column 10>; Expected token: <"output">
                                                                                                                                                                                                                                                                      Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                      Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                        Visited token: <<ID>: "x" at line 58 column 10>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                        Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                          Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                    Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                    Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                      Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                        Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<MULT>>
                                                                                                                                                                                                                                                                        Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<DIV>>
                                                                                                                                                                                                                                                                        Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<MOD>>
                                                                                                                                                                                                                                                                      Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                    Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                  Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                  Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                    Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                      Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<SUM>>
                                                                                                                                                                                                                                                                      Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<SUB>>
                                                                                                                                                                                                                                                                    Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                  Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                  Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                    Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <"==">
                                                                                                                                                                                                                                                                    Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <"<=">
                                                                                                                                                                                                                                                                    Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <">=">
                                                                                                                                                                                                                                                                    Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                                                                                    Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                                                                                    Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <"!=">
                                                                                                                                                                                                                                                                  Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                              Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                              Call:   simpleExpression
                                                                                                                                                                                                                                                                Call:   additiveExpression
                                                                                                                                                                                                                                                                  Call:   term
                                                                                                                                                                                                                                                                    Call:   factor
                                                                                                                                                                                                                                                                      Visited token: <<ID>: "x" at line 58 column 10>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                      Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                        Visited token: <<ID>: "x" at line 58 column 10>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                        Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                        Visited token: <<ID>: "x" at line 58 column 10>; Expected token: <"output">
                                                                                                                                                                                                                                                                      Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                      Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                        Visited token: <<ID>: "x" at line 58 column 10>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                        Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                          Visited token: <<COMMA>: "," at line 58 column 11>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                      Call:   var
                                                                                                                                                                                                                                                                        Consumed token: <<ID>: "x" at line 58 column 10>
                                                                                                                                                                                                                                                                        Call:   varPrime
                                                                                                                                                                                                                                                                        Return: varPrime
                                                                                                                                                                                                                                                                      Return: var
                                                                                                                                                                                                                                                                    Return: factor
                                                                                                                                                                                                                                                                    Call:   termPrime
                                                                                                                                                                                                                                                                    Return: termPrime
                                                                                                                                                                                                                                                                  Return: term
                                                                                                                                                                                                                                                                  Call:   additiveExpressionPrime
                                                                                                                                                                                                                                                                  Return: additiveExpressionPrime
                                                                                                                                                                                                                                                                Return: additiveExpression
                                                                                                                                                                                                                                                                Call:   simpleExpressionPrime
                                                                                                                                                                                                                                                                Return: simpleExpressionPrime
                                                                                                                                                                                                                                                              Return: simpleExpression
                                                                                                                                                                                                                                                            Return: expression
                                                                                                                                                                                                                                                            Call:   argListPrime
                                                                                                                                                                                                                                                              Consumed token: <<COMMA>: "," at line 58 column 11>
                                                                                                                                                                                                                                                              Call:   expression
                                                                                                                                                                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                  Visited token: <<NUMENT>: "0" at line 58 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                  Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                    Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                      Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                        Visited token: <<NUMENT>: "0" at line 58 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                        Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                          Visited token: <<NUMENT>: "0" at line 58 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                          Visited token: <<NUMENT>: "0" at line 58 column 13>; Expected token: <"output">
                                                                                                                                                                                                                                                                        Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                        Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                          Visited token: <<NUMENT>: "0" at line 58 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                        Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                        Visited token: <<NUMENT>: "0" at line 58 column 13>; Expected token: <<NUMENT>>
                                                                                                                                                                                                                                                                      Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                      Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                        Call:   mulop(LOOKING AHEAD...)
No. linea: 58 Coma: ,
                                                                                                                                                                                                                                                                          Visited token: <<COMMA>: "," at line 58 column 14>; Expected token: <<MULT>>
                                                                                                                                                                                                                                                                          Visited token: <<COMMA>: "," at line 58 column 14>; Expected token: <<DIV>>
                                                                                                                                                                                                                                                                          Visited token: <<COMMA>: "," at line 58 column 14>; Expected token: <<MOD>>
                                                                                                                                                                                                                                                                        Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                      Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                    Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                    Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                      Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                        Visited token: <<COMMA>: "," at line 58 column 14>; Expected token: <<SUM>>
                                                                                                                                                                                                                                                                        Visited token: <<COMMA>: "," at line 58 column 14>; Expected token: <<SUB>>
                                                                                                                                                                                                                                                                      Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                    Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                  Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                  Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                    Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                      Visited token: <<COMMA>: "," at line 58 column 14>; Expected token: <"==">
                                                                                                                                                                                                                                                                      Visited token: <<COMMA>: "," at line 58 column 14>; Expected token: <"<=">
                                                                                                                                                                                                                                                                      Visited token: <<COMMA>: "," at line 58 column 14>; Expected token: <">=">
                                                                                                                                                                                                                                                                      Visited token: <<COMMA>: "," at line 58 column 14>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                                                                                      Visited token: <<COMMA>: "," at line 58 column 14>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                                                                                      Visited token: <<COMMA>: "," at line 58 column 14>; Expected token: <"!=">
                                                                                                                                                                                                                                                                    Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                  Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                Call:   simpleExpression
                                                                                                                                                                                                                                                                  Call:   additiveExpression
                                                                                                                                                                                                                                                                    Call:   term
                                                                                                                                                                                                                                                                      Call:   factor
                                                                                                                                                                                                                                                                        Visited token: <<NUMENT>: "0" at line 58 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                        Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                          Visited token: <<NUMENT>: "0" at line 58 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                          Visited token: <<NUMENT>: "0" at line 58 column 13>; Expected token: <"output">
                                                                                                                                                                                                                                                                        Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                        Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                          Visited token: <<NUMENT>: "0" at line 58 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                        Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                        Visited token: <<NUMENT>: "0" at line 58 column 13>; Expected token: <<NUMENT>>
                                                                                                                                                                                                                                                                        Consumed token: <<NUMENT>: "0" at line 58 column 13>
                                                                                                                                                                                                                                                                      Return: factor
                                                                                                                                                                                                                                                                      Call:   termPrime
                                                                                                                                                                                                                                                                      Return: termPrime
                                                                                                                                                                                                                                                                    Return: term
                                                                                                                                                                                                                                                                    Call:   additiveExpressionPrime
                                                                                                                                                                                                                                                                    Return: additiveExpressionPrime
                                                                                                                                                                                                                                                                  Return: additiveExpression
                                                                                                                                                                                                                                                                  Call:   simpleExpressionPrime
                                                                                                                                                                                                                                                                  Return: simpleExpressionPrime
                                                                                                                                                                                                                                                                Return: simpleExpression
                                                                                                                                                                                                                                                              Return: expression
                                                                                                                                                                                                                                                              Call:   argListPrime
                                                                                                                                                                                                                                                                Consumed token: <<COMMA>: "," at line 58 column 14>
                                                                                                                                                                                                                                                                Call:   expression
                                                                                                                                                                                                                                                                  Call:   var(LOOKING AHEAD...)
No. linea: 58 Numero entero: 10
                                                                                                                                                                                                                                                                    Visited token: <<NUMENT>: "10" at line 58 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                  Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                  Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                    Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                      Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                        Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                          Visited token: <<NUMENT>: "10" at line 58 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                          Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "10" at line 58 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "10" at line 58 column 16>; Expected token: <"output">
                                                                                                                                                                                                                                                                          Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "10" at line 58 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                          Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                          Visited token: <<NUMENT>: "10" at line 58 column 16>; Expected token: <<NUMENT>>
                                                                                                                                                                                                                                                                        Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                        Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                          Call:   mulop(LOOKING AHEAD...)
No. linea: 58 Parentesis final: )
                                                                                                                                                                                                                                                                            Visited token: <<BRACKETCLOSE>: ")" at line 58 column 18>; Expected token: <<MULT>>
                                                                                                                                                                                                                                                                            Visited token: <<BRACKETCLOSE>: ")" at line 58 column 18>; Expected token: <<DIV>>
                                                                                                                                                                                                                                                                            Visited token: <<BRACKETCLOSE>: ")" at line 58 column 18>; Expected token: <<MOD>>
                                                                                                                                                                                                                                                                          Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                        Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                      Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                      Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                        Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                          Visited token: <<BRACKETCLOSE>: ")" at line 58 column 18>; Expected token: <<SUM>>
                                                                                                                                                                                                                                                                          Visited token: <<BRACKETCLOSE>: ")" at line 58 column 18>; Expected token: <<SUB>>
                                                                                                                                                                                                                                                                        Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                      Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                    Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                    Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                      Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                        Visited token: <<BRACKETCLOSE>: ")" at line 58 column 18>; Expected token: <"==">
                                                                                                                                                                                                                                                                        Visited token: <<BRACKETCLOSE>: ")" at line 58 column 18>; Expected token: <"<=">
                                                                                                                                                                                                                                                                        Visited token: <<BRACKETCLOSE>: ")" at line 58 column 18>; Expected token: <">=">
                                                                                                                                                                                                                                                                        Visited token: <<BRACKETCLOSE>: ")" at line 58 column 18>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                                                                                        Visited token: <<BRACKETCLOSE>: ")" at line 58 column 18>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                                                                                        Visited token: <<BRACKETCLOSE>: ")" at line 58 column 18>; Expected token: <"!=">
                                                                                                                                                                                                                                                                      Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                    Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                  Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                  Call:   simpleExpression
                                                                                                                                                                                                                                                                    Call:   additiveExpression
                                                                                                                                                                                                                                                                      Call:   term
                                                                                                                                                                                                                                                                        Call:   factor
                                                                                                                                                                                                                                                                          Visited token: <<NUMENT>: "10" at line 58 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                          Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "10" at line 58 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "10" at line 58 column 16>; Expected token: <"output">
                                                                                                                                                                                                                                                                          Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "10" at line 58 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                          Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                          Visited token: <<NUMENT>: "10" at line 58 column 16>; Expected token: <<NUMENT>>
                                                                                                                                                                                                                                                                          Consumed token: <<NUMENT>: "10" at line 58 column 16>
                                                                                                                                                                                                                                                                        Return: factor
                                                                                                                                                                                                                                                                        Call:   termPrime
                                                                                                                                                                                                                                                                        Return: termPrime
                                                                                                                                                                                                                                                                      Return: term
                                                                                                                                                                                                                                                                      Call:   additiveExpressionPrime
                                                                                                                                                                                                                                                                      Return: additiveExpressionPrime
                                                                                                                                                                                                                                                                    Return: additiveExpression
                                                                                                                                                                                                                                                                    Call:   simpleExpressionPrime
                                                                                                                                                                                                                                                                    Return: simpleExpressionPrime
                                                                                                                                                                                                                                                                  Return: simpleExpression
                                                                                                                                                                                                                                                                Return: expression
                                                                                                                                                                                                                                                                Call:   argListPrime
                                                                                                                                                                                                                                                                Return: argListPrime
                                                                                                                                                                                                                                                              Return: argListPrime
                                                                                                                                                                                                                                                            Return: argListPrime
                                                                                                                                                                                                                                                          Return: argList
                                                                                                                                                                                                                                                        Return: args
                                                                                                                                                                                                                                                        Consumed token: <<BRACKETCLOSE>: ")" at line 58 column 18>
                                                                                                                                                                                                                                                      Return: call
                                                                                                                                                                                                                                                    Return: factor
                                                                                                                                                                                                                                                    Call:   termPrime
No. linea: 58 Punto y Coma: ;
                                                                                                                                                                                                                                                    Return: termPrime
                                                                                                                                                                                                                                                  Return: term
                                                                                                                                                                                                                                                  Call:   additiveExpressionPrime
                                                                                                                                                                                                                                                  Return: additiveExpressionPrime
                                                                                                                                                                                                                                                Return: additiveExpression
                                                                                                                                                                                                                                                Call:   simpleExpressionPrime
                                                                                                                                                                                                                                                Return: simpleExpressionPrime
                                                                                                                                                                                                                                              Return: simpleExpression
                                                                                                                                                                                                                                            Return: expression
                                                                                                                                                                                                                                            Consumed token: <<SEMICOLON>: ";" at line 58 column 19>
                                                                                                                                                                                                                                          Return: expressionStmt
                                                                                                                                                                                                                                        Return: statement
                                                                                                                                                                                                                                        Call:   statementListPrime
No. linea: 60 Identificador: i
                                                                                                                                                                                                                                          Call:   statement
                                                                                                                                                                                                                                            Call:   expressionStmt
                                                                                                                                                                                                                                              Call:   expression
                                                                                                                                                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                  Visited token: <<ID>: "i" at line 60 column 5>; Expected token: <<ID>>
                                                                                                                                                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
No. linea: 60 Operador igual: =
                                                                                                                                                                                                                                                    Visited token: <<EQUIVALENCE>: "=" at line 60 column 7>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                Visited token: <<EQUIVALENCE>: "=" at line 60 column 7>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                                                                Call:   expression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                  Call:   var(LOOKING AHEAD...)
No. linea: 60 Numero entero: 0
                                                                                                                                                                                                                                                    Visited token: <<NUMENT>: "0" at line 60 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                                                                  Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                  Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                    Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                      Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                                                        Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                                                          Visited token: <<NUMENT>: "0" at line 60 column 9>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                          Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "0" at line 60 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "0" at line 60 column 9>; Expected token: <"output">
                                                                                                                                                                                                                                                          Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "0" at line 60 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                                                                          Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                          Visited token: <<NUMENT>: "0" at line 60 column 9>; Expected token: <<NUMENT>>
                                                                                                                                                                                                                                                        Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                        Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                          Call:   mulop(LOOKING AHEAD...)
No. linea: 60 Punto y Coma: ;
                                                                                                                                                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 60 column 10>; Expected token: <<MULT>>
                                                                                                                                                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 60 column 10>; Expected token: <<DIV>>
                                                                                                                                                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 60 column 10>; Expected token: <<MOD>>
                                                                                                                                                                                                                                                          Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                        Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                      Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                      Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                        Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                          Visited token: <<SEMICOLON>: ";" at line 60 column 10>; Expected token: <<SUM>>
                                                                                                                                                                                                                                                          Visited token: <<SEMICOLON>: ";" at line 60 column 10>; Expected token: <<SUB>>
                                                                                                                                                                                                                                                        Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                      Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                    Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                    Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                      Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 60 column 10>; Expected token: <"==">
                                                                                                                                                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 60 column 10>; Expected token: <"<=">
                                                                                                                                                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 60 column 10>; Expected token: <">=">
                                                                                                                                                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 60 column 10>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 60 column 10>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 60 column 10>; Expected token: <"!=">
                                                                                                                                                                                                                                                      Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                    Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                  Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                Call:   var
                                                                                                                                                                                                                                                  Consumed token: <<ID>: "i" at line 60 column 5>
                                                                                                                                                                                                                                                  Call:   varPrime
                                                                                                                                                                                                                                                  Return: varPrime
                                                                                                                                                                                                                                                Return: var
                                                                                                                                                                                                                                                Consumed token: <<EQUIVALENCE>: "=" at line 60 column 7>
                                                                                                                                                                                                                                                Call:   expression
                                                                                                                                                                                                                                                  Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                    Visited token: <<NUMENT>: "0" at line 60 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                                                                  Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                  Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                    Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                      Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                                                        Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                                                          Visited token: <<NUMENT>: "0" at line 60 column 9>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                          Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "0" at line 60 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "0" at line 60 column 9>; Expected token: <"output">
                                                                                                                                                                                                                                                          Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "0" at line 60 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                                                                          Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                          Visited token: <<NUMENT>: "0" at line 60 column 9>; Expected token: <<NUMENT>>
                                                                                                                                                                                                                                                        Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                        Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                          Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 60 column 10>; Expected token: <<MULT>>
                                                                                                                                                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 60 column 10>; Expected token: <<DIV>>
                                                                                                                                                                                                                                                            Visited token: <<SEMICOLON>: ";" at line 60 column 10>; Expected token: <<MOD>>
                                                                                                                                                                                                                                                          Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                        Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                      Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                      Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                        Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                          Visited token: <<SEMICOLON>: ";" at line 60 column 10>; Expected token: <<SUM>>
                                                                                                                                                                                                                                                          Visited token: <<SEMICOLON>: ";" at line 60 column 10>; Expected token: <<SUB>>
                                                                                                                                                                                                                                                        Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                      Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                    Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                    Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                      Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 60 column 10>; Expected token: <"==">
                                                                                                                                                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 60 column 10>; Expected token: <"<=">
                                                                                                                                                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 60 column 10>; Expected token: <">=">
                                                                                                                                                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 60 column 10>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 60 column 10>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 60 column 10>; Expected token: <"!=">
                                                                                                                                                                                                                                                      Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                    Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                  Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                  Call:   simpleExpression
                                                                                                                                                                                                                                                    Call:   additiveExpression
                                                                                                                                                                                                                                                      Call:   term
                                                                                                                                                                                                                                                        Call:   factor
                                                                                                                                                                                                                                                          Visited token: <<NUMENT>: "0" at line 60 column 9>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                          Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "0" at line 60 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "0" at line 60 column 9>; Expected token: <"output">
                                                                                                                                                                                                                                                          Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "0" at line 60 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                                                                          Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                          Visited token: <<NUMENT>: "0" at line 60 column 9>; Expected token: <<NUMENT>>
                                                                                                                                                                                                                                                          Consumed token: <<NUMENT>: "0" at line 60 column 9>
                                                                                                                                                                                                                                                        Return: factor
                                                                                                                                                                                                                                                        Call:   termPrime
                                                                                                                                                                                                                                                        Return: termPrime
                                                                                                                                                                                                                                                      Return: term
                                                                                                                                                                                                                                                      Call:   additiveExpressionPrime
                                                                                                                                                                                                                                                      Return: additiveExpressionPrime
                                                                                                                                                                                                                                                    Return: additiveExpression
                                                                                                                                                                                                                                                    Call:   simpleExpressionPrime
                                                                                                                                                                                                                                                    Return: simpleExpressionPrime
                                                                                                                                                                                                                                                  Return: simpleExpression
                                                                                                                                                                                                                                                Return: expression
                                                                                                                                                                                                                                              Return: expression
                                                                                                                                                                                                                                              Consumed token: <<SEMICOLON>: ";" at line 60 column 10>
                                                                                                                                                                                                                                            Return: expressionStmt
                                                                                                                                                                                                                                          Return: statement
                                                                                                                                                                                                                                          Call:   statementListPrime
No. linea: 61 Declaracion while: while
                                                                                                                                                                                                                                            Call:   statement
                                                                                                                                                                                                                                              Call:   iterationStmt
                                                                                                                                                                                                                                                Consumed token: <"while" at line 61 column 5>
No. linea: 61 Parentesis incial: (
                                                                                                                                                                                                                                                Consumed token: <<BRACKETOPEN>: "(" at line 61 column 11>
                                                                                                                                                                                                                                                Call:   expression
                                                                                                                                                                                                                                                  Call:   var(LOOKING AHEAD...)
No. linea: 61 Identificador: i
                                                                                                                                                                                                                                                    Visited token: <<ID>: "i" at line 61 column 12>; Expected token: <<ID>>
                                                                                                                                                                                                                                                    Call:   varPrime(LOOKING AHEAD...)
No. linea: 61 Operador menor que: <
                                                                                                                                                                                                                                                      Visited token: <<ANGLEBRACKETOPEN>: "<" at line 61 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                  Visited token: <<ANGLEBRACKETOPEN>: "<" at line 61 column 14>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                                                                  Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                    Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                      Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                                                        Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                                                          Visited token: <<ID>: "i" at line 61 column 12>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                          Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                            Visited token: <<ID>: "i" at line 61 column 12>; Expected token: <<ID>>
                                                                                                                                                                                                                                                            Visited token: <<ANGLEBRACKETOPEN>: "<" at line 61 column 14>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                            Visited token: <<ID>: "i" at line 61 column 12>; Expected token: <"output">
                                                                                                                                                                                                                                                          Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                            Visited token: <<ID>: "i" at line 61 column 12>; Expected token: <<ID>>
                                                                                                                                                                                                                                                            Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                              Visited token: <<ANGLEBRACKETOPEN>: "<" at line 61 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                        Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                        Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                          Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                            Visited token: <<ANGLEBRACKETOPEN>: "<" at line 61 column 14>; Expected token: <<MULT>>
                                                                                                                                                                                                                                                            Visited token: <<ANGLEBRACKETOPEN>: "<" at line 61 column 14>; Expected token: <<DIV>>
                                                                                                                                                                                                                                                            Visited token: <<ANGLEBRACKETOPEN>: "<" at line 61 column 14>; Expected token: <<MOD>>
                                                                                                                                                                                                                                                          Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                        Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                      Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                      Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                        Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                          Visited token: <<ANGLEBRACKETOPEN>: "<" at line 61 column 14>; Expected token: <<SUM>>
                                                                                                                                                                                                                                                          Visited token: <<ANGLEBRACKETOPEN>: "<" at line 61 column 14>; Expected token: <<SUB>>
                                                                                                                                                                                                                                                        Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                      Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                    Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                    Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                      Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                        Visited token: <<ANGLEBRACKETOPEN>: "<" at line 61 column 14>; Expected token: <"==">
                                                                                                                                                                                                                                                        Visited token: <<ANGLEBRACKETOPEN>: "<" at line 61 column 14>; Expected token: <"<=">
                                                                                                                                                                                                                                                        Visited token: <<ANGLEBRACKETOPEN>: "<" at line 61 column 14>; Expected token: <">=">
                                                                                                                                                                                                                                                        Visited token: <<ANGLEBRACKETOPEN>: "<" at line 61 column 14>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                                                                      Return: relop(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                      Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                        Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                                                          Call:   factor(LOOKING AHEAD...)
No. linea: 61 Numero entero: 10
                                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "10" at line 61 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                            Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                              Visited token: <<NUMENT>: "10" at line 61 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                                                                              Visited token: <<NUMENT>: "10" at line 61 column 16>; Expected token: <"output">
                                                                                                                                                                                                                                                            Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                              Visited token: <<NUMENT>: "10" at line 61 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                                                                            Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "10" at line 61 column 16>; Expected token: <<NUMENT>>
                                                                                                                                                                                                                                                          Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                          Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                            Call:   mulop(LOOKING AHEAD...)
No. linea: 61 Parentesis final: )
                                                                                                                                                                                                                                                              Visited token: <<BRACKETCLOSE>: ")" at line 61 column 18>; Expected token: <<MULT>>
                                                                                                                                                                                                                                                              Visited token: <<BRACKETCLOSE>: ")" at line 61 column 18>; Expected token: <<DIV>>
                                                                                                                                                                                                                                                              Visited token: <<BRACKETCLOSE>: ")" at line 61 column 18>; Expected token: <<MOD>>
                                                                                                                                                                                                                                                            Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                          Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                        Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                        Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                          Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                            Visited token: <<BRACKETCLOSE>: ")" at line 61 column 18>; Expected token: <<SUM>>
                                                                                                                                                                                                                                                            Visited token: <<BRACKETCLOSE>: ")" at line 61 column 18>; Expected token: <<SUB>>
                                                                                                                                                                                                                                                          Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                        Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                      Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                      Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                        Visited token: <<BRACKETCLOSE>: ")" at line 61 column 18>; Expected token: <"==">
                                                                                                                                                                                                                                                        Visited token: <<BRACKETCLOSE>: ")" at line 61 column 18>; Expected token: <"<=">
                                                                                                                                                                                                                                                        Visited token: <<BRACKETCLOSE>: ")" at line 61 column 18>; Expected token: <">=">
                                                                                                                                                                                                                                                        Visited token: <<BRACKETCLOSE>: ")" at line 61 column 18>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                                                                        Visited token: <<BRACKETCLOSE>: ")" at line 61 column 18>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                                                                        Visited token: <<BRACKETCLOSE>: ")" at line 61 column 18>; Expected token: <"!=">
                                                                                                                                                                                                                                                      Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                    Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                  Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                  Call:   simpleExpression
                                                                                                                                                                                                                                                    Call:   additiveExpression
                                                                                                                                                                                                                                                      Call:   term
                                                                                                                                                                                                                                                        Call:   factor
                                                                                                                                                                                                                                                          Visited token: <<ID>: "i" at line 61 column 12>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                          Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                            Visited token: <<ID>: "i" at line 61 column 12>; Expected token: <<ID>>
                                                                                                                                                                                                                                                            Visited token: <<ANGLEBRACKETOPEN>: "<" at line 61 column 14>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                            Visited token: <<ID>: "i" at line 61 column 12>; Expected token: <"output">
                                                                                                                                                                                                                                                          Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                            Visited token: <<ID>: "i" at line 61 column 12>; Expected token: <<ID>>
                                                                                                                                                                                                                                                            Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                              Visited token: <<ANGLEBRACKETOPEN>: "<" at line 61 column 14>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                          Call:   var
                                                                                                                                                                                                                                                            Consumed token: <<ID>: "i" at line 61 column 12>
                                                                                                                                                                                                                                                            Call:   varPrime
                                                                                                                                                                                                                                                            Return: varPrime
                                                                                                                                                                                                                                                          Return: var
                                                                                                                                                                                                                                                        Return: factor
                                                                                                                                                                                                                                                        Call:   termPrime
                                                                                                                                                                                                                                                        Return: termPrime
                                                                                                                                                                                                                                                      Return: term
                                                                                                                                                                                                                                                      Call:   additiveExpressionPrime
                                                                                                                                                                                                                                                      Return: additiveExpressionPrime
                                                                                                                                                                                                                                                    Return: additiveExpression
                                                                                                                                                                                                                                                    Call:   simpleExpressionPrime
                                                                                                                                                                                                                                                      Call:   relop
                                                                                                                                                                                                                                                        Consumed token: <<ANGLEBRACKETOPEN>: "<" at line 61 column 14>
                                                                                                                                                                                                                                                      Return: relop
                                                                                                                                                                                                                                                      Call:   additiveExpression
                                                                                                                                                                                                                                                        Call:   term
                                                                                                                                                                                                                                                          Call:   factor
                                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "10" at line 61 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                            Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                              Visited token: <<NUMENT>: "10" at line 61 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                                                                              Visited token: <<NUMENT>: "10" at line 61 column 16>; Expected token: <"output">
                                                                                                                                                                                                                                                            Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                              Visited token: <<NUMENT>: "10" at line 61 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                                                                            Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "10" at line 61 column 16>; Expected token: <<NUMENT>>
                                                                                                                                                                                                                                                            Consumed token: <<NUMENT>: "10" at line 61 column 16>
                                                                                                                                                                                                                                                          Return: factor
                                                                                                                                                                                                                                                          Call:   termPrime
                                                                                                                                                                                                                                                          Return: termPrime
                                                                                                                                                                                                                                                        Return: term
                                                                                                                                                                                                                                                        Call:   additiveExpressionPrime
                                                                                                                                                                                                                                                        Return: additiveExpressionPrime
                                                                                                                                                                                                                                                      Return: additiveExpression
                                                                                                                                                                                                                                                    Return: simpleExpressionPrime
                                                                                                                                                                                                                                                  Return: simpleExpression
                                                                                                                                                                                                                                                Return: expression
                                                                                                                                                                                                                                                Consumed token: <<BRACKETCLOSE>: ")" at line 61 column 18>
                                                                                                                                                                                                                                                Call:   statement
No. linea: 62 Llave incial: {
                                                                                                                                                                                                                                                  Call:   compoundStmt
                                                                                                                                                                                                                                                    Consumed token: <<CURLYBRACKETOPEN>: "{" at line 62 column 5>
                                                                                                                                                                                                                                                    Call:   localDeclarations
                                                                                                                                                                                                                                                      Call:   localDeclarationsPrime
No. linea: 63 Sentencia output: output
                                                                                                                                                                                                                                                      Return: localDeclarationsPrime
                                                                                                                                                                                                                                                    Return: localDeclarations
                                                                                                                                                                                                                                                    Call:   statementList
                                                                                                                                                                                                                                                      Call:   statementListPrime
                                                                                                                                                                                                                                                        Call:   statement
                                                                                                                                                                                                                                                          Call:   expressionStmt
                                                                                                                                                                                                                                                            Call:   expression
                                                                                                                                                                                                                                                              Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                Visited token: <"output" at line 63 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                                                                              Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                              Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                  Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                    Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                      Visited token: <"output" at line 63 column 9>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                      Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                        Visited token: <"output" at line 63 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                        Visited token: <"output" at line 63 column 9>; Expected token: <"output">
No. linea: 63 Parentesis incial: (
                                                                                                                                                                                                                                                                        Visited token: <<BRACKETOPEN>: "(" at line 63 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                        Call:   args(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                          Call:   argList(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                            Call:   expression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                              Call:   var(LOOKING AHEAD...)
No. linea: 63 Identificador: x
                                                                                                                                                                                                                                                                                Visited token: <<ID>: "x" at line 63 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                Call:   varPrime(LOOKING AHEAD...)
No. linea: 63 Corchete incial: [
                                                                                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETOPEN>: "[" at line 63 column 17>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                                                  Call:   expression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                    Call:   var(LOOKING AHEAD...)
No. linea: 63 Identificador: i
                                                                                                                                                                                                                                                                                      Visited token: <<ID>: "i" at line 63 column 18>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                      Call:   simpleExpression
                                                                                                                                                                                                                                                                                        Call:   additiveExpression
                                                                                                                                                                                                                                                                                          Call:   term
                                                                                                                                                                                                                                                                                            Call:   factor
                                                                                                                                                                                                                                                                                              Visited token: <"output" at line 63 column 9>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                                              Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                Visited token: <"output" at line 63 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                Visited token: <"output" at line 63 column 9>; Expected token: <"output">
                                                                                                                                                                                                                                                                                                Visited token: <<BRACKETOPEN>: "(" at line 63 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                                                Call:   call
                                                                                                                                                                                                                                                                                                  Consumed token: <"output" at line 63 column 9>
                                                                                                                                                                                                                                                                                                  Consumed token: <<BRACKETOPEN>: "(" at line 63 column 15>
                                                                                                                                                                                                                                                                                                  Call:   args
                                                                                                                                                                                                                                                                                                    Call:   argList
                                                                                                                                                                                                                                                                                                      Call:   expression
                                                                                                                                                                                                                                                                                                        Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                          Visited token: <<ID>: "x" at line 63 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                          Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETOPEN>: "[" at line 63 column 17>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                                                                            Call:   expression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                              Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                Visited token: <<ID>: "i" at line 63 column 18>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                                Call:   varPrime(LOOKING AHEAD...)
No. linea: 63 Corchete final: ]
                                                                                                                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                                                                                                                              Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                  Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                    Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                      Visited token: <<ID>: "i" at line 63 column 18>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                      Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                        Visited token: <<ID>: "i" at line 63 column 18>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                        Visited token: <<ID>: "i" at line 63 column 18>; Expected token: <"output">
                                                                                                                                                                                                                                                                                                                      Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                                      Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                        Visited token: <<ID>: "i" at line 63 column 18>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                                        Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                    Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                    Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                      Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<MULT>>
                                                                                                                                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<DIV>>
                                                                                                                                                                                                                                                                                                                        Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<MOD>>
                                                                                                                                                                                                                                                                                                                      Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                                    Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                  Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                  Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                    Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<SUM>>
                                                                                                                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<SUB>>
                                                                                                                                                                                                                                                                                                                    Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                                  Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                  Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <"==">
                                                                                                                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <"<=">
                                                                                                                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <">=">
                                                                                                                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <"!=">
                                                                                                                                                                                                                                                                                                                  Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                                Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                              Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                            Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<SQUAREBRACKETCLOSE>>
No. linea: 63 Parentesis final: )
                                                                                                                                                                                                                                                                                                            Visited token: <<BRACKETCLOSE>: ")" at line 63 column 20>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                                                                          Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                        Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                        Visited token: <<BRACKETCLOSE>: ")" at line 63 column 20>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                                                                                                                        Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                          Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                            Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                              Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                Visited token: <<ID>: "x" at line 63 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                  Visited token: <<ID>: "x" at line 63 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETOPEN>: "[" at line 63 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                  Visited token: <<ID>: "x" at line 63 column 16>; Expected token: <"output">
                                                                                                                                                                                                                                                                                                                Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                  Visited token: <<ID>: "x" at line 63 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETOPEN>: "[" at line 63 column 17>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                    Call:   expression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                      Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                        Visited token: <<ID>: "i" at line 63 column 18>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                                        Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                        Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                      Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                                                                                                                                      Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                        Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                          Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                            Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                              Visited token: <<ID>: "i" at line 63 column 18>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                              Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                                Visited token: <<ID>: "i" at line 63 column 18>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                                Visited token: <<ID>: "i" at line 63 column 18>; Expected token: <"output">
                                                                                                                                                                                                                                                                                                                              Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                                              Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                                Visited token: <<ID>: "i" at line 63 column 18>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                                                Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                            Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                            Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                              Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<MULT>>
                                                                                                                                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<DIV>>
                                                                                                                                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<MOD>>
                                                                                                                                                                                                                                                                                                                              Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                                            Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                          Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                          Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                            Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<SUM>>
                                                                                                                                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<SUB>>
                                                                                                                                                                                                                                                                                                                            Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                                          Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                        Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                        Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                          Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <"==">
                                                                                                                                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <"<=">
                                                                                                                                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <">=">
                                                                                                                                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                                                                                                                                            Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <"!=">
                                                                                                                                                                                                                                                                                                                          Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                                        Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                      Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                    Return: expression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<SQUAREBRACKETCLOSE>>
                                                                                                                                                                                                                                                                                                                    Visited token: <<BRACKETCLOSE>: ")" at line 63 column 20>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                              Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                              Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                  Visited token: <<BRACKETCLOSE>: ")" at line 63 column 20>; Expected token: <<MULT>>
                                                                                                                                                                                                                                                                                                                  Visited token: <<BRACKETCLOSE>: ")" at line 63 column 20>; Expected token: <<DIV>>
                                                                                                                                                                                                                                                                                                                  Visited token: <<BRACKETCLOSE>: ")" at line 63 column 20>; Expected token: <<MOD>>
                                                                                                                                                                                                                                                                                                                Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                              Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                            Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                            Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                              Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                Visited token: <<BRACKETCLOSE>: ")" at line 63 column 20>; Expected token: <<SUM>>
                                                                                                                                                                                                                                                                                                                Visited token: <<BRACKETCLOSE>: ")" at line 63 column 20>; Expected token: <<SUB>>
                                                                                                                                                                                                                                                                                                              Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                            Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                          Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                          Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                            Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                              Visited token: <<BRACKETCLOSE>: ")" at line 63 column 20>; Expected token: <"==">
                                                                                                                                                                                                                                                                                                              Visited token: <<BRACKETCLOSE>: ")" at line 63 column 20>; Expected token: <"<=">
                                                                                                                                                                                                                                                                                                              Visited token: <<BRACKETCLOSE>: ")" at line 63 column 20>; Expected token: <">=">
                                                                                                                                                                                                                                                                                                              Visited token: <<BRACKETCLOSE>: ")" at line 63 column 20>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                                                                                                                              Visited token: <<BRACKETCLOSE>: ")" at line 63 column 20>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                                                                                                                              Visited token: <<BRACKETCLOSE>: ")" at line 63 column 20>; Expected token: <"!=">
                                                                                                                                                                                                                                                                                                            Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                          Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                        Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                        Call:   simpleExpression
                                                                                                                                                                                                                                                                                                          Call:   additiveExpression
                                                                                                                                                                                                                                                                                                            Call:   term
                                                                                                                                                                                                                                                                                                              Call:   factor
                                                                                                                                                                                                                                                                                                                Visited token: <<ID>: "x" at line 63 column 16>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                  Visited token: <<ID>: "x" at line 63 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETOPEN>: "[" at line 63 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                  Visited token: <<ID>: "x" at line 63 column 16>; Expected token: <"output">
                                                                                                                                                                                                                                                                                                                Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                                Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                  Visited token: <<ID>: "x" at line 63 column 16>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETOPEN>: "[" at line 63 column 17>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                    Call:   var
                                                                                                                                                                                                                                                                                                                      Consumed token: <<ID>: "x" at line 63 column 16>
                                                                                                                                                                                                                                                                                                                      Call:   varPrime
                                                                                                                                                                                                                                                                                                                        Consumed token: <<SQUAREBRACKETOPEN>: "[" at line 63 column 17>
                                                                                                                                                                                                                                                                                                                        Call:   expression
                                                                                                                                                                                                                                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                            Visited token: <<ID>: "i" at line 63 column 18>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                                            Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                              Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                            Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                          Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                          Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                                                                                                                                          Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                            Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                              Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                                Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                                  Visited token: <<ID>: "i" at line 63 column 18>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                                  Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                                    Visited token: <<ID>: "i" at line 63 column 18>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                                    Visited token: <<ID>: "i" at line 63 column 18>; Expected token: <"output">
                                                                                                                                                                                                                                                                                                                                  Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                                                  Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                                    Visited token: <<ID>: "i" at line 63 column 18>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                                                    Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                                Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                                Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                                  Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<MULT>>
                                                                                                                                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<DIV>>
                                                                                                                                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<MOD>>
                                                                                                                                                                                                                                                                                                                                  Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                                                Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                              Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                              Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                                Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<SUM>>
                                                                                                                                                                                                                                                                                                                                  Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<SUB>>
                                                                                                                                                                                                                                                                                                                                Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                                              Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                            Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                            Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                              Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <"==">
                                                                                                                                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <"<=">
                                                                                                                                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <">=">
                                                                                                                                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                                                                                                                                                Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <"!=">
                                                                                                                                                                                                                                                                                                                              Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                                            Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                          Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                          Call:   simpleExpression
                                                                                                                                                                                                                                                                                                                            Call:   additiveExpression
                                                                                                                                                                                                                                                                                                                              Call:   term
                                                                                                                                                                                                                                                                                                                                Call:   factor
                                                                                                                                                                                                                                                                                                                                  Visited token: <<ID>: "i" at line 63 column 18>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                                  Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                                    Visited token: <<ID>: "i" at line 63 column 18>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                                                    Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                                    Visited token: <<ID>: "i" at line 63 column 18>; Expected token: <"output">
                                                                                                                                                                                                                                                                                                                                  Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                                                  Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                                    Visited token: <<ID>: "i" at line 63 column 18>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                                                    Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                                      Visited token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                                    Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                                  Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                                  Call:   var
                                                                                                                                                                                                                                                                                                                                    Consumed token: <<ID>: "i" at line 63 column 18>
                                                                                                                                                                                                                                                                                                                                    Call:   varPrime
                                                                                                                                                                                                                                                                                                                                    Return: varPrime
                                                                                                                                                                                                                                                                                                                                  Return: var
                                                                                                                                                                                                                                                                                                                                Return: factor
                                                                                                                                                                                                                                                                                                                                Call:   termPrime
                                                                                                                                                                                                                                                                                                                                Return: termPrime
                                                                                                                                                                                                                                                                                                                              Return: term
                                                                                                                                                                                                                                                                                                                              Call:   additiveExpressionPrime
                                                                                                                                                                                                                                                                                                                              Return: additiveExpressionPrime
                                                                                                                                                                                                                                                                                                                            Return: additiveExpression
                                                                                                                                                                                                                                                                                                                            Call:   simpleExpressionPrime
                                                                                                                                                                                                                                                                                                                            Return: simpleExpressionPrime
                                                                                                                                                                                                                                                                                                                          Return: simpleExpression
                                                                                                                                                                                                                                                                                                                        Return: expression
                                                                                                                                                                                                                                                                                                                        Consumed token: <<SQUAREBRACKETCLOSE>: "]" at line 63 column 19>
                                                                                                                                                                                                                                                                                                                      Return: varPrime
                                                                                                                                                                                                                                                                                                                    Return: var
                                                                                                                                                                                                                                                                                                                  Return: factor
                                                                                                                                                                                                                                                                                                                  Call:   termPrime
                                                                                                                                                                                                                                                                                                                  Return: termPrime
                                                                                                                                                                                                                                                                                                                Return: term
                                                                                                                                                                                                                                                                                                                Call:   additiveExpressionPrime
                                                                                                                                                                                                                                                                                                                Return: additiveExpressionPrime
                                                                                                                                                                                                                                                                                                              Return: additiveExpression
                                                                                                                                                                                                                                                                                                              Call:   simpleExpressionPrime
                                                                                                                                                                                                                                                                                                              Return: simpleExpressionPrime
                                                                                                                                                                                                                                                                                                            Return: simpleExpression
                                                                                                                                                                                                                                                                                                          Return: expression
                                                                                                                                                                                                                                                                                                          Call:   argListPrime
                                                                                                                                                                                                                                                                                                          Return: argListPrime
                                                                                                                                                                                                                                                                                                        Return: argList
                                                                                                                                                                                                                                                                                                      Return: args
                                                                                                                                                                                                                                                                                                      Consumed token: <<BRACKETCLOSE>: ")" at line 63 column 20>
                                                                                                                                                                                                                                                                                                    Return: call
                                                                                                                                                                                                                                                                                                  Return: factor
                                                                                                                                                                                                                                                                                                  Call:   termPrime
No. linea: 63 Punto y Coma: ;
                                                                                                                                                                                                                                                                                                  Return: termPrime
                                                                                                                                                                                                                                                                                                Return: term
                                                                                                                                                                                                                                                                                                Call:   additiveExpressionPrime
                                                                                                                                                                                                                                                                                                Return: additiveExpressionPrime
                                                                                                                                                                                                                                                                                              Return: additiveExpression
                                                                                                                                                                                                                                                                                              Call:   simpleExpressionPrime
                                                                                                                                                                                                                                                                                              Return: simpleExpressionPrime
                                                                                                                                                                                                                                                                                            Return: simpleExpression
                                                                                                                                                                                                                                                                                          Return: expression
                                                                                                                                                                                                                                                                                          Consumed token: <<SEMICOLON>: ";" at line 63 column 21>
                                                                                                                                                                                                                                                                                        Return: expressionStmt
                                                                                                                                                                                                                                                                                      Return: statement
                                                                                                                                                                                                                                                                                      Call:   statementListPrime
No. linea: 64 Identificador: i
                                                                                                                                                                                                                                                                                        Call:   statement
                                                                                                                                                                                                                                                                                          Call:   expressionStmt
                                                                                                                                                                                                                                                                                            Call:   expression
                                                                                                                                                                                                                                                                                              Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                Visited token: <<ID>: "i" at line 64 column 9>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                Call:   varPrime(LOOKING AHEAD...)
No. linea: 64 Operador igual: =
                                                                                                                                                                                                                                                                                                  Visited token: <<EQUIVALENCE>: "=" at line 64 column 11>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                                                                Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                              Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                              Visited token: <<EQUIVALENCE>: "=" at line 64 column 11>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                                                                                                              Call:   expression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                Call:   var(LOOKING AHEAD...)
No. linea: 64 Identificador: i
                                                                                                                                                                                                                                                                                                  Visited token: <<ID>: "i" at line 64 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                  Call:   varPrime(LOOKING AHEAD...)
No. linea: 64 Operador suma: +
                                                                                                                                                                                                                                                                                                    Visited token: <<SUM>: "+" at line 64 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                                                                  Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                Visited token: <<SUM>: "+" at line 64 column 15>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                                                                                                                Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                  Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                    Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                      Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                        Visited token: <<ID>: "i" at line 64 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                                                        Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                          Visited token: <<ID>: "i" at line 64 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                          Visited token: <<SUM>: "+" at line 64 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                                                          Visited token: <<ID>: "i" at line 64 column 13>; Expected token: <"output">
                                                                                                                                                                                                                                                                                                        Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                        Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                          Visited token: <<ID>: "i" at line 64 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                          Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                            Visited token: <<SUM>: "+" at line 64 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                                                                          Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                        Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                      Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                      Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                        Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                          Visited token: <<SUM>: "+" at line 64 column 15>; Expected token: <<MULT>>
                                                                                                                                                                                                                                                                                                          Visited token: <<SUM>: "+" at line 64 column 15>; Expected token: <<DIV>>
                                                                                                                                                                                                                                                                                                          Visited token: <<SUM>: "+" at line 64 column 15>; Expected token: <<MOD>>
                                                                                                                                                                                                                                                                                                        Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                      Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                    Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                    Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                      Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                        Visited token: <<SUM>: "+" at line 64 column 15>; Expected token: <<SUM>>
                                                                                                                                                                                                                                                                                                      Return: addop(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                      Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                        Call:   factor(LOOKING AHEAD...)
No. linea: 64 Numero entero: 1
                                                                                                                                                                                                                                                                                                          Visited token: <<NUMENT>: "1" at line 64 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                                                          Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "1" at line 64 column 17>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "1" at line 64 column 17>; Expected token: <"output">
                                                                                                                                                                                                                                                                                                          Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                          Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                            Visited token: <<NUMENT>: "1" at line 64 column 17>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                          Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                          Visited token: <<NUMENT>: "1" at line 64 column 17>; Expected token: <<NUMENT>>
                                                                                                                                                                                                                                                                                                          Call:   var
                                                                                                                                                                                                                                                                                                            Consumed token: <<ID>: "i" at line 64 column 9>
                                                                                                                                                                                                                                                                                                            Call:   varPrime
                                                                                                                                                                                                                                                                                                            Return: varPrime
                                                                                                                                                                                                                                                                                                          Return: var
                                                                                                                                                                                                                                                                                                          Consumed token: <<EQUIVALENCE>: "=" at line 64 column 11>
                                                                                                                                                                                                                                                                                                          Call:   expression
                                                                                                                                                                                                                                                                                                            Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                              Visited token: <<ID>: "i" at line 64 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                              Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                Visited token: <<SUM>: "+" at line 64 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                                                                              Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                            Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                            Visited token: <<SUM>: "+" at line 64 column 15>; Expected token: <<EQUIVALENCE>>
                                                                                                                                                                                                                                                                                                            Call:   simpleExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                              Call:   additiveExpression(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                  Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                    Visited token: <<ID>: "i" at line 64 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                    Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                      Visited token: <<ID>: "i" at line 64 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                                      Visited token: <<SUM>: "+" at line 64 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                      Visited token: <<ID>: "i" at line 64 column 13>; Expected token: <"output">
                                                                                                                                                                                                                                                                                                                    Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                                    Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                      Visited token: <<ID>: "i" at line 64 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                                      Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                        Visited token: <<SUM>: "+" at line 64 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                  Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                  Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                    Call:   mulop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                      Visited token: <<SUM>: "+" at line 64 column 15>; Expected token: <<MULT>>
                                                                                                                                                                                                                                                                                                                      Visited token: <<SUM>: "+" at line 64 column 15>; Expected token: <<DIV>>
                                                                                                                                                                                                                                                                                                                      Visited token: <<SUM>: "+" at line 64 column 15>; Expected token: <<MOD>>
                                                                                                                                                                                                                                                                                                                    Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                                  Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                  Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                    Visited token: <<SUM>: "+" at line 64 column 15>; Expected token: <<SUM>>
                                                                                                                                                                                                                                                                                                                  Return: addop(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                  Call:   term(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                    Call:   factor(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                      Visited token: <<NUMENT>: "1" at line 64 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                      Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                        Visited token: <<NUMENT>: "1" at line 64 column 17>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                                        Visited token: <<NUMENT>: "1" at line 64 column 17>; Expected token: <"output">
                                                                                                                                                                                                                                                                                                                      Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                                      Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                        Visited token: <<NUMENT>: "1" at line 64 column 17>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                                      Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                                      Visited token: <<NUMENT>: "1" at line 64 column 17>; Expected token: <<NUMENT>>
                                                                                                                                                                                                                                                                                                                    Return: factor(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                    Call:   termPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                      Call:   mulop(LOOKING AHEAD...)
No. linea: 64 Punto y Coma: ;
                                                                                                                                                                                                                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 64 column 18>; Expected token: <<MULT>>
                                                                                                                                                                                                                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 64 column 18>; Expected token: <<DIV>>
                                                                                                                                                                                                                                                                                                                        Visited token: <<SEMICOLON>: ";" at line 64 column 18>; Expected token: <<MOD>>
                                                                                                                                                                                                                                                                                                                      Return: mulop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                                    Return: termPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                  Return: term(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                  Call:   additiveExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                    Call:   addop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 64 column 18>; Expected token: <<SUM>>
                                                                                                                                                                                                                                                                                                                      Visited token: <<SEMICOLON>: ";" at line 64 column 18>; Expected token: <<SUB>>
                                                                                                                                                                                                                                                                                                                    Return: addop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                                  Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                Return: additiveExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                              Return: additiveExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                              Call:   simpleExpressionPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                Call:   relop(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 64 column 18>; Expected token: <"==">
                                                                                                                                                                                                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 64 column 18>; Expected token: <"<=">
                                                                                                                                                                                                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 64 column 18>; Expected token: <">=">
                                                                                                                                                                                                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 64 column 18>; Expected token: <<ANGLEBRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 64 column 18>; Expected token: <<ANGLEBRACKETCLOSE>>
                                                                                                                                                                                                                                                                                                                  Visited token: <<SEMICOLON>: ";" at line 64 column 18>; Expected token: <"!=">
                                                                                                                                                                                                                                                                                                                Return: relop(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                              Return: simpleExpressionPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                            Return: simpleExpression(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                            Call:   simpleExpression
                                                                                                                                                                                                                                                                                                              Call:   additiveExpression
                                                                                                                                                                                                                                                                                                                Call:   term
                                                                                                                                                                                                                                                                                                                  Call:   factor
                                                                                                                                                                                                                                                                                                                    Visited token: <<ID>: "i" at line 64 column 13>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                    Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                      Visited token: <<ID>: "i" at line 64 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                                      Visited token: <<SUM>: "+" at line 64 column 15>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                      Visited token: <<ID>: "i" at line 64 column 13>; Expected token: <"output">
                                                                                                                                                                                                                                                                                                                    Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                                    Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                      Visited token: <<ID>: "i" at line 64 column 13>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                                      Call:   varPrime(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                        Visited token: <<SUM>: "+" at line 64 column 15>; Expected token: <<SQUAREBRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                      Return: varPrime(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                    Return: var(LOOKAHEAD SUCCEEDED)
                                                                                                                                                                                                                                                                                                                    Call:   var
                                                                                                                                                                                                                                                                                                                      Consumed token: <<ID>: "i" at line 64 column 13>
                                                                                                                                                                                                                                                                                                                      Call:   varPrime
                                                                                                                                                                                                                                                                                                                      Return: varPrime
                                                                                                                                                                                                                                                                                                                    Return: var
                                                                                                                                                                                                                                                                                                                  Return: factor
                                                                                                                                                                                                                                                                                                                  Call:   termPrime
                                                                                                                                                                                                                                                                                                                  Return: termPrime
                                                                                                                                                                                                                                                                                                                Return: term
                                                                                                                                                                                                                                                                                                                Call:   additiveExpressionPrime
                                                                                                                                                                                                                                                                                                                  Call:   addop
                                                                                                                                                                                                                                                                                                                    Consumed token: <<SUM>: "+" at line 64 column 15>
                                                                                                                                                                                                                                                                                                                  Return: addop
                                                                                                                                                                                                                                                                                                                  Call:   term
                                                                                                                                                                                                                                                                                                                    Call:   factor
                                                                                                                                                                                                                                                                                                                      Visited token: <<NUMENT>: "1" at line 64 column 17>; Expected token: <<BRACKETOPEN>>
                                                                                                                                                                                                                                                                                                                      Call:   call(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                        Visited token: <<NUMENT>: "1" at line 64 column 17>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                                        Visited token: <<NUMENT>: "1" at line 64 column 17>; Expected token: <"output">
                                                                                                                                                                                                                                                                                                                      Return: call(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                                      Call:   var(LOOKING AHEAD...)
                                                                                                                                                                                                                                                                                                                        Visited token: <<NUMENT>: "1" at line 64 column 17>; Expected token: <<ID>>
                                                                                                                                                                                                                                                                                                                      Return: var(LOOKAHEAD FAILED)
                                                                                                                                                                                                                                                                                                                      Visited token: <<NUMENT>: "1" at line 64 column 17>; Expected token: <<NUMENT>>
                                                                                                                                                                                                                                                                                                                      Consumed token: <<NUMENT>: "1" at line 64 column 17>
                                                                                                                                                                                                                                                                                                                    Return: factor
                                                                                                                                                                                                                                                                                                                    Call:   termPrime
                                                                                                                                                                                                                                                                                                                    Return: termPrime
                                                                                                                                                                                                                                                                                                                  Return: term
                                                                                                                                                                                                                                                                                                                  Call:   additiveExpressionPrime
                                                                                                                                                                                                                                                                                                                  Return: additiveExpressionPrime
                                                                                                                                                                                                                                                                                                                Return: additiveExpressionPrime
                                                                                                                                                                                                                                                                                                              Return: additiveExpression
                                                                                                                                                                                                                                                                                                              Call:   simpleExpressionPrime
                                                                                                                                                                                                                                                                                                              Return: simpleExpressionPrime
                                                                                                                                                                                                                                                                                                            Return: simpleExpression
                                                                                                                                                                                                                                                                                                          Return: expression
                                                                                                                                                                                                                                                                                                        Return: expression
                                                                                                                                                                                                                                                                                                        Consumed token: <<SEMICOLON>: ";" at line 64 column 18>
                                                                                                                                                                                                                                                                                                      Return: expressionStmt
                                                                                                                                                                                                                                                                                                    Return: statement
                                                                                                                                                                                                                                                                                                    Call:   statementListPrime
No. linea: 65 Llave final: }
                                                                                                                                                                                                                                                                                                    Return: statementListPrime
                                                                                                                                                                                                                                                                                                  Return: statementListPrime
                                                                                                                                                                                                                                                                                                Return: statementListPrime
                                                                                                                                                                                                                                                                                              Return: statementList
                                                                                                                                                                                                                                                                                              Consumed token: <<CURLYBRACKETCLOSE>: "}" at line 65 column 5>
                                                                                                                                                                                                                                                                                            Return: compoundStmt
                                                                                                                                                                                                                                                                                          Return: statement
                                                                                                                                                                                                                                                                                        Return: iterationStmt
                                                                                                                                                                                                                                                                                      Return: statement
                                                                                                                                                                                                                                                                                      Call:   statementListPrime
No. linea: 66 Llave final: }
                                                                                                                                                                                                                                                                                      Return: statementListPrime
                                                                                                                                                                                                                                                                                    Return: statementListPrime
                                                                                                                                                                                                                                                                                  Return: statementListPrime
                                                                                                                                                                                                                                                                                Return: statementListPrime
                                                                                                                                                                                                                                                                              Return: statementListPrime
                                                                                                                                                                                                                                                                            Return: statementListPrime
                                                                                                                                                                                                                                                                          Return: statementList
                                                                                                                                                                                                                                                                          Consumed token: <<CURLYBRACKETCLOSE>: "}" at line 66 column 1>
                                                                                                                                                                                                                                                                        Return: compoundStmt
                                                                                                                                                                                                                                                                      Return: funDeclaration
                                                                                                                                                                                                                                                                    Return: declaration
                                                                                                                                                                                                                                                                    Call:   declarationListPrime
                                                                                                                                                                                                                                                                    Return: declarationListPrime
                                                                                                                                                                                                                                                                  Return: declarationListPrime
                                                                                                                                                                                                                                                                Return: declarationListPrime
                                                                                                                                                                                                                                                              Return: declarationListPrime
                                                                                                                                                                                                                                                            Return: declarationList
                                                                                                                                                                                                                                                          Return: program
                                                                                                                                                                                                                                                          Consumed token: <<EOF> at line 66 column 1>
                                                                                                                                                                                                                                                        Return: sintactico

Analisis Lexico terminado!
